/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { WikipediaSearchFilter } from "./WikipediaSearchFilter";
import {
  WikipediaSearchFilterFromJSON,
  WikipediaSearchFilterFromJSONTyped,
  WikipediaSearchFilterToJSON,
  WikipediaSearchFilterToJSONTyped,
} from "./WikipediaSearchFilter";

/**
 *
 * @export
 * @interface WikipediaSearchParams
 */
export interface WikipediaSearchParams {
  /**
   * Natural language query to search the Wikipedia pages database
   * @type {string}
   * @memberof WikipediaSearchParams
   */
  prompt: string;
  /**
   *
   * @type {WikipediaSearchFilter}
   * @memberof WikipediaSearchParams
   */
  filter?: WikipediaSearchFilter;
  /**
   * 'wikiRevisionFrom' filter, will search pages modified after the specified date, the date could be passed as ISO or 'yyyy-mm-dd'. Date time in ISO format, ie. 2024-01-01T00:00:00.
   * @type {Date}
   * @memberof WikipediaSearchParams
   */
  wikiRevisionFrom?: Date | null;
  /**
   * 'wikiRevisionFrom' filter, will search pages modified before the specified date, the date could be passed as ISO or 'yyyy-mm-dd'. Date time in ISO format, ie. 2024-01-01T00:00:00.
   * @type {Date}
   * @memberof WikipediaSearchParams
   */
  wikiRevisionTo?: Date | null;
  /**
   * 'pageviewsFrom' filter, will search pages with at least the provided number of views per day.
   * @type {number}
   * @memberof WikipediaSearchParams
   */
  pageviewsFrom?: number | null;
  /**
   * 'pageviewsFrom' filter, will search pages with at most the provided number of views per day.
   * @type {number}
   * @memberof WikipediaSearchParams
   */
  pageviewsTo?: number | null;
  /**
   * The number of items per page.
   * @type {number}
   * @memberof WikipediaSearchParams
   */
  size?: number | null;
  /**
   * The page number to retrieve.
   * @type {number}
   * @memberof WikipediaSearchParams
   */
  page?: number | null;
}

/**
 * Check if a given object implements the WikipediaSearchParams interface.
 */
export function instanceOfWikipediaSearchParams(
  value: object,
): value is WikipediaSearchParams {
  if (!("prompt" in value) || value["prompt"] === undefined) return false;
  return true;
}

export function WikipediaSearchParamsFromJSON(
  json: any,
): WikipediaSearchParams {
  return WikipediaSearchParamsFromJSONTyped(json, false);
}

export function WikipediaSearchParamsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): WikipediaSearchParams {
  if (json == null) {
    return json;
  }
  return {
    prompt: json["prompt"],
    filter:
      json["filter"] == null
        ? undefined
        : WikipediaSearchFilterFromJSON(json["filter"]),
    wikiRevisionFrom:
      json["wikiRevisionFrom"] == null
        ? undefined
        : new Date(json["wikiRevisionFrom"]),
    wikiRevisionTo:
      json["wikiRevisionTo"] == null
        ? undefined
        : new Date(json["wikiRevisionTo"]),
    pageviewsFrom:
      json["pageviewsFrom"] == null ? undefined : json["pageviewsFrom"],
    pageviewsTo: json["pageviewsTo"] == null ? undefined : json["pageviewsTo"],
    size: json["size"] == null ? undefined : json["size"],
    page: json["page"] == null ? undefined : json["page"],
  };
}

export function WikipediaSearchParamsToJSON(json: any): WikipediaSearchParams {
  return WikipediaSearchParamsToJSONTyped(json, false);
}

export function WikipediaSearchParamsToJSONTyped(
  value?: WikipediaSearchParams | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    prompt: value["prompt"],
    filter: WikipediaSearchFilterToJSON(value["filter"]),
    wikiRevisionFrom:
      value["wikiRevisionFrom"] == null
        ? undefined
        : (value["wikiRevisionFrom"] as any).toISOString(),
    wikiRevisionTo:
      value["wikiRevisionTo"] == null
        ? undefined
        : (value["wikiRevisionTo"] as any).toISOString(),
    pageviewsFrom: value["pageviewsFrom"],
    pageviewsTo: value["pageviewsTo"],
    size: value["size"],
    page: value["page"],
  };
}
