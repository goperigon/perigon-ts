/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Coordinate } from "./Coordinate";
import {
  CoordinateFromJSON,
  CoordinateFromJSONTyped,
  CoordinateToJSON,
  CoordinateToJSONTyped,
} from "./Coordinate";

/**
 *
 * @export
 * @interface Place
 */
export interface Place {
  /**
   *
   * @type {string}
   * @memberof Place
   */
  osmId?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  road?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  quarter?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  suburb?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  city?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  town?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  county?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  stateDistrict?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  state?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  postcode?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  country?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  countryCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  amenity?: string | null;
  /**
   *
   * @type {string}
   * @memberof Place
   */
  neighbourhood?: string | null;
  /**
   *
   * @type {Coordinate}
   * @memberof Place
   */
  coordinates?: Coordinate;
}

/**
 * Check if a given object implements the Place interface.
 */
export function instanceOfPlace(value: object): value is Place {
  return true;
}

export function PlaceFromJSON(json: any): Place {
  return PlaceFromJSONTyped(json, false);
}

export function PlaceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Place {
  if (json == null) {
    return json;
  }
  return {
    osmId: json["osmId"] == null ? undefined : json["osmId"],
    road: json["road"] == null ? undefined : json["road"],
    quarter: json["quarter"] == null ? undefined : json["quarter"],
    suburb: json["suburb"] == null ? undefined : json["suburb"],
    city: json["city"] == null ? undefined : json["city"],
    town: json["town"] == null ? undefined : json["town"],
    county: json["county"] == null ? undefined : json["county"],
    stateDistrict:
      json["stateDistrict"] == null ? undefined : json["stateDistrict"],
    state: json["state"] == null ? undefined : json["state"],
    postcode: json["postcode"] == null ? undefined : json["postcode"],
    country: json["country"] == null ? undefined : json["country"],
    countryCode: json["countryCode"] == null ? undefined : json["countryCode"],
    amenity: json["amenity"] == null ? undefined : json["amenity"],
    neighbourhood:
      json["neighbourhood"] == null ? undefined : json["neighbourhood"],
    coordinates:
      json["coordinates"] == null
        ? undefined
        : CoordinateFromJSON(json["coordinates"]),
  };
}

export function PlaceToJSON(json: any): Place {
  return PlaceToJSONTyped(json, false);
}

export function PlaceToJSONTyped(
  value?: Place | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    osmId: value["osmId"],
    road: value["road"],
    quarter: value["quarter"],
    suburb: value["suburb"],
    city: value["city"],
    town: value["town"],
    county: value["county"],
    stateDistrict: value["stateDistrict"],
    state: value["state"],
    postcode: value["postcode"],
    country: value["country"],
    countryCode: value["countryCode"],
    amenity: value["amenity"],
    neighbourhood: value["neighbourhood"],
    coordinates: CoordinateToJSON(value["coordinates"]),
  };
}
