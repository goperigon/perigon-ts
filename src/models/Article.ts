/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Journalist } from "./Journalist";
import {
  JournalistFromJSON,
  JournalistFromJSONTyped,
  JournalistToJSON,
  JournalistToJSONTyped,
} from "./Journalist";
import type { SourceHolder } from "./SourceHolder";
import {
  SourceHolderFromJSON,
  SourceHolderFromJSONTyped,
  SourceHolderToJSON,
  SourceHolderToJSONTyped,
} from "./SourceHolder";
import type { CompanyHolder } from "./CompanyHolder";
import {
  CompanyHolderFromJSON,
  CompanyHolderFromJSONTyped,
  CompanyHolderToJSON,
  CompanyHolderToJSONTyped,
} from "./CompanyHolder";
import type { EntityHolder } from "./EntityHolder";
import {
  EntityHolderFromJSON,
  EntityHolderFromJSONTyped,
  EntityHolderToJSON,
  EntityHolderToJSONTyped,
} from "./EntityHolder";
import type { CategoryHolder } from "./CategoryHolder";
import {
  CategoryHolderFromJSON,
  CategoryHolderFromJSONTyped,
  CategoryHolderToJSON,
  CategoryHolderToJSONTyped,
} from "./CategoryHolder";
import type { PersonHolder } from "./PersonHolder";
import {
  PersonHolderFromJSON,
  PersonHolderFromJSONTyped,
  PersonHolderToJSON,
  PersonHolderToJSONTyped,
} from "./PersonHolder";
import type { LabelHolder } from "./LabelHolder";
import {
  LabelHolderFromJSON,
  LabelHolderFromJSONTyped,
  LabelHolderToJSON,
  LabelHolderToJSONTyped,
} from "./LabelHolder";
import type { NewsCluster } from "./NewsCluster";
import {
  NewsClusterFromJSON,
  NewsClusterFromJSONTyped,
  NewsClusterToJSON,
  NewsClusterToJSONTyped,
} from "./NewsCluster";
import type { KeywordHolder } from "./KeywordHolder";
import {
  KeywordHolderFromJSON,
  KeywordHolderFromJSONTyped,
  KeywordHolderToJSON,
  KeywordHolderToJSONTyped,
} from "./KeywordHolder";
import type { LocationHolder } from "./LocationHolder";
import {
  LocationHolderFromJSON,
  LocationHolderFromJSONTyped,
  LocationHolderToJSON,
  LocationHolderToJSONTyped,
} from "./LocationHolder";
import type { TopicHolder } from "./TopicHolder";
import {
  TopicHolderFromJSON,
  TopicHolderFromJSONTyped,
  TopicHolderToJSON,
  TopicHolderToJSONTyped,
} from "./TopicHolder";
import type { SentimentHolder } from "./SentimentHolder";
import {
  SentimentHolderFromJSON,
  SentimentHolderFromJSONTyped,
  SentimentHolderToJSON,
  SentimentHolderToJSONTyped,
} from "./SentimentHolder";
import type { EventTypeHolder } from "./EventTypeHolder";
import {
  EventTypeHolderFromJSON,
  EventTypeHolderFromJSONTyped,
  EventTypeHolderToJSON,
  EventTypeHolderToJSONTyped,
} from "./EventTypeHolder";
import type { CategoryWithScoreHolder } from "./CategoryWithScoreHolder";
import {
  CategoryWithScoreHolderFromJSON,
  CategoryWithScoreHolderFromJSONTyped,
  CategoryWithScoreHolderToJSON,
  CategoryWithScoreHolderToJSONTyped,
} from "./CategoryWithScoreHolder";
import type { Place } from "./Place";
import {
  PlaceFromJSON,
  PlaceFromJSONTyped,
  PlaceToJSON,
  PlaceToJSONTyped,
} from "./Place";
import type { IdNameHolder } from "./IdNameHolder";
import {
  IdNameHolderFromJSON,
  IdNameHolderFromJSONTyped,
  IdNameHolderToJSON,
  IdNameHolderToJSONTyped,
} from "./IdNameHolder";

/**
 *
 * @export
 * @interface Article
 */
export interface Article {
  /**
   *
   * @type {string}
   * @memberof Article
   */
  url?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  authorsByline?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  articleId?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  clusterId?: string | null;
  /**
   *
   * @type {SourceHolder}
   * @memberof Article
   */
  source?: SourceHolder;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  imageUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  country?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  language?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  pubDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  addDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  refreshDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof Article
   */
  score?: number | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  content?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  medium?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Article
   */
  links?: Array<string> | null;
  /**
   *
   * @type {Array<LabelHolder>}
   * @memberof Article
   */
  labels?: Array<LabelHolder> | null;
  /**
   *
   * @type {Array<EventTypeHolder>}
   * @memberof Article
   */
  eventTypes?: Array<EventTypeHolder> | null;
  /**
   *
   * @type {Array<IdNameHolder>}
   * @memberof Article
   */
  matchedAuthors?: Array<IdNameHolder> | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  claim?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  verdict?: string | null;
  /**
   *
   * @type {Array<KeywordHolder>}
   * @memberof Article
   */
  keywords?: Array<KeywordHolder> | null;
  /**
   *
   * @type {Array<TopicHolder>}
   * @memberof Article
   */
  topics?: Array<TopicHolder> | null;
  /**
   *
   * @type {Array<CategoryHolder>}
   * @memberof Article
   */
  categories?: Array<CategoryHolder> | null;
  /**
   *
   * @type {Array<CategoryWithScoreHolder>}
   * @memberof Article
   */
  taxonomies?: Array<CategoryWithScoreHolder> | null;
  /**
   *
   * @type {Array<EntityHolder>}
   * @memberof Article
   */
  entities?: Array<EntityHolder> | null;
  /**
   *
   * @type {Array<CompanyHolder>}
   * @memberof Article
   */
  companies?: Array<CompanyHolder> | null;
  /**
   *
   * @type {SentimentHolder}
   * @memberof Article
   */
  sentiment?: SentimentHolder;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  summary?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  shortSummary?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  translation?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  translatedTitle?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  translatedDescription?: string | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  translatedSummary?: string | null;
  /**
   *
   * @type {Array<LocationHolder>}
   * @memberof Article
   */
  locations?: Array<LocationHolder> | null;
  /**
   *
   * @type {boolean}
   * @memberof Article
   */
  reprint?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof Article
   */
  reprintGroupId?: string | null;
  /**
   *
   * @type {Array<Place>}
   * @memberof Article
   */
  places?: Array<Place> | null;
  /**
   *
   * @type {Array<PersonHolder>}
   * @memberof Article
   */
  people?: Array<PersonHolder> | null;
  /**
   *
   * @type {NewsCluster}
   * @memberof Article
   */
  cluster?: NewsCluster;
  /**
   *
   * @type {Array<Journalist>}
   * @memberof Article
   */
  journalists?: Array<Journalist> | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof Article
   */
  highlights?: { [key: string]: Array<string> } | null;
}

/**
 * Check if a given object implements the Article interface.
 */
export function instanceOfArticle(value: object): value is Article {
  return true;
}

export function ArticleFromJSON(json: any): Article {
  return ArticleFromJSONTyped(json, false);
}

export function ArticleFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Article {
  if (json == null) {
    return json;
  }
  return {
    url: json["url"] == null ? undefined : json["url"],
    authorsByline:
      json["authorsByline"] == null ? undefined : json["authorsByline"],
    articleId: json["articleId"] == null ? undefined : json["articleId"],
    clusterId: json["clusterId"] == null ? undefined : json["clusterId"],
    source:
      json["source"] == null ? undefined : SourceHolderFromJSON(json["source"]),
    imageUrl: json["imageUrl"] == null ? undefined : json["imageUrl"],
    country: json["country"] == null ? undefined : json["country"],
    language: json["language"] == null ? undefined : json["language"],
    pubDate: json["pubDate"] == null ? undefined : json["pubDate"],
    addDate: json["addDate"] == null ? undefined : json["addDate"],
    refreshDate: json["refreshDate"] == null ? undefined : json["refreshDate"],
    score: json["score"] == null ? undefined : json["score"],
    title: json["title"] == null ? undefined : json["title"],
    description: json["description"] == null ? undefined : json["description"],
    content: json["content"] == null ? undefined : json["content"],
    medium: json["medium"] == null ? undefined : json["medium"],
    links: json["links"] == null ? undefined : json["links"],
    labels:
      json["labels"] == null
        ? undefined
        : (json["labels"] as Array<any>).map(LabelHolderFromJSON),
    eventTypes:
      json["eventTypes"] == null
        ? undefined
        : (json["eventTypes"] as Array<any>).map(EventTypeHolderFromJSON),
    matchedAuthors:
      json["matchedAuthors"] == null
        ? undefined
        : (json["matchedAuthors"] as Array<any>).map(IdNameHolderFromJSON),
    claim: json["claim"] == null ? undefined : json["claim"],
    verdict: json["verdict"] == null ? undefined : json["verdict"],
    keywords:
      json["keywords"] == null
        ? undefined
        : (json["keywords"] as Array<any>).map(KeywordHolderFromJSON),
    topics:
      json["topics"] == null
        ? undefined
        : (json["topics"] as Array<any>).map(TopicHolderFromJSON),
    categories:
      json["categories"] == null
        ? undefined
        : (json["categories"] as Array<any>).map(CategoryHolderFromJSON),
    taxonomies:
      json["taxonomies"] == null
        ? undefined
        : (json["taxonomies"] as Array<any>).map(
            CategoryWithScoreHolderFromJSON,
          ),
    entities:
      json["entities"] == null
        ? undefined
        : (json["entities"] as Array<any>).map(EntityHolderFromJSON),
    companies:
      json["companies"] == null
        ? undefined
        : (json["companies"] as Array<any>).map(CompanyHolderFromJSON),
    sentiment:
      json["sentiment"] == null
        ? undefined
        : SentimentHolderFromJSON(json["sentiment"]),
    summary: json["summary"] == null ? undefined : json["summary"],
    shortSummary:
      json["shortSummary"] == null ? undefined : json["shortSummary"],
    translation: json["translation"] == null ? undefined : json["translation"],
    translatedTitle:
      json["translatedTitle"] == null ? undefined : json["translatedTitle"],
    translatedDescription:
      json["translatedDescription"] == null
        ? undefined
        : json["translatedDescription"],
    translatedSummary:
      json["translatedSummary"] == null ? undefined : json["translatedSummary"],
    locations:
      json["locations"] == null
        ? undefined
        : (json["locations"] as Array<any>).map(LocationHolderFromJSON),
    reprint: json["reprint"] == null ? undefined : json["reprint"],
    reprintGroupId:
      json["reprintGroupId"] == null ? undefined : json["reprintGroupId"],
    places:
      json["places"] == null
        ? undefined
        : (json["places"] as Array<any>).map(PlaceFromJSON),
    people:
      json["people"] == null
        ? undefined
        : (json["people"] as Array<any>).map(PersonHolderFromJSON),
    cluster:
      json["cluster"] == null
        ? undefined
        : NewsClusterFromJSON(json["cluster"]),
    journalists:
      json["journalists"] == null
        ? undefined
        : (json["journalists"] as Array<any>).map(JournalistFromJSON),
    highlights: json["highlights"] == null ? undefined : json["highlights"],
  };
}

export function ArticleToJSON(json: any): Article {
  return ArticleToJSONTyped(json, false);
}

export function ArticleToJSONTyped(
  value?: Article | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    url: value["url"],
    authorsByline: value["authorsByline"],
    articleId: value["articleId"],
    clusterId: value["clusterId"],
    source: SourceHolderToJSON(value["source"]),
    imageUrl: value["imageUrl"],
    country: value["country"],
    language: value["language"],
    pubDate: value["pubDate"],
    addDate: value["addDate"],
    refreshDate: value["refreshDate"],
    score: value["score"],
    title: value["title"],
    description: value["description"],
    content: value["content"],
    medium: value["medium"],
    links: value["links"],
    labels:
      value["labels"] == null
        ? undefined
        : (value["labels"] as Array<any>).map(LabelHolderToJSON),
    eventTypes:
      value["eventTypes"] == null
        ? undefined
        : (value["eventTypes"] as Array<any>).map(EventTypeHolderToJSON),
    matchedAuthors:
      value["matchedAuthors"] == null
        ? undefined
        : (value["matchedAuthors"] as Array<any>).map(IdNameHolderToJSON),
    claim: value["claim"],
    verdict: value["verdict"],
    keywords:
      value["keywords"] == null
        ? undefined
        : (value["keywords"] as Array<any>).map(KeywordHolderToJSON),
    topics:
      value["topics"] == null
        ? undefined
        : (value["topics"] as Array<any>).map(TopicHolderToJSON),
    categories:
      value["categories"] == null
        ? undefined
        : (value["categories"] as Array<any>).map(CategoryHolderToJSON),
    taxonomies:
      value["taxonomies"] == null
        ? undefined
        : (value["taxonomies"] as Array<any>).map(
            CategoryWithScoreHolderToJSON,
          ),
    entities:
      value["entities"] == null
        ? undefined
        : (value["entities"] as Array<any>).map(EntityHolderToJSON),
    companies:
      value["companies"] == null
        ? undefined
        : (value["companies"] as Array<any>).map(CompanyHolderToJSON),
    sentiment: SentimentHolderToJSON(value["sentiment"]),
    summary: value["summary"],
    shortSummary: value["shortSummary"],
    translation: value["translation"],
    translatedTitle: value["translatedTitle"],
    translatedDescription: value["translatedDescription"],
    translatedSummary: value["translatedSummary"],
    locations:
      value["locations"] == null
        ? undefined
        : (value["locations"] as Array<any>).map(LocationHolderToJSON),
    reprint: value["reprint"],
    reprintGroupId: value["reprintGroupId"],
    places:
      value["places"] == null
        ? undefined
        : (value["places"] as Array<any>).map(PlaceToJSON),
    people:
      value["people"] == null
        ? undefined
        : (value["people"] as Array<any>).map(PersonHolderToJSON),
    cluster: NewsClusterToJSON(value["cluster"]),
    journalists:
      value["journalists"] == null
        ? undefined
        : (value["journalists"] as Array<any>).map(JournalistToJSON),
    highlights: value["highlights"],
  };
}
