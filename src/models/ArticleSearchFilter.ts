/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { CoordinateFilter } from "./CoordinateFilter";
import {
  CoordinateFilterFromJSON,
  CoordinateFilterFromJSONTyped,
  CoordinateFilterToJSON,
  CoordinateFilterToJSONTyped,
} from "./CoordinateFilter";

/**
 * A versatile filter object to refine search results based on articles, clusters, sources, languages, categories, locations, companies, and people. Supports logical operators (AND, OR, NOT) for complex queries. Accepts single values or arrays, with arrays applied as OR operations.
 * @export
 * @interface ArticleSearchFilter
 */
export interface ArticleSearchFilter {
  /**
   * Filter by specific article(s). Array of article IDs. For convenience, a single string ID is also accepted.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  articleId?: Array<string> | null;
  /**
   * Filter by specific cluster(s). Accepts either a single string or an array of strings.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  clusterId?: Array<string> | null;
  /**
   * Filter by specific source(s). Accepts either a single string or an array of strings.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  source?: Array<string> | null;
  /**
   * The domain of the website, which should be excluded from the search. Multiple parameters could be provided. Wildcards (* and ?) are suported (e.g. *.cnn.com).
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeSource?: Array<string> | null;
  /**
   * Filter by specific source group, for example: 'top100'. Accepts either a single string or an array of strings.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  sourceGroup?: Array<string> | null;
  /**
   * Language code to filter by language. If an array parameters are passed, they will be applied as OR operations. For example: ['en', 'es']. Language ISO codes must be provided.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  language?: Array<string> | null;
  /**
   *  A list of languages to be excluded. Any article published in one of the languages provided in this filter will not be returned. This is useful when you are interested only in news published in specific languages.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeLanguage?: Array<string> | null;
  /**
   * Labels to filter by, could be 'Opinion', 'Paid-news', 'Non-news', etc. If multiple parameters are passed, they will be applied as OR operations.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  label?: Array<string> | null;
  /**
   * Exclude results that include specific labels (Opinion, Non-news, Paid News, etc.). You can filter multiple by repeating the parameter.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeLabel?: Array<string> | null;
  /**
   * Filters by Google Content Categories. This field will accept 1 or more categories, must pass the full name of the category. Example: taxonomy=/Finance/Banking/Other, /Finance/Investing/Funds
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  taxonomy?: Array<string> | null;
  /**
   * Filter by categories. Categories are general themes that the article is about. Examples of categories: Tech, Politics, etc. If multiple parameters are passed, they will be applied as OR operations. Use 'none' to search uncategorized articles.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  category?: Array<string> | null;
  /**
   * Filter by topics. Each topic is some kind of entity that the article is about. Examples of topics: Markets, Joe Biden, Green Energy, Climate Change, Cryptocurrency, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  topic?: Array<string> | null;
  /**
   * Filter by excluding topics. Each topic is some kind of entity that the article is about. Examples of topics: Markets, Joe Biden, Green Energy, Climate Change, Cryptocurrency, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeTopic?: Array<string> | null;
  /**
   * Country code to filter by country. If multiple parameters are passed, they will be applied as OR operations. Only accepts country ISO codes.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  country?: Array<string> | null;
  /**
   * Excludes articles from specific countries in the vector search results. Accepts a list of country codes (e.g., 'US', 'UK', 'CA'). Use this parameter to filter out articles published in countries you don't want to include in your search results. See the Country and Language Support section in the documentation for a full list of supported country codes.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeCountry?: Array<string> | null;
  /**
   * Filters articles where a specified country plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the country in question. If multiple parameters are passed, they will be applied as OR operations. Only accepts country ISO codes.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  locationsCountry?: Array<string> | null;
  /**
   * Excludes articles where a specified country plays a central role in the content, ensuring results are not deeply relevant to the country in question. If multiple parameters are passed, they will be applied as AND operations, excluding articles relevant to any of the specified countries.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeLocationsCountry?: Array<string> | null;
  /**
   * Filters articles where a specified state plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the state in question. If multiple parameters are passed, they will be applied as OR operations. Only accepts state ISO codes.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  state?: Array<string> | null;
  /**
   * A list of states to exclude. Articles that include, or are associated with, any of the states provided here will be filtered out. This is especially useful if you want to ignore news tied to certain geographical areas (e.g., US states).
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeState?: Array<string> | null;
  /**
   * Filters articles where a specified state plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the state in question. If multiple parameters are passed, they will be applied as OR operations.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  county?: Array<string> | null;
  /**
   * Excludes articles from specific counties or administrative divisions in the vector search results. Accepts either a single county name or a list of county names. County names should match the format used in article metadata (e.g., 'Los Angeles County', 'Cook County'). This parameter allows for more granular geographic filter
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeCounty?: Array<string> | null;
  /**
   * Filters articles where a specified city plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the urban area in question. If multiple parameters are passed, they will be applied as OR operations.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  city?: Array<string> | null;
  /**
   * A list of cities to exclude from the results. Articles that are associated with any of the specified cities will be filtered out.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeCity?: Array<string> | null;
  /**
   * Find articles published by sources that are located within a given country. Must be 2 character country code (i.e. us, gb, etc).
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  sourceCountry?: Array<string> | null;
  /**
   * Find articles published by sources that are located within a given state.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  sourceState?: Array<string> | null;
  /**
   * Find articles published by sources that are located within a given county.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  sourceCounty?: Array<string> | null;
  /**
   * Find articles published by sources that are located within a given city.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  sourceCity?: Array<string> | null;
  /**
   *
   * @type {CoordinateFilter}
   * @memberof ArticleSearchFilter
   */
  coordinates?: CoordinateFilter;
  /**
   *
   * @type {CoordinateFilter}
   * @memberof ArticleSearchFilter
   */
  sourceCoordinates?: CoordinateFilter;
  /**
   * List of company IDs to filter by.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  companyId?: Array<string> | null;
  /**
   * A list of company identifiers. Articles associated with companies that have any of these unique IDs will be filtered out from the returned results, ensuring that certain companies or corporate entities are not included.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeCompanyId?: Array<string> | null;
  /**
   * Search by company domains for filtering. E.g. companyDomain=apple.com.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  companyDomain?: Array<string> | null;
  /**
   * A list of company domains to exclude. If an article is related to a company that uses one of the specified domains (for instance, "example.com"), it will not be returned in the results.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeCompanyDomain?: Array<string> | null;
  /**
   * Search by company symbols.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  companySymbol?: Array<string> | null;
  /**
   * A list of stock symbols (ticker symbols) that identify companies to be excluded. Articles related to companies using any of these symbols will be omitted, which is useful for targeting or avoiding specific public companies.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludeCompanySymbol?: Array<string> | null;
  /**
   * Search by company name.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  companyName?: Array<string> | null;
  /**
   * List of person Wikidata IDs for filtering.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  personWikidataId?: Array<string> | null;
  /**
   * A list of Wikidata identifiers for individuals. Articles mentioning persons with any of these Wikidata IDs will be filtered out. This is particularly helpful when using a unique identifier to prevent ambiguity in names.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludePersonWikidataId?: Array<string> | null;
  /**
   * List of person names for exact matches. Boolean and complex logic is not supported on this filter.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  personName?: Array<string> | null;
  /**
   * A list of person names that, when associated with the content, cause the article to be excluded. This filter removes articles related to any individuals whose names match those on the list.
   * @type {Array<string>}
   * @memberof ArticleSearchFilter
   */
  excludePersonName?: Array<string> | null;
  /**
   * Adds additional AND filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the AND logical operator.
   * @type {Array<ArticleSearchFilter>}
   * @memberof ArticleSearchFilter
   */
  aND?: Array<ArticleSearchFilter> | null;
  /**
   * Adds additional OR filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the OR logical operator.
   * @type {Array<ArticleSearchFilter>}
   * @memberof ArticleSearchFilter
   */
  oR?: Array<ArticleSearchFilter> | null;
  /**
   * A filter object for logical NOT operations
   * @type {Array<ArticleSearchFilter>}
   * @memberof ArticleSearchFilter
   */
  nOT?: Array<ArticleSearchFilter> | null;
}

/**
 * Check if a given object implements the ArticleSearchFilter interface.
 */
export function instanceOfArticleSearchFilter(
  value: object,
): value is ArticleSearchFilter {
  return true;
}

export function ArticleSearchFilterFromJSON(json: any): ArticleSearchFilter {
  return ArticleSearchFilterFromJSONTyped(json, false);
}

export function ArticleSearchFilterFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ArticleSearchFilter {
  if (json == null) {
    return json;
  }
  return {
    articleId: json["articleId"] == null ? undefined : json["articleId"],
    clusterId: json["clusterId"] == null ? undefined : json["clusterId"],
    source: json["source"] == null ? undefined : json["source"],
    excludeSource:
      json["excludeSource"] == null ? undefined : json["excludeSource"],
    sourceGroup: json["sourceGroup"] == null ? undefined : json["sourceGroup"],
    language: json["language"] == null ? undefined : json["language"],
    excludeLanguage:
      json["excludeLanguage"] == null ? undefined : json["excludeLanguage"],
    label: json["label"] == null ? undefined : json["label"],
    excludeLabel:
      json["excludeLabel"] == null ? undefined : json["excludeLabel"],
    taxonomy: json["taxonomy"] == null ? undefined : json["taxonomy"],
    category: json["category"] == null ? undefined : json["category"],
    topic: json["topic"] == null ? undefined : json["topic"],
    excludeTopic:
      json["excludeTopic"] == null ? undefined : json["excludeTopic"],
    country: json["country"] == null ? undefined : json["country"],
    excludeCountry:
      json["excludeCountry"] == null ? undefined : json["excludeCountry"],
    locationsCountry:
      json["locationsCountry"] == null ? undefined : json["locationsCountry"],
    excludeLocationsCountry:
      json["excludeLocationsCountry"] == null
        ? undefined
        : json["excludeLocationsCountry"],
    state: json["state"] == null ? undefined : json["state"],
    excludeState:
      json["excludeState"] == null ? undefined : json["excludeState"],
    county: json["county"] == null ? undefined : json["county"],
    excludeCounty:
      json["excludeCounty"] == null ? undefined : json["excludeCounty"],
    city: json["city"] == null ? undefined : json["city"],
    excludeCity: json["excludeCity"] == null ? undefined : json["excludeCity"],
    sourceCountry:
      json["sourceCountry"] == null ? undefined : json["sourceCountry"],
    sourceState: json["sourceState"] == null ? undefined : json["sourceState"],
    sourceCounty:
      json["sourceCounty"] == null ? undefined : json["sourceCounty"],
    sourceCity: json["sourceCity"] == null ? undefined : json["sourceCity"],
    coordinates:
      json["coordinates"] == null
        ? undefined
        : CoordinateFilterFromJSON(json["coordinates"]),
    sourceCoordinates:
      json["sourceCoordinates"] == null
        ? undefined
        : CoordinateFilterFromJSON(json["sourceCoordinates"]),
    companyId: json["companyId"] == null ? undefined : json["companyId"],
    excludeCompanyId:
      json["excludeCompanyId"] == null ? undefined : json["excludeCompanyId"],
    companyDomain:
      json["companyDomain"] == null ? undefined : json["companyDomain"],
    excludeCompanyDomain:
      json["excludeCompanyDomain"] == null
        ? undefined
        : json["excludeCompanyDomain"],
    companySymbol:
      json["companySymbol"] == null ? undefined : json["companySymbol"],
    excludeCompanySymbol:
      json["excludeCompanySymbol"] == null
        ? undefined
        : json["excludeCompanySymbol"],
    companyName: json["companyName"] == null ? undefined : json["companyName"],
    personWikidataId:
      json["personWikidataId"] == null ? undefined : json["personWikidataId"],
    excludePersonWikidataId:
      json["excludePersonWikidataId"] == null
        ? undefined
        : json["excludePersonWikidataId"],
    personName: json["personName"] == null ? undefined : json["personName"],
    excludePersonName:
      json["excludePersonName"] == null ? undefined : json["excludePersonName"],
    aND:
      json["AND"] == null
        ? undefined
        : (json["AND"] as Array<any>).map(ArticleSearchFilterFromJSON),
    oR:
      json["OR"] == null
        ? undefined
        : (json["OR"] as Array<any>).map(ArticleSearchFilterFromJSON),
    nOT:
      json["NOT"] == null
        ? undefined
        : (json["NOT"] as Array<any>).map(ArticleSearchFilterFromJSON),
  };
}

export function ArticleSearchFilterToJSON(json: any): ArticleSearchFilter {
  return ArticleSearchFilterToJSONTyped(json, false);
}

export function ArticleSearchFilterToJSONTyped(
  value?: ArticleSearchFilter | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    articleId: value["articleId"],
    clusterId: value["clusterId"],
    source: value["source"],
    excludeSource: value["excludeSource"],
    sourceGroup: value["sourceGroup"],
    language: value["language"],
    excludeLanguage: value["excludeLanguage"],
    label: value["label"],
    excludeLabel: value["excludeLabel"],
    taxonomy: value["taxonomy"],
    category: value["category"],
    topic: value["topic"],
    excludeTopic: value["excludeTopic"],
    country: value["country"],
    excludeCountry: value["excludeCountry"],
    locationsCountry: value["locationsCountry"],
    excludeLocationsCountry: value["excludeLocationsCountry"],
    state: value["state"],
    excludeState: value["excludeState"],
    county: value["county"],
    excludeCounty: value["excludeCounty"],
    city: value["city"],
    excludeCity: value["excludeCity"],
    sourceCountry: value["sourceCountry"],
    sourceState: value["sourceState"],
    sourceCounty: value["sourceCounty"],
    sourceCity: value["sourceCity"],
    coordinates: CoordinateFilterToJSON(value["coordinates"]),
    sourceCoordinates: CoordinateFilterToJSON(value["sourceCoordinates"]),
    companyId: value["companyId"],
    excludeCompanyId: value["excludeCompanyId"],
    companyDomain: value["companyDomain"],
    excludeCompanyDomain: value["excludeCompanyDomain"],
    companySymbol: value["companySymbol"],
    excludeCompanySymbol: value["excludeCompanySymbol"],
    companyName: value["companyName"],
    personWikidataId: value["personWikidataId"],
    excludePersonWikidataId: value["excludePersonWikidataId"],
    personName: value["personName"],
    excludePersonName: value["excludePersonName"],
    AND:
      value["aND"] == null
        ? undefined
        : (value["aND"] as Array<any>).map(ArticleSearchFilterToJSON),
    OR:
      value["oR"] == null
        ? undefined
        : (value["oR"] as Array<any>).map(ArticleSearchFilterToJSON),
    NOT:
      value["nOT"] == null
        ? undefined
        : (value["nOT"] as Array<any>).map(ArticleSearchFilterToJSON),
  };
}
