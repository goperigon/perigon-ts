/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { WikidataLabelHolder } from "./WikidataLabelHolder";
import {
  WikidataLabelHolderFromJSON,
  WikidataLabelHolderFromJSONTyped,
  WikidataLabelHolderToJSON,
  WikidataLabelHolderToJSONTyped,
} from "./WikidataLabelHolder";

/**
 *
 * @export
 * @interface WikiData
 */
export interface WikiData {
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  pageId?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  sectionId?: string | null;
  /**
   *
   * @type {number}
   * @memberof WikiData
   */
  wikiPageId?: number | null;
  /**
   *
   * @type {number}
   * @memberof WikiData
   */
  wikiRevisionId?: number | null;
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  wikiRevisionTs?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  wikiCode?: string | null;
  /**
   *
   * @type {number}
   * @memberof WikiData
   */
  wikiNamespace?: number | null;
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  wikiTitle?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  wikidataId?: string | null;
  /**
   *
   * @type {Array<WikidataLabelHolder>}
   * @memberof WikiData
   */
  wikidataInstanceOf?: Array<WikidataLabelHolder> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof WikiData
   */
  redirectTitles?: Array<string> | null;
  /**
   *
   * @type {number}
   * @memberof WikiData
   */
  pageviews?: number | null;
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  title?: string | null;
  /**
   *
   * @type {number}
   * @memberof WikiData
   */
  styleLevel?: number | null;
  /**
   *
   * @type {string}
   * @memberof WikiData
   */
  content?: string | null;
}

/**
 * Check if a given object implements the WikiData interface.
 */
export function instanceOfWikiData(value: object): value is WikiData {
  return true;
}

export function WikiDataFromJSON(json: any): WikiData {
  return WikiDataFromJSONTyped(json, false);
}

export function WikiDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): WikiData {
  if (json == null) {
    return json;
  }
  return {
    pageId: json["pageId"] == null ? undefined : json["pageId"],
    sectionId: json["sectionId"] == null ? undefined : json["sectionId"],
    wikiPageId: json["wikiPageId"] == null ? undefined : json["wikiPageId"],
    wikiRevisionId:
      json["wikiRevisionId"] == null ? undefined : json["wikiRevisionId"],
    wikiRevisionTs:
      json["wikiRevisionTs"] == null ? undefined : json["wikiRevisionTs"],
    wikiCode: json["wikiCode"] == null ? undefined : json["wikiCode"],
    wikiNamespace:
      json["wikiNamespace"] == null ? undefined : json["wikiNamespace"],
    wikiTitle: json["wikiTitle"] == null ? undefined : json["wikiTitle"],
    wikidataId: json["wikidataId"] == null ? undefined : json["wikidataId"],
    wikidataInstanceOf:
      json["wikidataInstanceOf"] == null
        ? undefined
        : (json["wikidataInstanceOf"] as Array<any>).map(
            WikidataLabelHolderFromJSON,
          ),
    redirectTitles:
      json["redirectTitles"] == null ? undefined : json["redirectTitles"],
    pageviews: json["pageviews"] == null ? undefined : json["pageviews"],
    title: json["title"] == null ? undefined : json["title"],
    styleLevel: json["styleLevel"] == null ? undefined : json["styleLevel"],
    content: json["content"] == null ? undefined : json["content"],
  };
}

export function WikiDataToJSON(json: any): WikiData {
  return WikiDataToJSONTyped(json, false);
}

export function WikiDataToJSONTyped(
  value?: WikiData | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    pageId: value["pageId"],
    sectionId: value["sectionId"],
    wikiPageId: value["wikiPageId"],
    wikiRevisionId: value["wikiRevisionId"],
    wikiRevisionTs: value["wikiRevisionTs"],
    wikiCode: value["wikiCode"],
    wikiNamespace: value["wikiNamespace"],
    wikiTitle: value["wikiTitle"],
    wikidataId: value["wikidataId"],
    wikidataInstanceOf:
      value["wikidataInstanceOf"] == null
        ? undefined
        : (value["wikidataInstanceOf"] as Array<any>).map(
            WikidataLabelHolderToJSON,
          ),
    redirectTitles: value["redirectTitles"],
    pageviews: value["pageviews"],
    title: value["title"],
    styleLevel: value["styleLevel"],
    content: value["content"],
  };
}
