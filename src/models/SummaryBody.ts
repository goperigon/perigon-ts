/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Request body for the Search-Summarizer endpoint. Contains the userâ€™s summary instructions, how many articles to include, which fields to use, the retrieval method, and LLM generation settings.
 * @export
 * @interface SummaryBody
 */
export interface SummaryBody {
  /**
   * Instructions guiding how the summary should be written. Maximum length: 2 048 characters.
   * @type {string}
   * @memberof SummaryBody
   */
  prompt?: string | null;
  /**
   * The maximum number of articles to factor into the summary.
   * @type {number}
   * @memberof SummaryBody
   */
  maxArticleCount?: number | null;
  /**
   * The maximum number of articles that should be returned in the response. This can be used to return fewer than maxArticleCount results.
   * @type {number}
   * @memberof SummaryBody
   */
  returnedArticleCount?: number | null;
  /**
   * Which article fields to include when generating the summary. Up to three values from TITLE, CONTENT, SUMMARY.
   * @type {string}
   * @memberof SummaryBody
   */
  summarizeFields?: SummaryBodySummarizeFieldsEnum | null;
  /**
   * Method for selecting articles: ARTICLES (include all matches) or CLUSTERS (one per cluster).
   * @type {string}
   * @memberof SummaryBody
   */
  method?: SummaryBodyMethodEnum | null;
  /**
   * The underlying LLM model to use for generation.
   * @type {string}
   * @memberof SummaryBody
   */
  model?: SummaryBodyModelEnum | null;
  /**
   * Sampling temperature for the LLM (0.0 = deterministic to 2.0 = very creative).
   * @type {number}
   * @memberof SummaryBody
   */
  temperature?: number | null;
  /**
   * Nucleus sampling (top-p) for the LLM (0.0 to 1.0).
   * @type {number}
   * @memberof SummaryBody
   */
  topP?: number | null;
  /**
   * Maximum number of tokens to generate in the summary.
   * @type {number}
   * @memberof SummaryBody
   */
  maxTokens?: number | null;
}

/**
 * @export
 */
export const SummaryBodySummarizeFieldsEnum = {
  Title: "TITLE",
  Content: "CONTENT",
  Summary: "SUMMARY",
} as const;
export type SummaryBodySummarizeFieldsEnum =
  (typeof SummaryBodySummarizeFieldsEnum)[keyof typeof SummaryBodySummarizeFieldsEnum];

/**
 * @export
 */
export const SummaryBodyMethodEnum = {
  Articles: "ARTICLES",
  Clusters: "CLUSTERS",
} as const;
export type SummaryBodyMethodEnum =
  (typeof SummaryBodyMethodEnum)[keyof typeof SummaryBodyMethodEnum];

/**
 * @export
 */
export const SummaryBodyModelEnum = {
  Gpt4o: "gpt-4o",
  Gpt4oMini: "gpt-4o-mini",
  Gpt41: "gpt-4.1",
  Gpt41Mini: "gpt-4.1-mini",
  Gpt41Nano: "gpt-4.1-nano",
  Llama3370bVersatile: "llama-3.3-70b-versatile",
  DeepseekR1DistillLlama70b: "deepseek-r1-distill-llama-70b",
} as const;
export type SummaryBodyModelEnum =
  (typeof SummaryBodyModelEnum)[keyof typeof SummaryBodyModelEnum];

/**
 * Check if a given object implements the SummaryBody interface.
 */
export function instanceOfSummaryBody(value: object): value is SummaryBody {
  return true;
}

export function SummaryBodyFromJSON(json: any): SummaryBody {
  return SummaryBodyFromJSONTyped(json, false);
}

export function SummaryBodyFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SummaryBody {
  if (json == null) {
    return json;
  }
  return {
    prompt: json["prompt"] == null ? undefined : json["prompt"],
    maxArticleCount:
      json["maxArticleCount"] == null ? undefined : json["maxArticleCount"],
    returnedArticleCount:
      json["returnedArticleCount"] == null
        ? undefined
        : json["returnedArticleCount"],
    summarizeFields:
      json["summarizeFields"] == null ? undefined : json["summarizeFields"],
    method: json["method"] == null ? undefined : json["method"],
    model: json["model"] == null ? undefined : json["model"],
    temperature: json["temperature"] == null ? undefined : json["temperature"],
    topP: json["topP"] == null ? undefined : json["topP"],
    maxTokens: json["maxTokens"] == null ? undefined : json["maxTokens"],
  };
}

export function SummaryBodyToJSON(json: any): SummaryBody {
  return SummaryBodyToJSONTyped(json, false);
}

export function SummaryBodyToJSONTyped(
  value?: SummaryBody | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    prompt: value["prompt"],
    maxArticleCount: value["maxArticleCount"],
    returnedArticleCount: value["returnedArticleCount"],
    summarizeFields: value["summarizeFields"],
    method: value["method"],
    model: value["model"],
    temperature: value["temperature"],
    topP: value["topP"],
    maxTokens: value["maxTokens"],
  };
}
