/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Source } from "./Source";
import {
  SourceFromJSON,
  SourceFromJSONTyped,
  SourceToJSON,
  SourceToJSONTyped,
} from "./Source";

/**
 * Source search result
 * @export
 * @interface SourceSearchResult
 */
export interface SourceSearchResult {
  /**
   *
   * @type {number}
   * @memberof SourceSearchResult
   */
  status?: number | null;
  /**
   *
   * @type {number}
   * @memberof SourceSearchResult
   */
  numResults?: number | null;
  /**
   *
   * @type {Array<Source>}
   * @memberof SourceSearchResult
   */
  results?: Array<Source> | null;
}

/**
 * Check if a given object implements the SourceSearchResult interface.
 */
export function instanceOfSourceSearchResult(
  value: object,
): value is SourceSearchResult {
  return true;
}

export function SourceSearchResultFromJSON(json: any): SourceSearchResult {
  return SourceSearchResultFromJSONTyped(json, false);
}

export function SourceSearchResultFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SourceSearchResult {
  if (json == null) {
    return json;
  }
  return {
    status: json["status"] == null ? undefined : json["status"],
    numResults: json["numResults"] == null ? undefined : json["numResults"],
    results:
      json["results"] == null
        ? undefined
        : (json["results"] as Array<any>).map(SourceFromJSON),
  };
}

export function SourceSearchResultToJSON(json: any): SourceSearchResult {
  return SourceSearchResultToJSONTyped(json, false);
}

export function SourceSearchResultToJSONTyped(
  value?: SourceSearchResult | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    status: value["status"],
    numResults: value["numResults"],
    results:
      value["results"] == null
        ? undefined
        : (value["results"] as Array<any>).map(SourceToJSON),
  };
}
