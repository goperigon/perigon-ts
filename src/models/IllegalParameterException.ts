/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { AuthExceptionCauseStackTraceInner } from "./AuthExceptionCauseStackTraceInner";
import {
  AuthExceptionCauseStackTraceInnerFromJSON,
  AuthExceptionCauseStackTraceInnerFromJSONTyped,
  AuthExceptionCauseStackTraceInnerToJSON,
  AuthExceptionCauseStackTraceInnerToJSONTyped,
} from "./AuthExceptionCauseStackTraceInner";
import type { AuthExceptionCause } from "./AuthExceptionCause";
import {
  AuthExceptionCauseFromJSON,
  AuthExceptionCauseFromJSONTyped,
  AuthExceptionCauseToJSON,
  AuthExceptionCauseToJSONTyped,
} from "./AuthExceptionCause";
import type { AuthExceptionSuppressedInner } from "./AuthExceptionSuppressedInner";
import {
  AuthExceptionSuppressedInnerFromJSON,
  AuthExceptionSuppressedInnerFromJSONTyped,
  AuthExceptionSuppressedInnerToJSON,
  AuthExceptionSuppressedInnerToJSONTyped,
} from "./AuthExceptionSuppressedInner";

/**
 *
 * @export
 * @interface IllegalParameterException
 */
export interface IllegalParameterException {
  /**
   *
   * @type {AuthExceptionCause}
   * @memberof IllegalParameterException
   */
  cause?: AuthExceptionCause | null;
  /**
   *
   * @type {Array<AuthExceptionCauseStackTraceInner>}
   * @memberof IllegalParameterException
   */
  stackTrace?: Array<AuthExceptionCauseStackTraceInner> | null;
  /**
   *
   * @type {string}
   * @memberof IllegalParameterException
   */
  message?: string | null;
  /**
   *
   * @type {Array<AuthExceptionSuppressedInner>}
   * @memberof IllegalParameterException
   */
  suppressed?: Array<AuthExceptionSuppressedInner> | null;
  /**
   *
   * @type {string}
   * @memberof IllegalParameterException
   */
  localizedMessage?: string | null;
}

/**
 * Check if a given object implements the IllegalParameterException interface.
 */
export function instanceOfIllegalParameterException(
  value: object,
): value is IllegalParameterException {
  return true;
}

export function IllegalParameterExceptionFromJSON(
  json: any,
): IllegalParameterException {
  return IllegalParameterExceptionFromJSONTyped(json, false);
}

export function IllegalParameterExceptionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): IllegalParameterException {
  if (json == null) {
    return json;
  }
  return {
    cause:
      json["cause"] == null
        ? undefined
        : AuthExceptionCauseFromJSON(json["cause"]),
    stackTrace:
      json["stackTrace"] == null
        ? undefined
        : (json["stackTrace"] as Array<any>).map(
            AuthExceptionCauseStackTraceInnerFromJSON,
          ),
    message: json["message"] == null ? undefined : json["message"],
    suppressed:
      json["suppressed"] == null
        ? undefined
        : (json["suppressed"] as Array<any>).map(
            AuthExceptionSuppressedInnerFromJSON,
          ),
    localizedMessage:
      json["localizedMessage"] == null ? undefined : json["localizedMessage"],
  };
}

export function IllegalParameterExceptionToJSON(
  json: any,
): IllegalParameterException {
  return IllegalParameterExceptionToJSONTyped(json, false);
}

export function IllegalParameterExceptionToJSONTyped(
  value?: IllegalParameterException | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    cause: AuthExceptionCauseToJSON(value["cause"]),
    stackTrace:
      value["stackTrace"] == null
        ? undefined
        : (value["stackTrace"] as Array<any>).map(
            AuthExceptionCauseStackTraceInnerToJSON,
          ),
    message: value["message"],
    suppressed:
      value["suppressed"] == null
        ? undefined
        : (value["suppressed"] as Array<any>).map(
            AuthExceptionSuppressedInnerToJSON,
          ),
    localizedMessage: value["localizedMessage"],
  };
}
