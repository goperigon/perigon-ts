/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ImageHolder } from "./ImageHolder";
import {
  ImageHolderFromJSON,
  ImageHolderFromJSONTyped,
  ImageHolderToJSON,
  ImageHolderToJSONTyped,
} from "./ImageHolder";
import type { WikidataPoliticalPartyHolder } from "./WikidataPoliticalPartyHolder";
import {
  WikidataPoliticalPartyHolderFromJSON,
  WikidataPoliticalPartyHolderFromJSONTyped,
  WikidataPoliticalPartyHolderToJSON,
  WikidataPoliticalPartyHolderToJSONTyped,
} from "./WikidataPoliticalPartyHolder";
import type { WikidataPositionHolder } from "./WikidataPositionHolder";
import {
  WikidataPositionHolderFromJSON,
  WikidataPositionHolderFromJSONTyped,
  WikidataPositionHolderToJSON,
  WikidataPositionHolderToJSONTyped,
} from "./WikidataPositionHolder";
import type { WikidataDateHolder } from "./WikidataDateHolder";
import {
  WikidataDateHolderFromJSON,
  WikidataDateHolderFromJSONTyped,
  WikidataDateHolderToJSON,
  WikidataDateHolderToJSONTyped,
} from "./WikidataDateHolder";
import type { WikidataLabelHolder } from "./WikidataLabelHolder";
import {
  WikidataLabelHolderFromJSON,
  WikidataLabelHolderFromJSONTyped,
  WikidataLabelHolderToJSON,
  WikidataLabelHolderToJSONTyped,
} from "./WikidataLabelHolder";

/**
 *
 * @export
 * @interface Person
 */
export interface Person {
  /**
   *
   * @type {string}
   * @memberof Person
   */
  wikidataId?: string | null;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  createdAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  updatedAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  name?: string | null;
  /**
   *
   * @type {WikidataLabelHolder}
   * @memberof Person
   */
  gender?: WikidataLabelHolder;
  /**
   *
   * @type {WikidataDateHolder}
   * @memberof Person
   */
  dateOfBirth?: WikidataDateHolder;
  /**
   *
   * @type {WikidataDateHolder}
   * @memberof Person
   */
  dateOfDeath?: WikidataDateHolder;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  description?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Person
   */
  aliases?: Array<string> | null;
  /**
   *
   * @type {Array<WikidataLabelHolder>}
   * @memberof Person
   */
  occupation?: Array<WikidataLabelHolder> | null;
  /**
   *
   * @type {Array<WikidataPositionHolder>}
   * @memberof Person
   */
  position?: Array<WikidataPositionHolder> | null;
  /**
   *
   * @type {Array<WikidataPoliticalPartyHolder>}
   * @memberof Person
   */
  politicalParty?: Array<WikidataPoliticalPartyHolder> | null;
  /**
   *
   * @type {ImageHolder}
   * @memberof Person
   */
  image?: ImageHolder;
  /**
   *
   * @type {string}
   * @memberof Person
   */
  _abstract?: string | null;
}

/**
 * Check if a given object implements the Person interface.
 */
export function instanceOfPerson(value: object): value is Person {
  return true;
}

export function PersonFromJSON(json: any): Person {
  return PersonFromJSONTyped(json, false);
}

export function PersonFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Person {
  if (json == null) {
    return json;
  }
  return {
    wikidataId: json["wikidataId"] == null ? undefined : json["wikidataId"],
    createdAt: json["createdAt"] == null ? undefined : json["createdAt"],
    updatedAt: json["updatedAt"] == null ? undefined : json["updatedAt"],
    name: json["name"] == null ? undefined : json["name"],
    gender:
      json["gender"] == null
        ? undefined
        : WikidataLabelHolderFromJSON(json["gender"]),
    dateOfBirth:
      json["dateOfBirth"] == null
        ? undefined
        : WikidataDateHolderFromJSON(json["dateOfBirth"]),
    dateOfDeath:
      json["dateOfDeath"] == null
        ? undefined
        : WikidataDateHolderFromJSON(json["dateOfDeath"]),
    description: json["description"] == null ? undefined : json["description"],
    aliases: json["aliases"] == null ? undefined : json["aliases"],
    occupation:
      json["occupation"] == null
        ? undefined
        : (json["occupation"] as Array<any>).map(WikidataLabelHolderFromJSON),
    position:
      json["position"] == null
        ? undefined
        : (json["position"] as Array<any>).map(WikidataPositionHolderFromJSON),
    politicalParty:
      json["politicalParty"] == null
        ? undefined
        : (json["politicalParty"] as Array<any>).map(
            WikidataPoliticalPartyHolderFromJSON,
          ),
    image:
      json["image"] == null ? undefined : ImageHolderFromJSON(json["image"]),
    _abstract: json["abstract"] == null ? undefined : json["abstract"],
  };
}

export function PersonToJSON(json: any): Person {
  return PersonToJSONTyped(json, false);
}

export function PersonToJSONTyped(
  value?: Person | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    wikidataId: value["wikidataId"],
    createdAt: value["createdAt"],
    updatedAt: value["updatedAt"],
    name: value["name"],
    gender: WikidataLabelHolderToJSON(value["gender"]),
    dateOfBirth: WikidataDateHolderToJSON(value["dateOfBirth"]),
    dateOfDeath: WikidataDateHolderToJSON(value["dateOfDeath"]),
    description: value["description"],
    aliases: value["aliases"],
    occupation:
      value["occupation"] == null
        ? undefined
        : (value["occupation"] as Array<any>).map(WikidataLabelHolderToJSON),
    position:
      value["position"] == null
        ? undefined
        : (value["position"] as Array<any>).map(WikidataPositionHolderToJSON),
    politicalParty:
      value["politicalParty"] == null
        ? undefined
        : (value["politicalParty"] as Array<any>).map(
            WikidataPoliticalPartyHolderToJSON,
          ),
    image: ImageHolderToJSON(value["image"]),
    abstract: value["_abstract"],
  };
}
