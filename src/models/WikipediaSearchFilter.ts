/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Complex filter structure for Wikipedia page searches that supports nested logical operations (AND, OR, NOT) and multiple filtering criteria.
 * @export
 * @interface WikipediaSearchFilter
 */
export interface WikipediaSearchFilter {
  /**
   * Filter by specific Perigon page identifiers. Accepts either a single ID or an array of IDs. Returns only pages matching these IDs.
   * @type {Array<string>}
   * @memberof WikipediaSearchFilter
   */
  pageId?: Array<string> | null;
  /**
   * Filter by specific section identifiers. Accepts either a single ID or an array of IDs. Returns only pages containing these sections.
   * @type {Array<string>}
   * @memberof WikipediaSearchFilter
   */
  sectionId?: Array<string> | null;
  /**
   * Filter by specific Wikipedia page identifiers. Accepts either a single ID or an array of IDs. Returns only pages matching these IDs.
   * @type {Array<number>}
   * @memberof WikipediaSearchFilter
   */
  wikiPageId?: Array<number> | null;
  /**
   * Filter by specific Perigon page revision identifiers. Accepts either a single ID or an array of IDs. Returns only pages matching these IDs.
   * @type {Array<number>}
   * @memberof WikipediaSearchFilter
   */
  wikiRevisionId?: Array<number> | null;
  /**
   * Filter by specific Wikipedia project codes. Returns only pages matching these projects.
   * @type {Array<string>}
   * @memberof WikipediaSearchFilter
   */
  wikiCode?: Array<string> | null;
  /**
   * Filter by specific Wikipedia namespaces. Returns only pages matching these namespaces.
   * @type {Array<number>}
   * @memberof WikipediaSearchFilter
   */
  wikiNamespace?: Array<number> | null;
  /**
   * Filter by specific Wikidata entity IDs. Returns only pages whose Wikidata entities match those ids.
   * @type {Array<string>}
   * @memberof WikipediaSearchFilter
   */
  wikidataId?: Array<string> | null;
  /**
   * Filter by specific Wikidata entity IDs. Returns only pages whose Wikidata entities are instances of provided ids.
   * @type {Array<string>}
   * @memberof WikipediaSearchFilter
   */
  wikidataInstanceOfId?: Array<string> | null;
  /**
   * Filter by specific Wikidata entity labels. Returns only pages whose Wikidata entities are instances of these labels.
   * @type {Array<string>}
   * @memberof WikipediaSearchFilter
   */
  wikidataInstanceOfLabel?: Array<string> | null;
  /**
   * Adds additional AND filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the AND logical operator.
   * @type {Array<WikipediaSearchFilter>}
   * @memberof WikipediaSearchFilter
   */
  aND?: Array<WikipediaSearchFilter> | null;
  /**
   * Adds additional OR filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the OR logical operator.
   * @type {Array<WikipediaSearchFilter>}
   * @memberof WikipediaSearchFilter
   */
  oR?: Array<WikipediaSearchFilter> | null;
  /**
   * A filter object for logical NOT operations
   * @type {Array<WikipediaSearchFilter>}
   * @memberof WikipediaSearchFilter
   */
  nOT?: Array<WikipediaSearchFilter> | null;
}

/**
 * Check if a given object implements the WikipediaSearchFilter interface.
 */
export function instanceOfWikipediaSearchFilter(
  value: object,
): value is WikipediaSearchFilter {
  return true;
}

export function WikipediaSearchFilterFromJSON(
  json: any,
): WikipediaSearchFilter {
  return WikipediaSearchFilterFromJSONTyped(json, false);
}

export function WikipediaSearchFilterFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): WikipediaSearchFilter {
  if (json == null) {
    return json;
  }
  return {
    pageId: json["pageId"] == null ? undefined : json["pageId"],
    sectionId: json["sectionId"] == null ? undefined : json["sectionId"],
    wikiPageId: json["wikiPageId"] == null ? undefined : json["wikiPageId"],
    wikiRevisionId:
      json["wikiRevisionId"] == null ? undefined : json["wikiRevisionId"],
    wikiCode: json["wikiCode"] == null ? undefined : json["wikiCode"],
    wikiNamespace:
      json["wikiNamespace"] == null ? undefined : json["wikiNamespace"],
    wikidataId: json["wikidataId"] == null ? undefined : json["wikidataId"],
    wikidataInstanceOfId:
      json["wikidataInstanceOfId"] == null
        ? undefined
        : json["wikidataInstanceOfId"],
    wikidataInstanceOfLabel:
      json["wikidataInstanceOfLabel"] == null
        ? undefined
        : json["wikidataInstanceOfLabel"],
    aND:
      json["AND"] == null
        ? undefined
        : (json["AND"] as Array<any>).map(WikipediaSearchFilterFromJSON),
    oR:
      json["OR"] == null
        ? undefined
        : (json["OR"] as Array<any>).map(WikipediaSearchFilterFromJSON),
    nOT:
      json["NOT"] == null
        ? undefined
        : (json["NOT"] as Array<any>).map(WikipediaSearchFilterFromJSON),
  };
}

export function WikipediaSearchFilterToJSON(json: any): WikipediaSearchFilter {
  return WikipediaSearchFilterToJSONTyped(json, false);
}

export function WikipediaSearchFilterToJSONTyped(
  value?: WikipediaSearchFilter | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    pageId: value["pageId"],
    sectionId: value["sectionId"],
    wikiPageId: value["wikiPageId"],
    wikiRevisionId: value["wikiRevisionId"],
    wikiCode: value["wikiCode"],
    wikiNamespace: value["wikiNamespace"],
    wikidataId: value["wikidataId"],
    wikidataInstanceOfId: value["wikidataInstanceOfId"],
    wikidataInstanceOfLabel: value["wikidataInstanceOfLabel"],
    AND:
      value["aND"] == null
        ? undefined
        : (value["aND"] as Array<any>).map(WikipediaSearchFilterToJSON),
    OR:
      value["oR"] == null
        ? undefined
        : (value["oR"] as Array<any>).map(WikipediaSearchFilterToJSON),
    NOT:
      value["nOT"] == null
        ? undefined
        : (value["nOT"] as Array<any>).map(WikipediaSearchFilterToJSON),
  };
}
