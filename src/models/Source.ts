/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SourceLocation } from "./SourceLocation";
import {
  SourceLocationFromJSON,
  SourceLocationFromJSONTyped,
  SourceLocationToJSON,
  SourceLocationToJSONTyped,
} from "./SourceLocation";
import type { ImageHolder } from "./ImageHolder";
import {
  ImageHolderFromJSON,
  ImageHolderFromJSONTyped,
  ImageHolderToJSON,
  ImageHolderToJSONTyped,
} from "./ImageHolder";
import type { SourceTopStatHolder } from "./SourceTopStatHolder";
import {
  SourceTopStatHolderFromJSON,
  SourceTopStatHolderFromJSONTyped,
  SourceTopStatHolderToJSON,
  SourceTopStatHolderToJSONTyped,
} from "./SourceTopStatHolder";

/**
 *
 * @export
 * @interface Source
 */
export interface Source {
  /**
   *
   * @type {string}
   * @memberof Source
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  domain?: string | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  primaryRecordId?: string | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  updatedAt?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Source
   */
  altNames?: Array<string> | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  description?: string | null;
  /**
   *
   * @type {number}
   * @memberof Source
   */
  avgMonthlyPosts?: number | null;
  /**
   *
   * @type {boolean}
   * @memberof Source
   */
  paywall?: boolean | null;
  /**
   *
   * @type {SourceLocation}
   * @memberof Source
   */
  location?: SourceLocation;
  /**
   *
   * @type {Array<SourceTopStatHolder>}
   * @memberof Source
   */
  topCategories?: Array<SourceTopStatHolder> | null;
  /**
   *
   * @type {Array<SourceTopStatHolder>}
   * @memberof Source
   */
  topTopics?: Array<SourceTopStatHolder> | null;
  /**
   *
   * @type {Array<SourceTopStatHolder>}
   * @memberof Source
   */
  topCountries?: Array<SourceTopStatHolder> | null;
  /**
   *
   * @type {Array<SourceTopStatHolder>}
   * @memberof Source
   */
  topLabels?: Array<SourceTopStatHolder> | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  avgBiasRating?: string | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  adFontesBiasRating?: string | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  allSidesBiasRating?: string | null;
  /**
   *
   * @type {string}
   * @memberof Source
   */
  mbfcBiasRating?: string | null;
  /**
   *
   * @type {number}
   * @memberof Source
   */
  monthlyVisits?: number | null;
  /**
   *
   * @type {number}
   * @memberof Source
   */
  globalRank?: number | null;
  /**
   *
   * @type {ImageHolder}
   * @memberof Source
   */
  logoLarge?: ImageHolder;
  /**
   *
   * @type {ImageHolder}
   * @memberof Source
   */
  logoFavIcon?: ImageHolder;
  /**
   *
   * @type {ImageHolder}
   * @memberof Source
   */
  logoSquare?: ImageHolder;
}

/**
 * Check if a given object implements the Source interface.
 */
export function instanceOfSource(value: object): value is Source {
  return true;
}

export function SourceFromJSON(json: any): Source {
  return SourceFromJSONTyped(json, false);
}

export function SourceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Source {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    domain: json["domain"] == null ? undefined : json["domain"],
    name: json["name"] == null ? undefined : json["name"],
    primaryRecordId:
      json["primaryRecordId"] == null ? undefined : json["primaryRecordId"],
    updatedAt: json["updatedAt"] == null ? undefined : json["updatedAt"],
    altNames: json["altNames"] == null ? undefined : json["altNames"],
    description: json["description"] == null ? undefined : json["description"],
    avgMonthlyPosts:
      json["avgMonthlyPosts"] == null ? undefined : json["avgMonthlyPosts"],
    paywall: json["paywall"] == null ? undefined : json["paywall"],
    location:
      json["location"] == null
        ? undefined
        : SourceLocationFromJSON(json["location"]),
    topCategories:
      json["topCategories"] == null
        ? undefined
        : (json["topCategories"] as Array<any>).map(
            SourceTopStatHolderFromJSON,
          ),
    topTopics:
      json["topTopics"] == null
        ? undefined
        : (json["topTopics"] as Array<any>).map(SourceTopStatHolderFromJSON),
    topCountries:
      json["topCountries"] == null
        ? undefined
        : (json["topCountries"] as Array<any>).map(SourceTopStatHolderFromJSON),
    topLabels:
      json["topLabels"] == null
        ? undefined
        : (json["topLabels"] as Array<any>).map(SourceTopStatHolderFromJSON),
    avgBiasRating:
      json["avgBiasRating"] == null ? undefined : json["avgBiasRating"],
    adFontesBiasRating:
      json["adFontesBiasRating"] == null
        ? undefined
        : json["adFontesBiasRating"],
    allSidesBiasRating:
      json["allSidesBiasRating"] == null
        ? undefined
        : json["allSidesBiasRating"],
    mbfcBiasRating:
      json["mbfcBiasRating"] == null ? undefined : json["mbfcBiasRating"],
    monthlyVisits:
      json["monthlyVisits"] == null ? undefined : json["monthlyVisits"],
    globalRank: json["globalRank"] == null ? undefined : json["globalRank"],
    logoLarge:
      json["logoLarge"] == null
        ? undefined
        : ImageHolderFromJSON(json["logoLarge"]),
    logoFavIcon:
      json["logoFavIcon"] == null
        ? undefined
        : ImageHolderFromJSON(json["logoFavIcon"]),
    logoSquare:
      json["logoSquare"] == null
        ? undefined
        : ImageHolderFromJSON(json["logoSquare"]),
  };
}

export function SourceToJSON(json: any): Source {
  return SourceToJSONTyped(json, false);
}

export function SourceToJSONTyped(
  value?: Source | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    domain: value["domain"],
    name: value["name"],
    primaryRecordId: value["primaryRecordId"],
    updatedAt: value["updatedAt"],
    altNames: value["altNames"],
    description: value["description"],
    avgMonthlyPosts: value["avgMonthlyPosts"],
    paywall: value["paywall"],
    location: SourceLocationToJSON(value["location"]),
    topCategories:
      value["topCategories"] == null
        ? undefined
        : (value["topCategories"] as Array<any>).map(SourceTopStatHolderToJSON),
    topTopics:
      value["topTopics"] == null
        ? undefined
        : (value["topTopics"] as Array<any>).map(SourceTopStatHolderToJSON),
    topCountries:
      value["topCountries"] == null
        ? undefined
        : (value["topCountries"] as Array<any>).map(SourceTopStatHolderToJSON),
    topLabels:
      value["topLabels"] == null
        ? undefined
        : (value["topLabels"] as Array<any>).map(SourceTopStatHolderToJSON),
    avgBiasRating: value["avgBiasRating"],
    adFontesBiasRating: value["adFontesBiasRating"],
    allSidesBiasRating: value["allSidesBiasRating"],
    mbfcBiasRating: value["mbfcBiasRating"],
    monthlyVisits: value["monthlyVisits"],
    globalRank: value["globalRank"],
    logoLarge: ImageHolderToJSON(value["logoLarge"]),
    logoFavIcon: ImageHolderToJSON(value["logoFavIcon"]),
    logoSquare: ImageHolderToJSON(value["logoSquare"]),
  };
}
