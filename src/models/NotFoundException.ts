/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { InternalErrorExceptionSuppressedInner } from "./InternalErrorExceptionSuppressedInner";
import {
  InternalErrorExceptionSuppressedInnerFromJSON,
  InternalErrorExceptionSuppressedInnerFromJSONTyped,
  InternalErrorExceptionSuppressedInnerToJSON,
  InternalErrorExceptionSuppressedInnerToJSONTyped,
} from "./InternalErrorExceptionSuppressedInner";
import type { InternalErrorExceptionCauseStackTraceInner } from "./InternalErrorExceptionCauseStackTraceInner";
import {
  InternalErrorExceptionCauseStackTraceInnerFromJSON,
  InternalErrorExceptionCauseStackTraceInnerFromJSONTyped,
  InternalErrorExceptionCauseStackTraceInnerToJSON,
  InternalErrorExceptionCauseStackTraceInnerToJSONTyped,
} from "./InternalErrorExceptionCauseStackTraceInner";
import type { InternalErrorExceptionCause } from "./InternalErrorExceptionCause";
import {
  InternalErrorExceptionCauseFromJSON,
  InternalErrorExceptionCauseFromJSONTyped,
  InternalErrorExceptionCauseToJSON,
  InternalErrorExceptionCauseToJSONTyped,
} from "./InternalErrorExceptionCause";

/**
 *
 * @export
 * @interface NotFoundException
 */
export interface NotFoundException {
  /**
   *
   * @type {InternalErrorExceptionCause}
   * @memberof NotFoundException
   */
  cause?: InternalErrorExceptionCause | null;
  /**
   *
   * @type {Array<InternalErrorExceptionCauseStackTraceInner>}
   * @memberof NotFoundException
   */
  stackTrace?: Array<InternalErrorExceptionCauseStackTraceInner> | null;
  /**
   *
   * @type {string}
   * @memberof NotFoundException
   */
  message?: string | null;
  /**
   *
   * @type {Array<InternalErrorExceptionSuppressedInner>}
   * @memberof NotFoundException
   */
  suppressed?: Array<InternalErrorExceptionSuppressedInner> | null;
  /**
   *
   * @type {string}
   * @memberof NotFoundException
   */
  localizedMessage?: string | null;
}

/**
 * Check if a given object implements the NotFoundException interface.
 */
export function instanceOfNotFoundException(
  value: object,
): value is NotFoundException {
  return true;
}

export function NotFoundExceptionFromJSON(json: any): NotFoundException {
  return NotFoundExceptionFromJSONTyped(json, false);
}

export function NotFoundExceptionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): NotFoundException {
  if (json == null) {
    return json;
  }
  return {
    cause:
      json["cause"] == null
        ? undefined
        : InternalErrorExceptionCauseFromJSON(json["cause"]),
    stackTrace:
      json["stackTrace"] == null
        ? undefined
        : (json["stackTrace"] as Array<any>).map(
            InternalErrorExceptionCauseStackTraceInnerFromJSON,
          ),
    message: json["message"] == null ? undefined : json["message"],
    suppressed:
      json["suppressed"] == null
        ? undefined
        : (json["suppressed"] as Array<any>).map(
            InternalErrorExceptionSuppressedInnerFromJSON,
          ),
    localizedMessage:
      json["localizedMessage"] == null ? undefined : json["localizedMessage"],
  };
}

export function NotFoundExceptionToJSON(json: any): NotFoundException {
  return NotFoundExceptionToJSONTyped(json, false);
}

export function NotFoundExceptionToJSONTyped(
  value?: NotFoundException | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    cause: InternalErrorExceptionCauseToJSON(value["cause"]),
    stackTrace:
      value["stackTrace"] == null
        ? undefined
        : (value["stackTrace"] as Array<any>).map(
            InternalErrorExceptionCauseStackTraceInnerToJSON,
          ),
    message: value["message"],
    suppressed:
      value["suppressed"] == null
        ? undefined
        : (value["suppressed"] as Array<any>).map(
            InternalErrorExceptionSuppressedInnerToJSON,
          ),
    localizedMessage: value["localizedMessage"],
  };
}
