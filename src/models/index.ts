/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { z } from "zod";

export const SortBySchema = z.enum([
  "createdAt",
  "updatedAt",
  "relevance",
  "count",
  "totalCount",
]);

export type SortBy = z.infer<typeof SortBySchema>;

export const SortBy = {
  CreatedAt: "createdAt",
  UpdatedAt: "updatedAt",
  Relevance: "relevance",
  Count: "count",
  TotalCount: "totalCount",
} as const;

export const AllEndpointSortBySchema = z.enum([
  "relevance",
  "date",
  "reverseDate",
  "reverseAddDate",
  "addDate",
  "pubDate",
  "refreshDate",
]);

export type AllEndpointSortBy = z.infer<typeof AllEndpointSortBySchema>;

export const AllEndpointSortBy = {
  Relevance: "relevance",
  Date: "date",
  ReverseDate: "reverseDate",
  ReverseAddDate: "reverseAddDate",
  AddDate: "addDate",
  PubDate: "pubDate",
  RefreshDate: "refreshDate",
} as const;

export const CategoryHolderSchema = z.object({
  name: z.string().optional(),
});

export type CategoryHolder = z.infer<typeof CategoryHolderSchema>;

export const CategoryWithScoreHolderSchema = z.object({
  name: z.string().optional(),
  score: z.number().optional(),
});

export type CategoryWithScoreHolder = z.infer<
  typeof CategoryWithScoreHolderSchema
>;

export const CompanyHolderSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  domains: z.array(z.string()).optional(),
  symbols: z.array(z.string()).optional(),
});

export type CompanyHolder = z.infer<typeof CompanyHolderSchema>;

export const EntityHolderSchema = z.object({
  data: z.string().optional(),
  type: z.string().optional(),
  mentions: z.number().optional(),
});

export type EntityHolder = z.infer<typeof EntityHolderSchema>;

export const EventTypeHolderSchema = z.object({
  name: z.string().optional(),
  type: z.string().optional(),
});

export type EventTypeHolder = z.infer<typeof EventTypeHolderSchema>;

export const IdNameHolderSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

export type IdNameHolder = z.infer<typeof IdNameHolderSchema>;

export const LocationHolderSchema = z.object({
  country: z.string().optional(),
  state: z.string().optional(),
  county: z.string().optional(),
  city: z.string().optional(),
  area: z.string().optional(),
});

export type LocationHolder = z.infer<typeof LocationHolderSchema>;

export const NameCountSchema = z.object({
  name: z.string().optional(),
  count: z.number().optional(),
});

export type NameCount = z.infer<typeof NameCountSchema>;

export const JournalistSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  fullName: z.string().optional(),
  headline: z.string().optional(),
  description: z.string().optional(),
  title: z.string().optional(),
  locations: z.array(LocationHolderSchema).optional(),
  updatedAt: z.string().optional(),
  topTopics: z.array(NameCountSchema).optional(),
  topSources: z.array(NameCountSchema).optional(),
  topCategories: z.array(NameCountSchema).optional(),
  topLabels: z.array(NameCountSchema).optional(),
  topCountries: z.array(NameCountSchema).optional(),
  avgMonthlyPosts: z.number().optional(),
  twitterHandle: z.string().optional(),
  twitterBio: z.string().optional(),
  imageUrl: z.string().optional(),
  linkedinUrl: z.string().optional(),
  linkedinConnections: z.number().optional(),
  linkedinFollowers: z.number().optional(),
  facebookUrl: z.string().optional(),
  instagramUrl: z.string().optional(),
  websiteUrl: z.string().optional(),
  blogUrl: z.string().optional(),
  tumblrUrl: z.string().optional(),
  youtubeUrl: z.string().optional(),
});

export type Journalist = z.infer<typeof JournalistSchema>;

export const KeywordHolderSchema = z.object({
  name: z.string().optional(),
  weight: z.number().optional(),
});

export type KeywordHolder = z.infer<typeof KeywordHolderSchema>;

export const LabelHolderSchema = z.object({
  name: z.string().optional(),
});

export type LabelHolder = z.infer<typeof LabelHolderSchema>;

export const CompanyCountSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  domains: z.array(z.string()).optional(),
  symbols: z.array(z.string()).optional(),
  count: z.number().optional(),
});

export type CompanyCount = z.infer<typeof CompanyCountSchema>;

export const KeyPointSchema = z.object({
  point: z.string().optional(),
  references: z.array(z.string()).optional(),
});

export type KeyPoint = z.infer<typeof KeyPointSchema>;

export const LocationCountSchema = z.object({
  state: z.string().optional(),
  county: z.string().optional(),
  city: z.string().optional(),
  area: z.string().optional(),
  count: z.number().optional(),
});

export type LocationCount = z.infer<typeof LocationCountSchema>;

export const PersonCountSchema = z.object({
  wikidataId: z.string().optional(),
  name: z.string().optional(),
  count: z.number().optional(),
});

export type PersonCount = z.infer<typeof PersonCountSchema>;

export const PersonHolderSchema = z.object({
  wikidataId: z.string().optional(),
  name: z.string().optional(),
});

export type PersonHolder = z.infer<typeof PersonHolderSchema>;

export const QuestionSchema = z.object({
  question: z.string().optional(),
  answer: z.string().optional(),
  references: z.array(z.string()).optional(),
});

export type Question = z.infer<typeof QuestionSchema>;

export const RecordStatHolderSchema = z.object({
  name: z.string().optional(),
  count: z.number().optional(),
});

export type RecordStatHolder = z.infer<typeof RecordStatHolderSchema>;

export const SentimentHolderSchema = z.object({
  positive: z.number().optional(),
  negative: z.number().optional(),
  neutral: z.number().optional(),
});

export type SentimentHolder = z.infer<typeof SentimentHolderSchema>;

export const CoordinateSchema = z.object({
  lat: z.number().optional(),
  lon: z.number().optional(),
});

export type Coordinate = z.infer<typeof CoordinateSchema>;

export const SourceLocationSchema = z.object({
  country: z.string().optional(),
  state: z.string().optional(),
  county: z.string().optional(),
  city: z.string().optional(),
  coordinates: CoordinateSchema.optional(),
});

export type SourceLocation = z.infer<typeof SourceLocationSchema>;

export const SourceHolderSchema = z.object({
  domain: z.string().optional(),
  paywall: z.boolean().optional(),
  location: SourceLocationSchema.optional(),
});

export type SourceHolder = z.infer<typeof SourceHolderSchema>;

export const TopicHolderSchema = z.object({
  name: z.string().optional(),
});

export type TopicHolder = z.infer<typeof TopicHolderSchema>;

export const NewsClusterSchema = z.object({
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  initializedAt: z.string().optional(),
  id: z.string().optional(),
  duplicateOf: z.string().optional(),
  slug: z.string().optional(),
  name: z.string().optional(),
  summary: z.string().optional(),
  shortSummary: z.string().optional(),
  summaryReferences: z.array(z.string()).optional(),
  imageSource: SourceHolderSchema.optional(),
  imageUrl: z.string().optional(),
  keyPoints: z.array(KeyPointSchema).optional(),
  questions: z.array(QuestionSchema).optional(),
  uniqueSources: z.array(z.string()).optional(),
  selectedArticles: z.array(z.lazy(() => ArticleSchema)).optional(),
  sentiment: SentimentHolderSchema.optional(),
  uniqueCount: z.number().optional(),
  reprintCount: z.number().optional(),
  totalCount: z.number().optional(),
  countries: z.array(RecordStatHolderSchema).optional(),
  topCountries: z.array(z.string()).optional(),
  topics: z.array(RecordStatHolderSchema).optional(),
  topTopics: z.array(TopicHolderSchema).optional(),
  categories: z.array(RecordStatHolderSchema).optional(),
  topCategories: z.array(CategoryHolderSchema).optional(),
  taxonomies: z.array(RecordStatHolderSchema).optional(),
  topTaxonomies: z.array(CategoryHolderSchema).optional(),
  people: z.array(PersonCountSchema).optional(),
  topPeople: z.array(PersonHolderSchema).optional(),
  companies: z.array(CompanyCountSchema).optional(),
  topCompanies: z.array(CompanyHolderSchema).optional(),
  locations: z.array(LocationCountSchema).optional(),
  topLocations: z.array(LocationHolderSchema).optional(),
  highlights: z.record(z.string(), z.array(z.string())).optional(),
});

export type NewsCluster = z.infer<typeof NewsClusterSchema>;

export const PlaceSchema = z.object({
  osmId: z.string().optional(),
  road: z.string().optional(),
  quarter: z.string().optional(),
  suburb: z.string().optional(),
  city: z.string().optional(),
  town: z.string().optional(),
  county: z.string().optional(),
  stateDistrict: z.string().optional(),
  state: z.string().optional(),
  postcode: z.string().optional(),
  country: z.string().optional(),
  countryCode: z.string().optional(),
  amenity: z.string().optional(),
  neighbourhood: z.string().optional(),
  coordinates: CoordinateSchema.optional(),
});

export type Place = z.infer<typeof PlaceSchema>;

export const ArticleSchema = z.object({
  url: z.string().optional(),
  authorsByline: z.string().optional(),
  articleId: z.string().optional(),
  clusterId: z.string().optional(),
  source: SourceHolderSchema.optional(),
  imageUrl: z.string().optional(),
  country: z.string().optional(),
  language: z.string().optional(),
  pubDate: z.string().optional(),
  addDate: z.string().optional(),
  refreshDate: z.string().optional(),
  score: z.number().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  content: z.string().optional(),
  medium: z.string().optional(),
  links: z.array(z.string()).optional(),
  labels: z.array(LabelHolderSchema).optional(),
  eventTypes: z.array(EventTypeHolderSchema).optional(),
  matchedAuthors: z.array(IdNameHolderSchema).optional(),
  claim: z.string().optional(),
  verdict: z.string().optional(),
  keywords: z.array(KeywordHolderSchema).optional(),
  topics: z.array(TopicHolderSchema).optional(),
  categories: z.array(CategoryHolderSchema).optional(),
  taxonomies: z.array(CategoryWithScoreHolderSchema).optional(),
  entities: z.array(EntityHolderSchema).optional(),
  companies: z.array(CompanyHolderSchema).optional(),
  sentiment: SentimentHolderSchema.optional(),
  summary: z.string().optional(),
  shortSummary: z.string().optional(),
  translation: z.string().optional(),
  translatedTitle: z.string().optional(),
  translatedDescription: z.string().optional(),
  translatedSummary: z.string().optional(),
  locations: z.array(LocationHolderSchema).optional(),
  reprint: z.boolean().optional(),
  reprintGroupId: z.string().optional(),
  places: z.array(PlaceSchema).optional(),
  people: z.array(PersonHolderSchema).optional(),
  cluster: NewsClusterSchema.optional(),
  journalists: z.array(JournalistSchema).optional(),
  highlights: z.record(z.string(), z.array(z.string())).optional(),
});

export type Article = z.infer<typeof ArticleSchema>;

export const CoordinateFilterSchema = z.object({
  lat: z.number().optional(),
  lon: z.number().optional(),
  radius: z.number().optional(),
});

export type CoordinateFilter = z.infer<typeof CoordinateFilterSchema>;

export const ArticleSearchFilterSchema = z.object({
  /**
   * Filter by specific article identifiers. Accepts either a single ID or an array of IDs. Returns only articles matching these IDs.
   */
  articleId: z.array(z.string()).optional(),
  /**
   * Filter by specific story identifiers. Accepts either a single ID or an array of IDs. Returns only articles belonging to these stories.
   */
  clusterId: z.array(z.string()).optional(),
  /**
   * Filter articles by specific publisher domains or subdomains. Accepts either a single domain or an array of domains. Multiple values create an OR filter.
   */
  source: z.array(z.string()).optional(),
  /**
   * Exclude articles from specific publisher domains or subdomains. Accepts either a single domain or an array of domains. Multiple values create an AND-exclude filter.
   */
  excludeSource: z.array(z.string()).optional(),
  /**
   * Filter articles using Perigon's curated publisher bundles (e.g., top100, top25tech). Accepts either a single source group or an array. Multiple values create an OR filter to include articles from any of the specified bundles.
   */
  sourceGroup: z.array(z.string()).optional(),
  /**
   * Filter articles by their language using ISO-639 two-letter codes in lowercase (e.g., en, es, fr). Accepts either a single language code or an array. Multiple values create an OR filter.
   */
  language: z.array(z.string()).optional(),
  /**
   * Exclude articles in specific languages using ISO-639 two-letter codes in lowercase. Accepts either a single language code or an array. Multiple values create an AND-exclude filter.
   */
  excludeLanguage: z.array(z.string()).optional(),
  /**
   * Filter articles by editorial labels such as Opinion, Paid-news, Non-news, Fact Check, or Press Release. View our docs for an exhaustive list of labels. Accepts either a single label or an array. Multiple values create an OR filter.
   */
  label: z.array(z.string()).optional(),
  /**
   * Exclude articles with specific editorial labels. Accepts either a single label or an array. Multiple values create an AND-exclude filter, removing all content with any of these labels.
   */
  excludeLabel: z.array(z.string()).optional(),
  /**
   * Filter by Google Content Categories. Must pass the full hierarchical path of the category. Accepts either a single path or an array. Example: taxonomy=/Finance/Banking/Other,/Finance/Investing/Funds. Multiple values create an OR filter.
   */
  taxonomy: z.array(z.string()).optional(),
  /**
   * Filter by broad content categories such as Politics, Tech, Sports, Business, or Finance. Accepts either a single category or an array. Use none to find uncategorized articles. Multiple values create an OR filter.
   */
  category: z.array(z.string()).optional(),
  /**
   * Filter by specific topics such as Markets, Crime, Cryptocurrency, or College Sports. Accepts either a single topic or an array. Topics are more granular than categories, and articles can have multiple topics. Multiple values create an OR filter.
   */
  topic: z.array(z.string()).optional(),
  /**
   * Exclude articles with specific topics. Accepts either a single topic or an array. Multiple values create an AND-exclude filter, removing all content with any of these topics.
   */
  excludeTopic: z.array(z.string()).optional(),
  /**
   * Filter articles by countries they mention using two-letter country codes in lowercase (e.g., us, gb, jp). Accepts either a single country code or an array. Multiple values create an OR filter. See documentation for supported country codes.
   */
  country: z.array(z.string()).optional(),
  /**
   * Exclude articles from specific countries using two-letter country codes in lowercase. Accepts either a single country code or an array. Multiple values create an AND-exclude filter. See documentation for supported country codes.
   */
  excludeCountry: z.array(z.string()).optional(),
  /**
   * Filter articles where specified countries play a central role in the content, not just mentioned. Uses two-letter country codes in lowercase. Accepts either a single country code or an array. Multiple values create an OR filter. See documentation for supported country codes.
   */
  locationsCountry: z.array(z.string()).optional(),
  /**
   * Exclude articles where specified countries play a central role in the content. Accepts either a single country code or an array. Multiple values create an AND-exclude filter, removing articles focused on any of these countries. See documentation for supported country codes.
   */
  excludeLocationsCountry: z.array(z.string()).optional(),
  /**
   * Filter articles where specified states play a central role in the content. Accepts either a single state code or an array. Multiple values create an OR filter. Uses two-letter state codes in lowercase. See documentation for supported state codes.
   */
  state: z.array(z.string()).optional(),
  /**
   * Exclude articles where specified states play a central role. Accepts either a single state code or an array. Multiple values create an AND-exclude filter, removing articles focused on any of these states. See documentation for supported state codes.
   */
  excludeState: z.array(z.string()).optional(),
  /**
   * Filter articles that mention or are related to specific counties. Accepts either a single county name or an array. Multiple values create an OR filter. County names typically include the word 'County' (e.g., Los Angeles County).
   */
  county: z.array(z.string()).optional(),
  /**
   * Exclude articles that mention or are related to specific counties. Accepts either a single county name or an array. Multiple values create an AND-exclude filter. County names should match the format in article metadata (e.g., Los Angeles County, Cook County).
   */
  excludeCounty: z.array(z.string()).optional(),
  /**
   * Filter articles that mention or are related to specific cities. Accepts either a single city name or an array. Multiple values create an OR filter.
   */
  city: z.array(z.string()).optional(),
  /**
   * Exclude articles that mention or are related to specific cities. Accepts either a single city name or an array. Multiple values create an AND-exclude filter.
   */
  excludeCity: z.array(z.string()).optional(),
  /**
   * Filter for articles from publishers based in specific countries. Accepts either a single country code or an array. Uses two-letter country codes in lowercase (e.g., us, gb). See documentation for supported country codes.
   */
  sourceCountry: z.array(z.string()).optional(),
  /**
   * Filter for articles from publishers based in specific states or regions. Accepts either a single state code or an array. Uses two-letter state codes in lowercase. See documentation for supported state codes.
   */
  sourceState: z.array(z.string()).optional(),
  /**
   * Filter for articles from publishers based in specific counties. Accepts either a single county name or an array. Multiple values create an OR filter.
   */
  sourceCounty: z.array(z.string()).optional(),
  /**
   * Filter for articles from publishers based in specific cities. Accepts either a single city name or an array. Multiple values create an OR filter.
   */
  sourceCity: z.array(z.string()).optional(),
  coordinates: CoordinateFilterSchema.optional(),
  sourceCoordinates: CoordinateFilterSchema.optional(),
  /**
   * Filter articles by company identifiers. Accepts either a single ID or an array. Multiple values create an OR filter. For a complete list of tracked companies and their IDs, refer to the /companies endpoint.
   */
  companyId: z.array(z.string()).optional(),
  /**
   * Exclude articles mentioning companies with specific identifiers. Accepts either a single ID or an array. Multiple values create an AND-exclude filter. For a complete list of tracked companies and their IDs, refer to the /companies endpoint.
   */
  excludeCompanyId: z.array(z.string()).optional(),
  /**
   * Filter articles by company domains (e.g., apple.com). Accepts either a single domain or an array. Multiple values create an OR filter. For a complete list of tracked companies and their domains, refer to the /companies endpoint.
   */
  companyDomain: z.array(z.string()).optional(),
  /**
   * Exclude articles related to companies with specific domains. Accepts either a single domain or an array. Multiple values create an AND-exclude filter. For a complete list of tracked companies and their domains, refer to the /companies endpoint.
   */
  excludeCompanyDomain: z.array(z.string()).optional(),
  /**
   * Filter articles by company stock symbols (e.g., AAPL, MSFT). Accepts either a single symbol or an array. Multiple values create an OR filter. For a complete list of tracked companies and their symbols, refer to the /companies endpoint.
   */
  companySymbol: z.array(z.string()).optional(),
  /**
   * Exclude articles related to companies with specific stock symbols. Accepts either a single symbol or an array. Multiple values create an AND-exclude filter. For a complete list of tracked companies and their symbols, refer to the /companies endpoint.
   */
  excludeCompanySymbol: z.array(z.string()).optional(),
  /**
   * Filter articles by company name mentions. Accepts either a single name or an array. Performs exact matching on company names. Multiple values create an OR filter. For a complete list of tracked companies and their names, refer to the /companies endpoint.
   */
  companyName: z.array(z.string()).optional(),
  /**
   * Filter articles by Wikidata IDs of mentioned people. Accepts either a single ID or an array. Multiple values create an OR filter. For a complete list of tracked individuals and their Wikidata IDs, refer to the /people endpoint.
   */
  personWikidataId: z.array(z.string()).optional(),
  /**
   * Exclude articles mentioning people with specific Wikidata IDs. Accepts either a single ID or an array. Multiple values create an AND-exclude filter. For a complete list of tracked individuals and their Wikidata IDs, refer to the /people endpoint.
   */
  excludePersonWikidataId: z.array(z.string()).optional(),
  /**
   * Filter articles by exact person name matches. Accepts either a single name or an array. Does not support Boolean operators or wildcards. Multiple values create an OR filter. For a complete list of tracked individuals and their names, refer to the /people endpoint.
   */
  personName: z.array(z.string()).optional(),
  /**
   * Exclude articles mentioning specific people by name. Accepts either a single name or an array. Multiple values create an AND-exclude filter. For a complete list of tracked individuals and their names, refer to the /people endpoint.
   */
  excludePersonName: z.array(z.string()).optional(),
  /**
   * Adds additional AND filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the AND logical operator.
   */
  AND: z.array(z.lazy(() => ArticleSearchFilterSchema)).optional(),
  /**
   * Adds additional OR filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the OR logical operator.
   */
  OR: z.array(z.lazy(() => ArticleSearchFilterSchema)).optional(),
  /**
   * A filter object for logical NOT operations
   */
  NOT: z.array(z.lazy(() => ArticleSearchFilterSchema)).optional(),
});

export type ArticleSearchFilter = z.infer<typeof ArticleSearchFilterSchema>;

export const ArticleSearchParamsSchema = z.object({
  /**
   * Natural language query to search the news articles database
   */
  prompt: z.string(),
  filter: ArticleSearchFilterSchema.optional(),
  /**
   * 'pubDateFrom' filter, will search articles published after the specified date, the date could be passed as ISO or 'yyyy-mm-dd'. Date time in ISO format, ie. 2024-01-01T00:00:00 - Default: Only articles with a pubDate within the last 30 days of the request
   */
  pubDateFrom: z.string().optional(),
  /**
   * 'pubDateFrom' filter, will search articles published before the specified date, the date could be passed as ISO or 'yyyy-mm-dd'. Date time in ISO format, ie. 2024-01-01T00:00:00
   */
  pubDateTo: z.string().optional(),
  /**
   * Whether to return reprints in the response or not. Reprints are usually wired articles from sources like AP or Reuters that are reprinted in multiple sources at the same time. By default, this parameter is 'true'.
   */
  showReprints: z.boolean().optional(),
  /**
   * The number of items per page.
   */
  size: z.number().optional(),
  /**
   * The page number to retrieve.
   */
  page: z.number().optional(),
});

export type ArticleSearchParams = z.infer<typeof ArticleSearchParamsSchema>;

export const ScoredDataArticleSchema = z.object({
  score: z.number().optional(),
  data: ArticleSchema.optional(),
});

export type ScoredDataArticle = z.infer<typeof ScoredDataArticleSchema>;

export const ArticlesVectorSearchResultSchema = z.object({
  status: z.number(),
  results: z.array(ScoredDataArticleSchema),
});

export type ArticlesVectorSearchResult = z.infer<
  typeof ArticlesVectorSearchResultSchema
>;

export const AuthExceptionCauseStackTraceInnerSchema = z.object({
  classLoaderName: z.string().optional(),
  moduleName: z.string().optional(),
  moduleVersion: z.string().optional(),
  methodName: z.string().optional(),
  fileName: z.string().optional(),
  lineNumber: z.number().optional(),
  nativeMethod: z.boolean().optional(),
  className: z.string().optional(),
});

export type AuthExceptionCauseStackTraceInner = z.infer<
  typeof AuthExceptionCauseStackTraceInnerSchema
>;

export const AuthExceptionCauseSchema = z.object({
  stackTrace: z.array(AuthExceptionCauseStackTraceInnerSchema).optional(),
  message: z.string().optional(),
  localizedMessage: z.string().optional(),
});

export type AuthExceptionCause = z.infer<typeof AuthExceptionCauseSchema>;

export const AuthExceptionSuppressedInnerSchema = z.object({
  stackTrace: z.array(AuthExceptionCauseStackTraceInnerSchema).optional(),
  message: z.string().optional(),
  localizedMessage: z.string().optional(),
});

export type AuthExceptionSuppressedInner = z.infer<
  typeof AuthExceptionSuppressedInnerSchema
>;

export const AuthExceptionSchema = z.object({
  cause: AuthExceptionCauseSchema.optional(),
  stackTrace: z.array(AuthExceptionCauseStackTraceInnerSchema).optional(),
  statusCode: z
    .enum([
      "100 CONTINUE",
      "101 SWITCHING_PROTOCOLS",
      "102 PROCESSING",
      "103 CHECKPOINT",
      "200 OK",
      "201 CREATED",
      "202 ACCEPTED",
      "203 NON_AUTHORITATIVE_INFORMATION",
      "204 NO_CONTENT",
      "205 RESET_CONTENT",
      "206 PARTIAL_CONTENT",
      "207 MULTI_STATUS",
      "208 ALREADY_REPORTED",
      "226 IM_USED",
      "300 MULTIPLE_CHOICES",
      "301 MOVED_PERMANENTLY",
      "302 FOUND",
      "302 MOVED_TEMPORARILY",
      "303 SEE_OTHER",
      "304 NOT_MODIFIED",
      "305 USE_PROXY",
      "307 TEMPORARY_REDIRECT",
      "308 PERMANENT_REDIRECT",
      "400 BAD_REQUEST",
      "401 UNAUTHORIZED",
      "402 PAYMENT_REQUIRED",
      "403 FORBIDDEN",
      "404 NOT_FOUND",
      "405 METHOD_NOT_ALLOWED",
      "406 NOT_ACCEPTABLE",
      "407 PROXY_AUTHENTICATION_REQUIRED",
      "408 REQUEST_TIMEOUT",
      "409 CONFLICT",
      "410 GONE",
      "411 LENGTH_REQUIRED",
      "412 PRECONDITION_FAILED",
      "413 PAYLOAD_TOO_LARGE",
      "413 REQUEST_ENTITY_TOO_LARGE",
      "414 URI_TOO_LONG",
      "414 REQUEST_URI_TOO_LONG",
      "415 UNSUPPORTED_MEDIA_TYPE",
      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
      "417 EXPECTATION_FAILED",
      "418 I_AM_A_TEAPOT",
      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
      "420 METHOD_FAILURE",
      "421 DESTINATION_LOCKED",
      "422 UNPROCESSABLE_ENTITY",
      "423 LOCKED",
      "424 FAILED_DEPENDENCY",
      "425 TOO_EARLY",
      "426 UPGRADE_REQUIRED",
      "428 PRECONDITION_REQUIRED",
      "429 TOO_MANY_REQUESTS",
      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
      "500 INTERNAL_SERVER_ERROR",
      "501 NOT_IMPLEMENTED",
      "502 BAD_GATEWAY",
      "503 SERVICE_UNAVAILABLE",
      "504 GATEWAY_TIMEOUT",
      "505 HTTP_VERSION_NOT_SUPPORTED",
      "506 VARIANT_ALSO_NEGOTIATES",
      "507 INSUFFICIENT_STORAGE",
      "508 LOOP_DETECTED",
      "509 BANDWIDTH_LIMIT_EXCEEDED",
      "510 NOT_EXTENDED",
      "511 NETWORK_AUTHENTICATION_REQUIRED",
    ])
    .optional(),
  message: z.string().optional(),
  suppressed: z.array(AuthExceptionSuppressedInnerSchema).optional(),
  localizedMessage: z.string().optional(),
});

export type AuthException = z.infer<typeof AuthExceptionSchema>;

export const SymbolHolderSchema = z.object({
  symbol: z.string().optional(),
  exchange: z.string().optional(),
  exchangeShortName: z.string().optional(),
  ipoDate: z.string().optional(),
});

export type SymbolHolder = z.infer<typeof SymbolHolderSchema>;

export const WebResourcesSchema = z.object({
  careers: z.string().optional(),
  about: z.string().optional(),
  blog: z.string().optional(),
  events: z.string().optional(),
  sitemap: z.string().optional(),
  updates: z.string().optional(),
  linkedin: z.string().optional(),
  facebook: z.string().optional(),
  instagram: z.string().optional(),
  medium: z.string().optional(),
  reddit: z.string().optional(),
  threads: z.string().optional(),
  tiktok: z.string().optional(),
  x: z.string().optional(),
  wellfound: z.string().optional(),
  youtube: z.string().optional(),
  wikipedia: z.string().optional(),
});

export type WebResources = z.infer<typeof WebResourcesSchema>;

export const CompanySchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  updatedAt: z.string().optional(),
  primaryRecordId: z.string().optional(),
  altNames: z.array(z.string()).optional(),
  domains: z.array(z.string()).optional(),
  monthlyVisits: z.number().optional(),
  globalRank: z.number().optional(),
  description: z.string().optional(),
  ceo: z.string().optional(),
  industry: z.string().optional(),
  sector: z.string().optional(),
  country: z.string().optional(),
  fullTimeEmployees: z.number().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
  logo: z.string().optional(),
  favicon: z.string().optional(),
  isEtf: z.boolean().optional(),
  isActivelyTrading: z.boolean().optional(),
  isFund: z.boolean().optional(),
  isAdr: z.boolean().optional(),
  symbols: z.array(SymbolHolderSchema).optional(),
  naics: z.string().optional(),
  sic: z.string().optional(),
  yearFounded: z.number().optional(),
  revenue: z.string().optional(),
  webResources: WebResourcesSchema.optional(),
});

export type Company = z.infer<typeof CompanySchema>;

export const CompanySearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  results: z.array(CompanySchema),
});

export type CompanySearchResult = z.infer<typeof CompanySearchResultSchema>;

export const IllegalParameterExceptionSchema = z.object({
  cause: AuthExceptionCauseSchema.optional(),
  stackTrace: z.array(AuthExceptionCauseStackTraceInnerSchema).optional(),
  message: z.string().optional(),
  suppressed: z.array(AuthExceptionSuppressedInnerSchema).optional(),
  localizedMessage: z.string().optional(),
});

export type IllegalParameterException = z.infer<
  typeof IllegalParameterExceptionSchema
>;

export const ImageHolderSchema = z.object({
  url: z.string().optional(),
});

export type ImageHolder = z.infer<typeof ImageHolderSchema>;

export const InternalErrorExceptionSchema = z.object({
  cause: AuthExceptionCauseSchema.optional(),
  stackTrace: z.array(AuthExceptionCauseStackTraceInnerSchema).optional(),
  message: z.string().optional(),
  suppressed: z.array(AuthExceptionSuppressedInnerSchema).optional(),
  localizedMessage: z.string().optional(),
});

export type InternalErrorException = z.infer<
  typeof InternalErrorExceptionSchema
>;

export const JournalistSearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  results: z.array(JournalistSchema),
});

export type JournalistSearchResult = z.infer<
  typeof JournalistSearchResultSchema
>;

export const NotFoundExceptionSchema = z.object({
  cause: AuthExceptionCauseSchema.optional(),
  stackTrace: z.array(AuthExceptionCauseStackTraceInnerSchema).optional(),
  message: z.string().optional(),
  suppressed: z.array(AuthExceptionSuppressedInnerSchema).optional(),
  localizedMessage: z.string().optional(),
});

export type NotFoundException = z.infer<typeof NotFoundExceptionSchema>;

export const WikidataDateHolderSchema = z.object({
  time: z.string().optional(),
  precision: z.string().optional(),
});

export type WikidataDateHolder = z.infer<typeof WikidataDateHolderSchema>;

export const WikidataLabelHolderSchema = z.object({
  wikidataId: z.string().optional(),
  label: z.string().optional(),
});

export type WikidataLabelHolder = z.infer<typeof WikidataLabelHolderSchema>;

export const WikidataPoliticalPartyHolderSchema = z.object({
  wikidataId: z.string().optional(),
  label: z.string().optional(),
  startTime: WikidataDateHolderSchema.optional(),
  endTime: WikidataDateHolderSchema.optional(),
});

export type WikidataPoliticalPartyHolder = z.infer<
  typeof WikidataPoliticalPartyHolderSchema
>;

export const WikidataPositionHolderSchema = z.object({
  wikidataId: z.string().optional(),
  label: z.string().optional(),
  startTime: WikidataDateHolderSchema.optional(),
  endTime: WikidataDateHolderSchema.optional(),
  employer: WikidataLabelHolderSchema.optional(),
});

export type WikidataPositionHolder = z.infer<
  typeof WikidataPositionHolderSchema
>;

export const PersonSchema = z.object({
  wikidataId: z.string().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  name: z.string().optional(),
  gender: WikidataLabelHolderSchema.optional(),
  dateOfBirth: WikidataDateHolderSchema.optional(),
  dateOfDeath: WikidataDateHolderSchema.optional(),
  description: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  occupation: z.array(WikidataLabelHolderSchema).optional(),
  position: z.array(WikidataPositionHolderSchema).optional(),
  politicalParty: z.array(WikidataPoliticalPartyHolderSchema).optional(),
  image: ImageHolderSchema.optional(),
  _abstract: z.string().optional(),
});

export type Person = z.infer<typeof PersonSchema>;

export const PeopleSearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  results: z.array(PersonSchema),
});

export type PeopleSearchResult = z.infer<typeof PeopleSearchResultSchema>;

export const QuerySearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  articles: z.array(ArticleSchema),
});

export type QuerySearchResult = z.infer<typeof QuerySearchResultSchema>;

export const WikiDataSchema = z.object({
  pageId: z.string().optional(),
  sectionId: z.string().optional(),
  wikiPageId: z.number().optional(),
  wikiRevisionId: z.number().optional(),
  wikiRevisionTs: z.string().optional(),
  wikiCode: z.string().optional(),
  wikiNamespace: z.number().optional(),
  wikiTitle: z.string().optional(),
  wikidataId: z.string().optional(),
  wikidataInstanceOf: z.array(WikidataLabelHolderSchema).optional(),
  redirectTitles: z.array(z.string()).optional(),
  pageviews: z.number().optional(),
  title: z.string().optional(),
  styleLevel: z.number().optional(),
  content: z.string().optional(),
});

export type WikiData = z.infer<typeof WikiDataSchema>;

export const ScoredDataWikiDataSchema = z.object({
  score: z.number().optional(),
  data: WikiDataSchema.optional(),
});

export type ScoredDataWikiData = z.infer<typeof ScoredDataWikiDataSchema>;

export const SourceTopStatHolderSchema = z.object({
  name: z.string().optional(),
  count: z.number().optional(),
});

export type SourceTopStatHolder = z.infer<typeof SourceTopStatHolderSchema>;

export const SourceSchema = z.object({
  id: z.string().optional(),
  domain: z.string().optional(),
  name: z.string().optional(),
  primaryRecordId: z.string().optional(),
  updatedAt: z.string().optional(),
  altNames: z.array(z.string()).optional(),
  description: z.string().optional(),
  avgMonthlyPosts: z.number().optional(),
  paywall: z.boolean().optional(),
  location: SourceLocationSchema.optional(),
  topCategories: z.array(SourceTopStatHolderSchema).optional(),
  topTopics: z.array(SourceTopStatHolderSchema).optional(),
  topCountries: z.array(SourceTopStatHolderSchema).optional(),
  topLabels: z.array(SourceTopStatHolderSchema).optional(),
  avgBiasRating: z.string().optional(),
  adFontesBiasRating: z.string().optional(),
  allSidesBiasRating: z.string().optional(),
  mbfcBiasRating: z.string().optional(),
  monthlyVisits: z.number().optional(),
  globalRank: z.number().optional(),
  logoLarge: ImageHolderSchema.optional(),
  logoFavIcon: ImageHolderSchema.optional(),
  logoSquare: ImageHolderSchema.optional(),
});

export type Source = z.infer<typeof SourceSchema>;

export const SourceSearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  results: z.array(SourceSchema),
});

export type SourceSearchResult = z.infer<typeof SourceSearchResultSchema>;

export const StorySearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  results: z.array(NewsClusterSchema),
});

export type StorySearchResult = z.infer<typeof StorySearchResultSchema>;

export const SummaryBodySchema = z.object({
  /**
   * Instructions guiding how the summary should be written. Maximum length: 2 048 characters.
   */
  prompt: z.string().optional(),
  /**
   * The maximum number of articles to factor into the summary.
   */
  maxArticleCount: z.number().optional(),
  /**
   * The maximum number of articles that should be returned in the response. This can be used to return fewer than maxArticleCount results.
   */
  returnedArticleCount: z.number().optional(),
  /**
   * Which article fields to include when generating the summary. Up to three values from TITLE, CONTENT, SUMMARY.
   */
  summarizeFields: z.enum(["TITLE", "CONTENT", "SUMMARY"]).optional(),
  /**
   * Method for selecting articles: ARTICLES (include all matches) or CLUSTERS (one per cluster).
   */
  method: z.enum(["ARTICLES", "CLUSTERS"]).optional(),
  /**
   * The underlying LLM model to use for generation.
   */
  model: z
    .enum([
      "gpt-4o",
      "gpt-4o-mini",
      "gpt-4.1",
      "gpt-4.1-mini",
      "gpt-4.1-nano",
      "llama-3.3-70b-versatile",
      "deepseek-r1-distill-llama-70b",
    ])
    .optional(),
  /**
   * Sampling temperature for the LLM (0.0 = deterministic to 2.0 = very creative).
   */
  temperature: z.number().optional(),
  /**
   * Nucleus sampling (top-p) for the LLM (0.0 to 1.0).
   */
  topP: z.number().optional(),
  /**
   * Maximum number of tokens to generate in the summary.
   */
  maxTokens: z.number().optional(),
});

export type SummaryBody = z.infer<typeof SummaryBodySchema>;

export const SummarySearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  summary: z.string(),
  results: z.array(ArticleSchema),
});

export type SummarySearchResult = z.infer<typeof SummarySearchResultSchema>;

export const TooManyRequestsExceptionSchema = z.object({
  cause: AuthExceptionCauseSchema.optional(),
  stackTrace: z.array(AuthExceptionCauseStackTraceInnerSchema).optional(),
  status: z
    .enum([
      "100 CONTINUE",
      "101 SWITCHING_PROTOCOLS",
      "102 PROCESSING",
      "103 CHECKPOINT",
      "200 OK",
      "201 CREATED",
      "202 ACCEPTED",
      "203 NON_AUTHORITATIVE_INFORMATION",
      "204 NO_CONTENT",
      "205 RESET_CONTENT",
      "206 PARTIAL_CONTENT",
      "207 MULTI_STATUS",
      "208 ALREADY_REPORTED",
      "226 IM_USED",
      "300 MULTIPLE_CHOICES",
      "301 MOVED_PERMANENTLY",
      "302 FOUND",
      "302 MOVED_TEMPORARILY",
      "303 SEE_OTHER",
      "304 NOT_MODIFIED",
      "305 USE_PROXY",
      "307 TEMPORARY_REDIRECT",
      "308 PERMANENT_REDIRECT",
      "400 BAD_REQUEST",
      "401 UNAUTHORIZED",
      "402 PAYMENT_REQUIRED",
      "403 FORBIDDEN",
      "404 NOT_FOUND",
      "405 METHOD_NOT_ALLOWED",
      "406 NOT_ACCEPTABLE",
      "407 PROXY_AUTHENTICATION_REQUIRED",
      "408 REQUEST_TIMEOUT",
      "409 CONFLICT",
      "410 GONE",
      "411 LENGTH_REQUIRED",
      "412 PRECONDITION_FAILED",
      "413 PAYLOAD_TOO_LARGE",
      "413 REQUEST_ENTITY_TOO_LARGE",
      "414 URI_TOO_LONG",
      "414 REQUEST_URI_TOO_LONG",
      "415 UNSUPPORTED_MEDIA_TYPE",
      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
      "417 EXPECTATION_FAILED",
      "418 I_AM_A_TEAPOT",
      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
      "420 METHOD_FAILURE",
      "421 DESTINATION_LOCKED",
      "422 UNPROCESSABLE_ENTITY",
      "423 LOCKED",
      "424 FAILED_DEPENDENCY",
      "425 TOO_EARLY",
      "426 UPGRADE_REQUIRED",
      "428 PRECONDITION_REQUIRED",
      "429 TOO_MANY_REQUESTS",
      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
      "500 INTERNAL_SERVER_ERROR",
      "501 NOT_IMPLEMENTED",
      "502 BAD_GATEWAY",
      "503 SERVICE_UNAVAILABLE",
      "504 GATEWAY_TIMEOUT",
      "505 HTTP_VERSION_NOT_SUPPORTED",
      "506 VARIANT_ALSO_NEGOTIATES",
      "507 INSUFFICIENT_STORAGE",
      "508 LOOP_DETECTED",
      "509 BANDWIDTH_LIMIT_EXCEEDED",
      "510 NOT_EXTENDED",
      "511 NETWORK_AUTHENTICATION_REQUIRED",
    ])
    .optional(),
  message: z.string().optional(),
  suppressed: z.array(AuthExceptionSuppressedInnerSchema).optional(),
  localizedMessage: z.string().optional(),
});

export type TooManyRequestsException = z.infer<
  typeof TooManyRequestsExceptionSchema
>;

export const TopicLabelsSchema = z.object({
  category: z.string().optional(),
  subcategory: z.string().optional(),
});

export type TopicLabels = z.infer<typeof TopicLabelsSchema>;

export const TopicDtoSchema = z.object({
  id: z.number().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
  name: z.string().optional(),
  labels: TopicLabelsSchema.optional(),
});

export type TopicDto = z.infer<typeof TopicDtoSchema>;

export const TopicSearchResultSchema = z.object({
  total: z.number(),
  data: z.array(TopicDtoSchema),
});

export type TopicSearchResult = z.infer<typeof TopicSearchResultSchema>;

export const WikiPageSectionHolderSchema = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  styleLevel: z.number().optional(),
  loc: z.array(z.number()).optional(),
  textRaw: z.string().optional(),
  textRich: z.string().optional(),
});

export type WikiPageSectionHolder = z.infer<typeof WikiPageSectionHolderSchema>;

export const WikiPageSchema = z.object({
  id: z.string().optional(),
  scrapedAt: z.string().optional(),
  wikiPageId: z.number().optional(),
  wikiRevisionId: z.number().optional(),
  wikiRevisionTs: z.string().optional(),
  wikiCode: z.string().optional(),
  wikiNamespace: z.number().optional(),
  wikiTitle: z.string().optional(),
  url: z.string().optional(),
  topImage: z.string().optional(),
  wikidataId: z.string().optional(),
  wikidataInstanceOf: z.array(WikidataLabelHolderSchema).optional(),
  redirectTitles: z.array(z.string()).optional(),
  summary: z.string().optional(),
  sections: z.array(WikiPageSectionHolderSchema).optional(),
  categories: z.array(z.string()).optional(),
  externalLinks: z.array(z.string()).optional(),
  references: z.array(z.string()).optional(),
  pageviews: z.number().optional(),
});

export type WikiPage = z.infer<typeof WikiPageSchema>;

export const WikipediaSearchFilterSchema = z.object({
  /**
   * Filter by specific Perigon page identifiers. Accepts either a single ID or an array of IDs. Returns only pages matching these IDs.
   */
  pageId: z.array(z.string()).optional(),
  /**
   * Filter by specific section identifiers. Accepts either a single ID or an array of IDs. Returns only pages containing these sections.
   */
  sectionId: z.array(z.string()).optional(),
  /**
   * Filter by specific Wikipedia page identifiers. Accepts either a single ID or an array of IDs. Returns only pages matching these IDs.
   */
  wikiPageId: z.array(z.number()).optional(),
  /**
   * Filter by specific Perigon page revision identifiers. Accepts either a single ID or an array of IDs. Returns only pages matching these IDs.
   */
  wikiRevisionId: z.array(z.number()).optional(),
  /**
   * Filter by specific Wikipedia project codes. Returns only pages matching these projects.
   */
  wikiCode: z.array(z.string()).optional(),
  /**
   * Filter by specific Wikipedia namespaces. Returns only pages matching these namespaces.
   */
  wikiNamespace: z.array(z.number()).optional(),
  /**
   * Filter by specific Wikidata entity IDs. Returns only pages whose Wikidata entities match those ids.
   */
  wikidataId: z.array(z.string()).optional(),
  /**
   * Filter by specific Wikidata entity IDs. Returns only pages whose Wikidata entities are instances of provided ids.
   */
  wikidataInstanceOfId: z.array(z.string()).optional(),
  /**
   * Filter by specific Wikidata entity labels. Returns only pages whose Wikidata entities are instances of these labels.
   */
  wikidataInstanceOfLabel: z.array(z.string()).optional(),
  /**
   * Adds additional AND filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the AND logical operator.
   */
  AND: z.array(z.lazy(() => WikipediaSearchFilterSchema)).optional(),
  /**
   * Adds additional OR filter objects. These objects must be of the same type as the original filter object and will be combined with the existing filter using the OR logical operator.
   */
  OR: z.array(z.lazy(() => WikipediaSearchFilterSchema)).optional(),
  /**
   * A filter object for logical NOT operations
   */
  NOT: z.array(z.lazy(() => WikipediaSearchFilterSchema)).optional(),
});

export type WikipediaSearchFilter = z.infer<typeof WikipediaSearchFilterSchema>;

export const WikipediaSearchParamsSchema = z.object({
  /**
   * Natural language query to search the Wikipedia pages database
   */
  prompt: z.string(),
  filter: WikipediaSearchFilterSchema.optional(),
  /**
   * 'wikiRevisionFrom' filter, will search pages modified after the specified date, the date could be passed as ISO or 'yyyy-mm-dd'. Date time in ISO format, ie. 2024-01-01T00:00:00.
   */
  wikiRevisionFrom: z.string().optional(),
  /**
   * 'wikiRevisionFrom' filter, will search pages modified before the specified date, the date could be passed as ISO or 'yyyy-mm-dd'. Date time in ISO format, ie. 2024-01-01T00:00:00.
   */
  wikiRevisionTo: z.string().optional(),
  /**
   * 'pageviewsFrom' filter, will search pages with at least the provided number of views per day.
   */
  pageviewsFrom: z.number().optional(),
  /**
   * 'pageviewsFrom' filter, will search pages with at most the provided number of views per day.
   */
  pageviewsTo: z.number().optional(),
  /**
   * The number of items per page.
   */
  size: z.number().optional(),
  /**
   * The page number to retrieve.
   */
  page: z.number().optional(),
});

export type WikipediaSearchParams = z.infer<typeof WikipediaSearchParamsSchema>;

export const WikipediaSearchResultSchema = z.object({
  status: z.number(),
  numResults: z.number(),
  results: z.array(WikiPageSchema),
});

export type WikipediaSearchResult = z.infer<typeof WikipediaSearchResultSchema>;

export const WikipediaVectorSearchResultSchema = z.object({
  status: z.number(),
  results: z.array(ScoredDataWikiDataSchema),
});

export type WikipediaVectorSearchResult = z.infer<
  typeof WikipediaVectorSearchResultSchema
>;
