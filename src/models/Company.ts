/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SymbolHolder } from "./SymbolHolder";
import {
  SymbolHolderFromJSON,
  SymbolHolderFromJSONTyped,
  SymbolHolderToJSON,
  SymbolHolderToJSONTyped,
} from "./SymbolHolder";
import type { WebResources } from "./WebResources";
import {
  WebResourcesFromJSON,
  WebResourcesFromJSONTyped,
  WebResourcesToJSON,
  WebResourcesToJSONTyped,
} from "./WebResources";

/**
 *
 * @export
 * @interface Company
 */
export interface Company {
  /**
   *
   * @type {string}
   * @memberof Company
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  updatedAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  primaryRecordId?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Company
   */
  altNames?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof Company
   */
  domains?: Array<string> | null;
  /**
   *
   * @type {number}
   * @memberof Company
   */
  monthlyVisits?: number | null;
  /**
   *
   * @type {number}
   * @memberof Company
   */
  globalRank?: number | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  ceo?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  industry?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  sector?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  country?: string | null;
  /**
   *
   * @type {number}
   * @memberof Company
   */
  fullTimeEmployees?: number | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  address?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  city?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  state?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  zip?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  logo?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  favicon?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  isEtf?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  isActivelyTrading?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  isFund?: boolean | null;
  /**
   *
   * @type {boolean}
   * @memberof Company
   */
  isAdr?: boolean | null;
  /**
   *
   * @type {Array<SymbolHolder>}
   * @memberof Company
   */
  symbols?: Array<SymbolHolder> | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  naics?: string | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  sic?: string | null;
  /**
   *
   * @type {number}
   * @memberof Company
   */
  yearFounded?: number | null;
  /**
   *
   * @type {string}
   * @memberof Company
   */
  revenue?: string | null;
  /**
   *
   * @type {WebResources}
   * @memberof Company
   */
  webResources?: WebResources;
}

/**
 * Check if a given object implements the Company interface.
 */
export function instanceOfCompany(value: object): value is Company {
  return true;
}

export function CompanyFromJSON(json: any): Company {
  return CompanyFromJSONTyped(json, false);
}

export function CompanyFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Company {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    name: json["name"] == null ? undefined : json["name"],
    updatedAt: json["updatedAt"] == null ? undefined : json["updatedAt"],
    primaryRecordId:
      json["primaryRecordId"] == null ? undefined : json["primaryRecordId"],
    altNames: json["altNames"] == null ? undefined : json["altNames"],
    domains: json["domains"] == null ? undefined : json["domains"],
    monthlyVisits:
      json["monthlyVisits"] == null ? undefined : json["monthlyVisits"],
    globalRank: json["globalRank"] == null ? undefined : json["globalRank"],
    description: json["description"] == null ? undefined : json["description"],
    ceo: json["ceo"] == null ? undefined : json["ceo"],
    industry: json["industry"] == null ? undefined : json["industry"],
    sector: json["sector"] == null ? undefined : json["sector"],
    country: json["country"] == null ? undefined : json["country"],
    fullTimeEmployees:
      json["fullTimeEmployees"] == null ? undefined : json["fullTimeEmployees"],
    address: json["address"] == null ? undefined : json["address"],
    city: json["city"] == null ? undefined : json["city"],
    state: json["state"] == null ? undefined : json["state"],
    zip: json["zip"] == null ? undefined : json["zip"],
    logo: json["logo"] == null ? undefined : json["logo"],
    favicon: json["favicon"] == null ? undefined : json["favicon"],
    isEtf: json["isEtf"] == null ? undefined : json["isEtf"],
    isActivelyTrading:
      json["isActivelyTrading"] == null ? undefined : json["isActivelyTrading"],
    isFund: json["isFund"] == null ? undefined : json["isFund"],
    isAdr: json["isAdr"] == null ? undefined : json["isAdr"],
    symbols:
      json["symbols"] == null
        ? undefined
        : (json["symbols"] as Array<any>).map(SymbolHolderFromJSON),
    naics: json["naics"] == null ? undefined : json["naics"],
    sic: json["sic"] == null ? undefined : json["sic"],
    yearFounded: json["yearFounded"] == null ? undefined : json["yearFounded"],
    revenue: json["revenue"] == null ? undefined : json["revenue"],
    webResources:
      json["webResources"] == null
        ? undefined
        : WebResourcesFromJSON(json["webResources"]),
  };
}

export function CompanyToJSON(json: any): Company {
  return CompanyToJSONTyped(json, false);
}

export function CompanyToJSONTyped(
  value?: Company | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    name: value["name"],
    updatedAt: value["updatedAt"],
    primaryRecordId: value["primaryRecordId"],
    altNames: value["altNames"],
    domains: value["domains"],
    monthlyVisits: value["monthlyVisits"],
    globalRank: value["globalRank"],
    description: value["description"],
    ceo: value["ceo"],
    industry: value["industry"],
    sector: value["sector"],
    country: value["country"],
    fullTimeEmployees: value["fullTimeEmployees"],
    address: value["address"],
    city: value["city"],
    state: value["state"],
    zip: value["zip"],
    logo: value["logo"],
    favicon: value["favicon"],
    isEtf: value["isEtf"],
    isActivelyTrading: value["isActivelyTrading"],
    isFund: value["isFund"],
    isAdr: value["isAdr"],
    symbols:
      value["symbols"] == null
        ? undefined
        : (value["symbols"] as Array<any>).map(SymbolHolderToJSON),
    naics: value["naics"],
    sic: value["sic"],
    yearFounded: value["yearFounded"],
    revenue: value["revenue"],
    webResources: WebResourcesToJSON(value["webResources"]),
  };
}
