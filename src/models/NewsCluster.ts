/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { RecordStatHolder } from "./RecordStatHolder";
import {
  RecordStatHolderFromJSON,
  RecordStatHolderFromJSONTyped,
  RecordStatHolderToJSON,
  RecordStatHolderToJSONTyped,
} from "./RecordStatHolder";
import type { PersonCount } from "./PersonCount";
import {
  PersonCountFromJSON,
  PersonCountFromJSONTyped,
  PersonCountToJSON,
  PersonCountToJSONTyped,
} from "./PersonCount";
import type { LocationCount } from "./LocationCount";
import {
  LocationCountFromJSON,
  LocationCountFromJSONTyped,
  LocationCountToJSON,
  LocationCountToJSONTyped,
} from "./LocationCount";
import type { SourceHolder } from "./SourceHolder";
import {
  SourceHolderFromJSON,
  SourceHolderFromJSONTyped,
  SourceHolderToJSON,
  SourceHolderToJSONTyped,
} from "./SourceHolder";
import type { Article } from "./Article";
import {
  ArticleFromJSON,
  ArticleFromJSONTyped,
  ArticleToJSON,
  ArticleToJSONTyped,
} from "./Article";
import type { CompanyCount } from "./CompanyCount";
import {
  CompanyCountFromJSON,
  CompanyCountFromJSONTyped,
  CompanyCountToJSON,
  CompanyCountToJSONTyped,
} from "./CompanyCount";
import type { CompanyHolder } from "./CompanyHolder";
import {
  CompanyHolderFromJSON,
  CompanyHolderFromJSONTyped,
  CompanyHolderToJSON,
  CompanyHolderToJSONTyped,
} from "./CompanyHolder";
import type { CategoryHolder } from "./CategoryHolder";
import {
  CategoryHolderFromJSON,
  CategoryHolderFromJSONTyped,
  CategoryHolderToJSON,
  CategoryHolderToJSONTyped,
} from "./CategoryHolder";
import type { PersonHolder } from "./PersonHolder";
import {
  PersonHolderFromJSON,
  PersonHolderFromJSONTyped,
  PersonHolderToJSON,
  PersonHolderToJSONTyped,
} from "./PersonHolder";
import type { KeyPoint } from "./KeyPoint";
import {
  KeyPointFromJSON,
  KeyPointFromJSONTyped,
  KeyPointToJSON,
  KeyPointToJSONTyped,
} from "./KeyPoint";
import type { LocationHolder } from "./LocationHolder";
import {
  LocationHolderFromJSON,
  LocationHolderFromJSONTyped,
  LocationHolderToJSON,
  LocationHolderToJSONTyped,
} from "./LocationHolder";
import type { TopicHolder } from "./TopicHolder";
import {
  TopicHolderFromJSON,
  TopicHolderFromJSONTyped,
  TopicHolderToJSON,
  TopicHolderToJSONTyped,
} from "./TopicHolder";
import type { Question } from "./Question";
import {
  QuestionFromJSON,
  QuestionFromJSONTyped,
  QuestionToJSON,
  QuestionToJSONTyped,
} from "./Question";
import type { SentimentHolder } from "./SentimentHolder";
import {
  SentimentHolderFromJSON,
  SentimentHolderFromJSONTyped,
  SentimentHolderToJSON,
  SentimentHolderToJSONTyped,
} from "./SentimentHolder";

/**
 *
 * @export
 * @interface NewsCluster
 */
export interface NewsCluster {
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  createdAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  updatedAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  initializedAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  duplicateOf?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  slug?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  summary?: string | null;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  shortSummary?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof NewsCluster
   */
  summaryReferences?: Array<string> | null;
  /**
   *
   * @type {SourceHolder}
   * @memberof NewsCluster
   */
  imageSource?: SourceHolder;
  /**
   *
   * @type {string}
   * @memberof NewsCluster
   */
  imageUrl?: string | null;
  /**
   *
   * @type {Array<KeyPoint>}
   * @memberof NewsCluster
   */
  keyPoints?: Array<KeyPoint> | null;
  /**
   *
   * @type {Array<Question>}
   * @memberof NewsCluster
   */
  questions?: Array<Question> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof NewsCluster
   */
  uniqueSources?: Array<string> | null;
  /**
   *
   * @type {Array<Article>}
   * @memberof NewsCluster
   */
  selectedArticles?: Array<Article> | null;
  /**
   *
   * @type {SentimentHolder}
   * @memberof NewsCluster
   */
  sentiment?: SentimentHolder;
  /**
   *
   * @type {number}
   * @memberof NewsCluster
   */
  uniqueCount?: number | null;
  /**
   *
   * @type {number}
   * @memberof NewsCluster
   */
  reprintCount?: number | null;
  /**
   *
   * @type {number}
   * @memberof NewsCluster
   */
  totalCount?: number | null;
  /**
   *
   * @type {Array<RecordStatHolder>}
   * @memberof NewsCluster
   */
  countries?: Array<RecordStatHolder> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof NewsCluster
   */
  topCountries?: Array<string> | null;
  /**
   *
   * @type {Array<RecordStatHolder>}
   * @memberof NewsCluster
   */
  topics?: Array<RecordStatHolder> | null;
  /**
   *
   * @type {Array<TopicHolder>}
   * @memberof NewsCluster
   */
  topTopics?: Array<TopicHolder> | null;
  /**
   *
   * @type {Array<RecordStatHolder>}
   * @memberof NewsCluster
   */
  categories?: Array<RecordStatHolder> | null;
  /**
   *
   * @type {Array<CategoryHolder>}
   * @memberof NewsCluster
   */
  topCategories?: Array<CategoryHolder> | null;
  /**
   *
   * @type {Array<RecordStatHolder>}
   * @memberof NewsCluster
   */
  taxonomies?: Array<RecordStatHolder> | null;
  /**
   *
   * @type {Array<CategoryHolder>}
   * @memberof NewsCluster
   */
  topTaxonomies?: Array<CategoryHolder> | null;
  /**
   *
   * @type {Array<PersonCount>}
   * @memberof NewsCluster
   */
  people?: Array<PersonCount> | null;
  /**
   *
   * @type {Array<PersonHolder>}
   * @memberof NewsCluster
   */
  topPeople?: Array<PersonHolder> | null;
  /**
   *
   * @type {Array<CompanyCount>}
   * @memberof NewsCluster
   */
  companies?: Array<CompanyCount> | null;
  /**
   *
   * @type {Array<CompanyHolder>}
   * @memberof NewsCluster
   */
  topCompanies?: Array<CompanyHolder> | null;
  /**
   *
   * @type {Array<LocationCount>}
   * @memberof NewsCluster
   */
  locations?: Array<LocationCount> | null;
  /**
   *
   * @type {Array<LocationHolder>}
   * @memberof NewsCluster
   */
  topLocations?: Array<LocationHolder> | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof NewsCluster
   */
  highlights?: { [key: string]: Array<string> } | null;
}

/**
 * Check if a given object implements the NewsCluster interface.
 */
export function instanceOfNewsCluster(value: object): value is NewsCluster {
  return true;
}

export function NewsClusterFromJSON(json: any): NewsCluster {
  return NewsClusterFromJSONTyped(json, false);
}

export function NewsClusterFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): NewsCluster {
  if (json == null) {
    return json;
  }
  return {
    createdAt: json["createdAt"] == null ? undefined : json["createdAt"],
    updatedAt: json["updatedAt"] == null ? undefined : json["updatedAt"],
    initializedAt:
      json["initializedAt"] == null ? undefined : json["initializedAt"],
    id: json["id"] == null ? undefined : json["id"],
    duplicateOf: json["duplicateOf"] == null ? undefined : json["duplicateOf"],
    slug: json["slug"] == null ? undefined : json["slug"],
    name: json["name"] == null ? undefined : json["name"],
    summary: json["summary"] == null ? undefined : json["summary"],
    shortSummary:
      json["shortSummary"] == null ? undefined : json["shortSummary"],
    summaryReferences:
      json["summaryReferences"] == null ? undefined : json["summaryReferences"],
    imageSource:
      json["imageSource"] == null
        ? undefined
        : SourceHolderFromJSON(json["imageSource"]),
    imageUrl: json["imageUrl"] == null ? undefined : json["imageUrl"],
    keyPoints:
      json["keyPoints"] == null
        ? undefined
        : (json["keyPoints"] as Array<any>).map(KeyPointFromJSON),
    questions:
      json["questions"] == null
        ? undefined
        : (json["questions"] as Array<any>).map(QuestionFromJSON),
    uniqueSources:
      json["uniqueSources"] == null ? undefined : json["uniqueSources"],
    selectedArticles:
      json["selectedArticles"] == null
        ? undefined
        : (json["selectedArticles"] as Array<any>).map(ArticleFromJSON),
    sentiment:
      json["sentiment"] == null
        ? undefined
        : SentimentHolderFromJSON(json["sentiment"]),
    uniqueCount: json["uniqueCount"] == null ? undefined : json["uniqueCount"],
    reprintCount:
      json["reprintCount"] == null ? undefined : json["reprintCount"],
    totalCount: json["totalCount"] == null ? undefined : json["totalCount"],
    countries:
      json["countries"] == null
        ? undefined
        : (json["countries"] as Array<any>).map(RecordStatHolderFromJSON),
    topCountries:
      json["topCountries"] == null ? undefined : json["topCountries"],
    topics:
      json["topics"] == null
        ? undefined
        : (json["topics"] as Array<any>).map(RecordStatHolderFromJSON),
    topTopics:
      json["topTopics"] == null
        ? undefined
        : (json["topTopics"] as Array<any>).map(TopicHolderFromJSON),
    categories:
      json["categories"] == null
        ? undefined
        : (json["categories"] as Array<any>).map(RecordStatHolderFromJSON),
    topCategories:
      json["topCategories"] == null
        ? undefined
        : (json["topCategories"] as Array<any>).map(CategoryHolderFromJSON),
    taxonomies:
      json["taxonomies"] == null
        ? undefined
        : (json["taxonomies"] as Array<any>).map(RecordStatHolderFromJSON),
    topTaxonomies:
      json["topTaxonomies"] == null
        ? undefined
        : (json["topTaxonomies"] as Array<any>).map(CategoryHolderFromJSON),
    people:
      json["people"] == null
        ? undefined
        : (json["people"] as Array<any>).map(PersonCountFromJSON),
    topPeople:
      json["topPeople"] == null
        ? undefined
        : (json["topPeople"] as Array<any>).map(PersonHolderFromJSON),
    companies:
      json["companies"] == null
        ? undefined
        : (json["companies"] as Array<any>).map(CompanyCountFromJSON),
    topCompanies:
      json["topCompanies"] == null
        ? undefined
        : (json["topCompanies"] as Array<any>).map(CompanyHolderFromJSON),
    locations:
      json["locations"] == null
        ? undefined
        : (json["locations"] as Array<any>).map(LocationCountFromJSON),
    topLocations:
      json["topLocations"] == null
        ? undefined
        : (json["topLocations"] as Array<any>).map(LocationHolderFromJSON),
    highlights: json["highlights"] == null ? undefined : json["highlights"],
  };
}

export function NewsClusterToJSON(json: any): NewsCluster {
  return NewsClusterToJSONTyped(json, false);
}

export function NewsClusterToJSONTyped(
  value?: NewsCluster | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    createdAt: value["createdAt"],
    updatedAt: value["updatedAt"],
    initializedAt: value["initializedAt"],
    id: value["id"],
    duplicateOf: value["duplicateOf"],
    slug: value["slug"],
    name: value["name"],
    summary: value["summary"],
    shortSummary: value["shortSummary"],
    summaryReferences: value["summaryReferences"],
    imageSource: SourceHolderToJSON(value["imageSource"]),
    imageUrl: value["imageUrl"],
    keyPoints:
      value["keyPoints"] == null
        ? undefined
        : (value["keyPoints"] as Array<any>).map(KeyPointToJSON),
    questions:
      value["questions"] == null
        ? undefined
        : (value["questions"] as Array<any>).map(QuestionToJSON),
    uniqueSources: value["uniqueSources"],
    selectedArticles:
      value["selectedArticles"] == null
        ? undefined
        : (value["selectedArticles"] as Array<any>).map(ArticleToJSON),
    sentiment: SentimentHolderToJSON(value["sentiment"]),
    uniqueCount: value["uniqueCount"],
    reprintCount: value["reprintCount"],
    totalCount: value["totalCount"],
    countries:
      value["countries"] == null
        ? undefined
        : (value["countries"] as Array<any>).map(RecordStatHolderToJSON),
    topCountries: value["topCountries"],
    topics:
      value["topics"] == null
        ? undefined
        : (value["topics"] as Array<any>).map(RecordStatHolderToJSON),
    topTopics:
      value["topTopics"] == null
        ? undefined
        : (value["topTopics"] as Array<any>).map(TopicHolderToJSON),
    categories:
      value["categories"] == null
        ? undefined
        : (value["categories"] as Array<any>).map(RecordStatHolderToJSON),
    topCategories:
      value["topCategories"] == null
        ? undefined
        : (value["topCategories"] as Array<any>).map(CategoryHolderToJSON),
    taxonomies:
      value["taxonomies"] == null
        ? undefined
        : (value["taxonomies"] as Array<any>).map(RecordStatHolderToJSON),
    topTaxonomies:
      value["topTaxonomies"] == null
        ? undefined
        : (value["topTaxonomies"] as Array<any>).map(CategoryHolderToJSON),
    people:
      value["people"] == null
        ? undefined
        : (value["people"] as Array<any>).map(PersonCountToJSON),
    topPeople:
      value["topPeople"] == null
        ? undefined
        : (value["topPeople"] as Array<any>).map(PersonHolderToJSON),
    companies:
      value["companies"] == null
        ? undefined
        : (value["companies"] as Array<any>).map(CompanyCountToJSON),
    topCompanies:
      value["topCompanies"] == null
        ? undefined
        : (value["topCompanies"] as Array<any>).map(CompanyHolderToJSON),
    locations:
      value["locations"] == null
        ? undefined
        : (value["locations"] as Array<any>).map(LocationCountToJSON),
    topLocations:
      value["topLocations"] == null
        ? undefined
        : (value["topLocations"] as Array<any>).map(LocationHolderToJSON),
    highlights: value["highlights"],
  };
}
