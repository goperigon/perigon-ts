/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { WikiPageSectionHolder } from "./WikiPageSectionHolder";
import {
  WikiPageSectionHolderFromJSON,
  WikiPageSectionHolderFromJSONTyped,
  WikiPageSectionHolderToJSON,
  WikiPageSectionHolderToJSONTyped,
} from "./WikiPageSectionHolder";
import type { WikidataLabelHolder } from "./WikidataLabelHolder";
import {
  WikidataLabelHolderFromJSON,
  WikidataLabelHolderFromJSONTyped,
  WikidataLabelHolderToJSON,
  WikidataLabelHolderToJSONTyped,
} from "./WikidataLabelHolder";

/**
 *
 * @export
 * @interface WikiPage
 */
export interface WikiPage {
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  scrapedAt?: string | null;
  /**
   *
   * @type {number}
   * @memberof WikiPage
   */
  wikiPageId?: number | null;
  /**
   *
   * @type {number}
   * @memberof WikiPage
   */
  wikiRevisionId?: number | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  wikiRevisionTs?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  wikiCode?: string | null;
  /**
   *
   * @type {number}
   * @memberof WikiPage
   */
  wikiNamespace?: number | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  wikiTitle?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  url?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  topImage?: string | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  wikidataId?: string | null;
  /**
   *
   * @type {Array<WikidataLabelHolder>}
   * @memberof WikiPage
   */
  wikidataInstanceOf?: Array<WikidataLabelHolder> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof WikiPage
   */
  redirectTitles?: Array<string> | null;
  /**
   *
   * @type {string}
   * @memberof WikiPage
   */
  summary?: string | null;
  /**
   *
   * @type {Array<WikiPageSectionHolder>}
   * @memberof WikiPage
   */
  sections?: Array<WikiPageSectionHolder> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof WikiPage
   */
  categories?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof WikiPage
   */
  externalLinks?: Array<string> | null;
  /**
   *
   * @type {Array<string>}
   * @memberof WikiPage
   */
  references?: Array<string> | null;
  /**
   *
   * @type {number}
   * @memberof WikiPage
   */
  pageviews?: number | null;
}

/**
 * Check if a given object implements the WikiPage interface.
 */
export function instanceOfWikiPage(value: object): value is WikiPage {
  return true;
}

export function WikiPageFromJSON(json: any): WikiPage {
  return WikiPageFromJSONTyped(json, false);
}

export function WikiPageFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): WikiPage {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"] == null ? undefined : json["id"],
    scrapedAt: json["scrapedAt"] == null ? undefined : json["scrapedAt"],
    wikiPageId: json["wikiPageId"] == null ? undefined : json["wikiPageId"],
    wikiRevisionId:
      json["wikiRevisionId"] == null ? undefined : json["wikiRevisionId"],
    wikiRevisionTs:
      json["wikiRevisionTs"] == null ? undefined : json["wikiRevisionTs"],
    wikiCode: json["wikiCode"] == null ? undefined : json["wikiCode"],
    wikiNamespace:
      json["wikiNamespace"] == null ? undefined : json["wikiNamespace"],
    wikiTitle: json["wikiTitle"] == null ? undefined : json["wikiTitle"],
    url: json["url"] == null ? undefined : json["url"],
    topImage: json["topImage"] == null ? undefined : json["topImage"],
    wikidataId: json["wikidataId"] == null ? undefined : json["wikidataId"],
    wikidataInstanceOf:
      json["wikidataInstanceOf"] == null
        ? undefined
        : (json["wikidataInstanceOf"] as Array<any>).map(
            WikidataLabelHolderFromJSON,
          ),
    redirectTitles:
      json["redirectTitles"] == null ? undefined : json["redirectTitles"],
    summary: json["summary"] == null ? undefined : json["summary"],
    sections:
      json["sections"] == null
        ? undefined
        : (json["sections"] as Array<any>).map(WikiPageSectionHolderFromJSON),
    categories: json["categories"] == null ? undefined : json["categories"],
    externalLinks:
      json["externalLinks"] == null ? undefined : json["externalLinks"],
    references: json["references"] == null ? undefined : json["references"],
    pageviews: json["pageviews"] == null ? undefined : json["pageviews"],
  };
}

export function WikiPageToJSON(json: any): WikiPage {
  return WikiPageToJSONTyped(json, false);
}

export function WikiPageToJSONTyped(
  value?: WikiPage | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    scrapedAt: value["scrapedAt"],
    wikiPageId: value["wikiPageId"],
    wikiRevisionId: value["wikiRevisionId"],
    wikiRevisionTs: value["wikiRevisionTs"],
    wikiCode: value["wikiCode"],
    wikiNamespace: value["wikiNamespace"],
    wikiTitle: value["wikiTitle"],
    url: value["url"],
    topImage: value["topImage"],
    wikidataId: value["wikidataId"],
    wikidataInstanceOf:
      value["wikidataInstanceOf"] == null
        ? undefined
        : (value["wikidataInstanceOf"] as Array<any>).map(
            WikidataLabelHolderToJSON,
          ),
    redirectTitles: value["redirectTitles"],
    summary: value["summary"],
    sections:
      value["sections"] == null
        ? undefined
        : (value["sections"] as Array<any>).map(WikiPageSectionHolderToJSON),
    categories: value["categories"],
    externalLinks: value["externalLinks"],
    references: value["references"],
    pageviews: value["pageviews"],
  };
}
