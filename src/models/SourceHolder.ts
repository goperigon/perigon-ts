/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { SourceLocation } from "./SourceLocation";
import {
  SourceLocationFromJSON,
  SourceLocationFromJSONTyped,
  SourceLocationToJSON,
  SourceLocationToJSONTyped,
} from "./SourceLocation";

/**
 *
 * @export
 * @interface SourceHolder
 */
export interface SourceHolder {
  /**
   *
   * @type {string}
   * @memberof SourceHolder
   */
  domain?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof SourceHolder
   */
  paywall?: boolean | null;
  /**
   *
   * @type {SourceLocation}
   * @memberof SourceHolder
   */
  location?: SourceLocation;
}

/**
 * Check if a given object implements the SourceHolder interface.
 */
export function instanceOfSourceHolder(value: object): value is SourceHolder {
  return true;
}

export function SourceHolderFromJSON(json: any): SourceHolder {
  return SourceHolderFromJSONTyped(json, false);
}

export function SourceHolderFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SourceHolder {
  if (json == null) {
    return json;
  }
  return {
    domain: json["domain"] == null ? undefined : json["domain"],
    paywall: json["paywall"] == null ? undefined : json["paywall"],
    location:
      json["location"] == null
        ? undefined
        : SourceLocationFromJSON(json["location"]),
  };
}

export function SourceHolderToJSON(json: any): SourceHolder {
  return SourceHolderToJSONTyped(json, false);
}

export function SourceHolderToJSONTyped(
  value?: SourceHolder | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    domain: value["domain"],
    paywall: value["paywall"],
    location: SourceLocationToJSON(value["location"]),
  };
}
