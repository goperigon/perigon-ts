/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AllEndpointSortBy,
  ArticleSearchParams,
  AuthException,
  CompanySearchResult,
  IllegalParameterException,
  InternalErrorException,
  Journalist,
  JournalistSearchResult,
  NotFoundException,
  PeopleSearchResult,
  QuerySearchResult,
  SortBy,
  SourceSearchResult,
  StorySearchResult,
  SummaryBody,
  SummarySearchResult,
  TooManyRequestsException,
  TopicSearchResult,
  VectorSearchResult,
} from "../models/index";
import {
  AllEndpointSortByFromJSON,
  AllEndpointSortByToJSON,
  ArticleSearchParamsFromJSON,
  ArticleSearchParamsToJSON,
  AuthExceptionFromJSON,
  AuthExceptionToJSON,
  CompanySearchResultFromJSON,
  CompanySearchResultToJSON,
  IllegalParameterExceptionFromJSON,
  IllegalParameterExceptionToJSON,
  InternalErrorExceptionFromJSON,
  InternalErrorExceptionToJSON,
  JournalistFromJSON,
  JournalistToJSON,
  JournalistSearchResultFromJSON,
  JournalistSearchResultToJSON,
  NotFoundExceptionFromJSON,
  NotFoundExceptionToJSON,
  PeopleSearchResultFromJSON,
  PeopleSearchResultToJSON,
  QuerySearchResultFromJSON,
  QuerySearchResultToJSON,
  SortByFromJSON,
  SortByToJSON,
  SourceSearchResultFromJSON,
  SourceSearchResultToJSON,
  StorySearchResultFromJSON,
  StorySearchResultToJSON,
  SummaryBodyFromJSON,
  SummaryBodyToJSON,
  SummarySearchResultFromJSON,
  SummarySearchResultToJSON,
  TooManyRequestsExceptionFromJSON,
  TooManyRequestsExceptionToJSON,
  TopicSearchResultFromJSON,
  TopicSearchResultToJSON,
  VectorSearchResultFromJSON,
  VectorSearchResultToJSON,
} from "../models/index";

export interface GetJournalistByIdRequest {
  id: string;
}

export interface SearchArticlesRequest {
  q?: string;
  title?: string;
  desc?: string;
  content?: string;
  url?: string;
  articleId?: Array<string>;
  clusterId?: Array<string>;
  sortBy?: AllEndpointSortBy;
  page?: number;
  size?: number;
  from?: Date;
  to?: Date;
  addDateFrom?: Date;
  addDateTo?: Date;
  refreshDateFrom?: Date;
  refreshDateTo?: Date;
  medium?: Array<string>;
  source?: Array<string>;
  sourceGroup?: Array<string>;
  excludeSourceGroup?: Array<string>;
  excludeSource?: Array<string>;
  paywall?: boolean;
  byline?: Array<string>;
  author?: Array<string>;
  excludeAuthor?: Array<string>;
  journalistId?: Array<string>;
  excludeJournalistId?: Array<string>;
  language?: Array<string>;
  excludeLanguage?: Array<string>;
  searchTranslation?: boolean;
  label?: Array<string>;
  excludeLabel?: Array<string>;
  category?: Array<string>;
  excludeCategory?: Array<string>;
  topic?: Array<string>;
  excludeTopic?: Array<string>;
  linkTo?: string;
  showReprints?: boolean;
  reprintGroupId?: string;
  city?: Array<string>;
  excludeCity?: Array<string>;
  area?: Array<string>;
  state?: Array<string>;
  excludeState?: Array<string>;
  county?: Array<string>;
  excludeCounty?: Array<string>;
  locationsCountry?: Array<string>;
  country?: Array<string>;
  excludeLocationsCountry?: Array<string>;
  location?: Array<string>;
  lat?: number;
  lon?: number;
  maxDistance?: number;
  sourceCity?: Array<string>;
  sourceCounty?: Array<string>;
  sourceCountry?: Array<string>;
  sourceState?: Array<string>;
  sourceLat?: number;
  sourceLon?: number;
  sourceMaxDistance?: number;
  personWikidataId?: Array<string>;
  excludePersonWikidataId?: Array<string>;
  personName?: Array<string>;
  excludePersonName?: Array<string>;
  companyId?: Array<string>;
  excludeCompanyId?: Array<string>;
  companyName?: string;
  companyDomain?: Array<string>;
  excludeCompanyDomain?: Array<string>;
  companySymbol?: Array<string>;
  excludeCompanySymbol?: Array<string>;
  showNumResults?: boolean;
  positiveSentimentFrom?: number;
  positiveSentimentTo?: number;
  neutralSentimentFrom?: number;
  neutralSentimentTo?: number;
  negativeSentimentFrom?: number;
  negativeSentimentTo?: number;
  taxonomy?: Array<string>;
  prefixTaxonomy?: string;
}

export interface SearchCompaniesRequest {
  id?: Array<string>;
  symbol?: Array<string>;
  domain?: Array<string>;
  country?: Array<string>;
  exchange?: Array<string>;
  numEmployeesFrom?: number;
  numEmployeesTo?: number;
  ipoFrom?: Date;
  ipoTo?: Date;
  q?: string;
  name?: string;
  industry?: string;
  sector?: string;
  size?: number;
  page?: number;
}

export interface SearchJournalists1Request {
  id?: Array<string>;
  q?: string;
  name?: string;
  twitter?: string;
  size?: number;
  page?: number;
  source?: Array<string>;
  topic?: Array<string>;
  category?: Array<string>;
  label?: Array<string>;
  minMonthlyPosts?: number;
  maxMonthlyPosts?: number;
  country?: Array<string>;
  updatedAtFrom?: Date;
  updatedAtTo?: Date;
  showNumResults?: boolean;
}

export interface SearchPeopleRequest {
  name?: string;
  wikidataId?: Array<string>;
  occupationId?: Array<string>;
  occupationLabel?: string;
  page?: number;
  size?: number;
}

export interface SearchSourcesRequest {
  domain?: Array<string>;
  name?: string;
  sourceGroup?: string;
  sortBy?: SortBy;
  page?: number;
  size?: number;
  minMonthlyVisits?: number;
  maxMonthlyVisits?: number;
  minMonthlyPosts?: number;
  maxMonthlyPosts?: number;
  country?: Array<string>;
  sourceCountry?: Array<string>;
  sourceState?: Array<string>;
  sourceCounty?: Array<string>;
  sourceCity?: Array<string>;
  sourceLat?: number;
  sourceLon?: number;
  sourceMaxDistance?: number;
  category?: Array<string>;
  topic?: Array<string>;
  label?: Array<string>;
  paywall?: boolean;
  showSubdomains?: boolean;
  showNumResults?: boolean;
}

export interface SearchStoriesRequest {
  q?: string;
  name?: string;
  clusterId?: Array<string>;
  sortBy?: SortBy;
  page?: number;
  size?: number;
  from?: Date;
  to?: Date;
  topic?: Array<string>;
  category?: Array<string>;
  taxonomy?: Array<string>;
  source?: Array<string>;
  sourceGroup?: Array<string>;
  minUniqueSources?: number;
  personWikidataId?: Array<string>;
  personName?: string;
  companyId?: Array<string>;
  companyName?: string;
  companyDomain?: Array<string>;
  companySymbol?: Array<string>;
  country?: Array<string>;
  state?: Array<string>;
  city?: Array<string>;
  area?: Array<string>;
  minClusterSize?: number;
  maxClusterSize?: number;
  nameExists?: boolean;
  positiveSentimentFrom?: number;
  positiveSentimentTo?: number;
  neutralSentimentFrom?: number;
  neutralSentimentTo?: number;
  negativeSentimentFrom?: number;
  negativeSentimentTo?: number;
  initializedFrom?: Date;
  initializedTo?: Date;
  updatedFrom?: Date;
  updatedTo?: Date;
  showStoryPageInfo?: boolean;
  showNumResults?: boolean;
  showDuplicates?: boolean;
  excludeClusterId?: Array<string>;
}

export interface SearchSummarizerRequest {
  summaryBody: SummaryBody;
  q?: string;
  title?: string;
  desc?: string;
  content?: string;
  url?: string;
  articleId?: Array<string>;
  clusterId?: Array<string>;
  sortBy?: AllEndpointSortBy;
  page?: number;
  size?: number;
  from?: Date;
  to?: Date;
  addDateFrom?: Date;
  addDateTo?: Date;
  refreshDateFrom?: Date;
  refreshDateTo?: Date;
  medium?: Array<string>;
  source?: Array<string>;
  sourceGroup?: Array<string>;
  excludeSourceGroup?: Array<string>;
  excludeSource?: Array<string>;
  paywall?: boolean;
  byline?: Array<string>;
  author?: Array<string>;
  excludeAuthor?: Array<string>;
  journalistId?: Array<string>;
  excludeJournalistId?: Array<string>;
  language?: Array<string>;
  excludeLanguage?: Array<string>;
  searchTranslation?: boolean;
  label?: Array<string>;
  excludeLabel?: Array<string>;
  category?: Array<string>;
  excludeCategory?: Array<string>;
  topic?: Array<string>;
  excludeTopic?: Array<string>;
  linkTo?: string;
  showReprints?: boolean;
  reprintGroupId?: string;
  city?: Array<string>;
  excludeCity?: Array<string>;
  area?: Array<string>;
  state?: Array<string>;
  excludeState?: Array<string>;
  county?: Array<string>;
  excludeCounty?: Array<string>;
  locationsCountry?: Array<string>;
  country?: Array<string>;
  excludeLocationsCountry?: Array<string>;
  location?: Array<string>;
  lat?: number;
  lon?: number;
  maxDistance?: number;
  sourceCity?: Array<string>;
  sourceCounty?: Array<string>;
  sourceCountry?: Array<string>;
  sourceState?: Array<string>;
  sourceLat?: number;
  sourceLon?: number;
  sourceMaxDistance?: number;
  personWikidataId?: Array<string>;
  excludePersonWikidataId?: Array<string>;
  personName?: Array<string>;
  excludePersonName?: Array<string>;
  companyId?: Array<string>;
  excludeCompanyId?: Array<string>;
  companyName?: string;
  companyDomain?: Array<string>;
  excludeCompanyDomain?: Array<string>;
  companySymbol?: Array<string>;
  excludeCompanySymbol?: Array<string>;
  showNumResults?: boolean;
  positiveSentimentFrom?: number;
  positiveSentimentTo?: number;
  neutralSentimentFrom?: number;
  neutralSentimentTo?: number;
  negativeSentimentFrom?: number;
  negativeSentimentTo?: number;
  taxonomy?: Array<string>;
  prefixTaxonomy?: string;
}

export interface SearchTopicsRequest {
  name?: string;
  category?: string;
  subcategory?: string;
  page?: number;
  size?: number;
}

export interface VectorSearchArticlesRequest {
  articleSearchParams: ArticleSearchParams;
}

/**
 * V1Api - interface
 *
 * @export
 * @interface V1ApiInterface
 */
export interface V1ApiInterface {
  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * @summary Journalists ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  getJournalistByIdRaw(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Journalist>>;

  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * Journalists ID
   */
  getJournalistById(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Journalist>;

  /**
   * Search and filter all news articles available via the Perigon API. The result includes a list of individual articles that were matched to your specific criteria.
   * @summary Articles
   * @param {string} [q] Search query, each article will be scored and ranked against it. Articles are searched on the title, description, and content fields.
   * @param {string} [title] Search article headlines/title field. Semantic similar to q parameter.
   * @param {string} [desc] Search query on the description field. Semantic similar to q parameter.
   * @param {string} [content] Search query on the article\&#39;s body of content field. Semantic similar to q parameter.
   * @param {string} [url] Search query on the url field. Semantic similar to q parameter. E.g. could be used for querying certain website sections, e.g. source&#x3D;cnn.com&amp;url&#x3D;travel.
   * @param {Array<string>} [articleId] Article ID will search for a news article by the ID of the article. If several parameters are passed, all matched articles will be returned.
   * @param {Array<string>} [clusterId] Search for related content using a cluster ID. Passing a cluster ID will filter results to only the content found within the cluster.
   * @param {AllEndpointSortBy} [sortBy] \&#39;relevance\&#39; to sort by relevance to the query, \&#39;date\&#39; to sort by the publication date (desc), \&#39;pubDate\&#39; is a synonym to \&#39;date\&#39;, \&#39;addDate\&#39; to sort by \&#39;addDate\&#39; field (desc), \&#39;refreshDate\&#39; to sort by \&#39;refreshDate\&#39; field (desc). Defaults to \&#39;relevance\&#39;
   * @param {number} [page] The page number to retrieve.
   * @param {number} [size] The number of items per page.
   * @param {Date} [from] \&#39;from\&#39; filter, will search articles published after the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2023-03-01T00:00:00
   * @param {Date} [to] \&#39;to\&#39; filter, will search articles published before the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T23:59:59
   * @param {Date} [addDateFrom] \&#39;addDateFrom\&#39; filter, will search articles added after the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T00:00:00
   * @param {Date} [addDateTo] \&#39;addDateTo\&#39; filter, will search articles added before the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T23:59:59
   * @param {Date} [refreshDateFrom] Will search articles that were refreshed after the specified date. The date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T00:00:00
   * @param {Date} [refreshDateTo] Will search articles that were refreshed before the specified date. The date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T23:59:59
   * @param {Array<string>} [medium] Medium will filter out news articles medium, which could be \&#39;Video\&#39; or \&#39;Article\&#39;. If several parameters are passed, all matched articles will be returned.
   * @param {Array<string>} [source] Publisher\&#39;s domain can include a subdomain. If multiple parameters are passed, they will be applied as OR operations. Wildcards (* and ?) are suported (e.g. *.cnn.com).
   * @param {Array<string>} [sourceGroup] One of the supported source groups. Find Source Groups in the guided part of our documentation...
   * @param {Array<string>} [excludeSourceGroup] A list of built-in source group names to exclude from the results. The Perigon API categorizes sources into groups (for example, “top10” or “top100”) based on type or popularity. Using this filter allows you to remove articles coming from any source that belongs to one or more of the specified groups.
   * @param {Array<string>} [excludeSource] The domain of the website, which should be excluded from the search. Multiple parameters could be provided. Wildcards (* and ?) are suported (e.g. *.cnn.com).
   * @param {boolean} [paywall] Filter to show only results where the source has a paywall (true) or does not have a paywall (false).
   * @param {Array<string>} [byline] Author names to filter by. Article author bylines are used as a source field. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [author] A list of author names to include. Only articles written by any of the specified authors are returned. This is ideal when you wish to focus on content from particular voices or experts.
   * @param {Array<string>} [excludeAuthor]  A list of author names to exclude from the search results. Any article written by an author whose name matches one in this list will be omitted, which helps to avoid content from certain individuals.
   * @param {Array<string>} [journalistId] Filter by journalist ID. Journalist IDs are unique journalist identifiers which can be found through the Journalist API, or in the matchedAuthors field.
   * @param {Array<string>} [excludeJournalistId] A list of journalist (or reporter) identifiers to exclude. If an article is written by a journalist whose ID matches any in this list, it will not be part of the result set.
   * @param {Array<string>} [language] Language code to filter by language. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeLanguage]  A list of languages to be excluded. Any article published in one of the languages provided in this filter will not be returned. This is useful when you are interested only in news published in specific languages.
   * @param {boolean} [searchTranslation] Expand a query to search the translation, translatedTitle, and translatedDescription fields for non-English articles.
   * @param {Array<string>} [label] Labels to filter by, could be \&#39;Opinion\&#39;, \&#39;Paid-news\&#39;, \&#39;Non-news\&#39;, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeLabel] Exclude results that include specific labels (Opinion, Non-news, Paid News, etc.). You can filter multiple by repeating the parameter.
   * @param {Array<string>} [category] Filter by categories. Categories are general themes that the article is about. Examples of categories: Tech, Politics, etc. If multiple parameters are passed, they will be applied as OR operations. Use \&#39;none\&#39; to search uncategorized articles.
   * @param {Array<string>} [excludeCategory] A list of article categories to be omitted. If an article is tagged with any category present in this list (such as “Polotics”, “Tech”, “Sports”, etc.), it will not appear in the search results.
   * @param {Array<string>} [topic] Filters results to include only articles with the specified topics. Topics are more specific classifications than categories, with an article potentially having multiple topics assigned. Perigon uses both human and machine curation to maintain an evolving list of available topics. Common examples include \&#39;Markets\&#39;, \&#39;Crime\&#39;, \&#39;Cryptocurrency\&#39;, \&#39;Social Issues\&#39;, \&#39;College Sports\&#39;, etc. See the Topics page in Docs for a complete list of available topics.
   * @param {Array<string>} [excludeTopic] Filter by excluding topics. Each topic is some kind of entity that the article is about. Examples of topics: Markets, Joe Biden, Green Energy, Climate Change, Cryptocurrency, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @param {string} [linkTo] Returns only articles that point to specified links (as determined by the \&#39;links\&#39; field in the article response).
   * @param {boolean} [showReprints] Whether to return reprints in the response or not. Reprints are usually wired articles from sources like AP or Reuters that are reprinted in multiple sources at the same time. By default, this parameter is \&#39;true\&#39;.
   * @param {string} [reprintGroupId] Shows all articles belonging to the same reprint group. A reprint group includes one original article (the first one processed by the API) and all its known reprints.
   * @param {Array<string>} [city] Filters articles where a specified city plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the urban area in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeCity] A list of cities to exclude from the results. Articles that are associated with any of the specified cities will be filtered out.
   * @param {Array<string>} [area] Filters articles where a specified area, such as a neighborhood, borough, or district, plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the area in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [state] Filters articles where a specified state plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the state in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeState] A list of states to exclude. Articles that include, or are associated with, any of the states provided here will be filtered out. This is especially useful if you want to ignore news tied to certain geographical areas (e.g., US states).
   * @param {Array<string>} [county] A list of counties to include (or specify) in the search results. This field filters the returned articles based on the county associated with the event or news. Only articles tagged with one of these counties will be included.
   * @param {Array<string>} [excludeCounty] Excludes articles from specific counties or administrative divisions in the vector search results. Accepts either a single county name or a list of county names. County names should match the format used in article metadata (e.g., \&#39;Los Angeles County\&#39;, \&#39;Cook County\&#39;). This parameter allows for more granular geographic filter
   * @param {Array<string>} [locationsCountry] Filters articles where a specified country plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the country in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [country] Country code to filter by country. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeLocationsCountry] Excludes articles where a specified country plays a central role in the content, ensuring results are not deeply relevant to the country in question. If multiple parameters are passed, they will be applied as AND operations, excluding articles relevant to any of the specified countries.
   * @param {Array<string>} [location] Return all articles that have the specified location. Location attributes are delimited by \&#39;:\&#39; between key and value, and \&#39;::\&#39; between attributes. Example: \&#39;city:New York::state:NY\&#39;.
   * @param {number} [lat] Latitude of the center point to search places
   * @param {number} [lon] Longitude of the center point to search places
   * @param {number} [maxDistance] Maximum distance (in km) from starting point to search articles by tagged places
   * @param {Array<string>} [sourceCity] Find articles published by sources that are located within a given city.
   * @param {Array<string>} [sourceCounty] Find articles published by sources that are located within a given county.
   * @param {Array<string>} [sourceCountry] Find articles published by sources that are located within a given country. Must be 2 character country code (i.e. us, gb, etc).
   * @param {Array<string>} [sourceState] Find articles published by sources that are located within a given state.
   * @param {number} [sourceLat] Latitude of the center point to search articles created by local publications.
   * @param {number} [sourceLon] Latitude of the center point to search articles created by local publications.
   * @param {number} [sourceMaxDistance] Maximum distance from starting point to search articles created by local publications.
   * @param {Array<string>} [personWikidataId] List of person Wikidata IDs for filtering.
   * @param {Array<string>} [excludePersonWikidataId] A list of Wikidata identifiers for individuals. Articles mentioning persons with any of these Wikidata IDs will be filtered out. This is particularly helpful when using a unique identifier to prevent ambiguity in names.
   * @param {Array<string>} [personName] List of person names for exact matches. Boolean and complex logic is not supported on this paramter.
   * @param {Array<string>} [excludePersonName] A list of person names that, when associated with the content, cause the article to be excluded. This filter removes articles related to any individuals whose names match those on the list.
   * @param {Array<string>} [companyId] List of company IDs to filter by.
   * @param {Array<string>} [excludeCompanyId] A list of company identifiers. Articles associated with companies that have any of these unique IDs will be filtered out from the returned results, ensuring that certain companies or corporate entities are not included.
   * @param {string} [companyName] Search by company name.
   * @param {Array<string>} [companyDomain] Search by company domains for filtering. E.g. companyDomain&#x3D;apple.com.
   * @param {Array<string>} [excludeCompanyDomain] A list of company domains to exclude. If an article is related to a company that uses one of the specified domains (for instance, “example.com”), it will not be returned in the results.
   * @param {Array<string>} [companySymbol] Search by company symbols.
   * @param {Array<string>} [excludeCompanySymbol] A list of stock symbols (ticker symbols) that identify companies to be excluded. Articles related to companies using any of these symbols will be omitted, which is useful for targeting or avoiding specific public companies.
   * @param {boolean} [showNumResults] Whether to show the total number of all matched articles. Default value is false which makes queries a bit more efficient but also counts up to 10000 articles.
   * @param {number} [positiveSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating positive sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [positiveSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating positive sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [neutralSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating neutral sentiment. Explanation of sentimental values can be found in Docs under the Article Data section.
   * @param {number} [neutralSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating neutral sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [negativeSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating negative sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [negativeSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating negative sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {Array<string>} [taxonomy] Filters by Google Content Categories. This field will accept 1 or more categories, must pass the full name of the category. Example: taxonomy&#x3D;/Finance/Banking/Other, /Finance/Investing/Funds
   * @param {string} [prefixTaxonomy] Filters by Google Content Categories. This field will filter by the category prefix only. Example: prefixTaxonomy&#x3D;/Finance
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchArticlesRaw(
    requestParameters: SearchArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<QuerySearchResult>>;

  /**
   * Search and filter all news articles available via the Perigon API. The result includes a list of individual articles that were matched to your specific criteria.
   * Articles
   */
  searchArticles(
    requestParameters: SearchArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<QuerySearchResult>;

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * @summary Companies
   * @param {Array<string>} [id] Search by company id.
   * @param {Array<string>} [symbol] Search by ticker symbol.
   * @param {Array<string>} [domain] Search by company domain.
   * @param {Array<string>} [country] Search by company country.
   * @param {Array<string>} [exchange] Search by exchange name.
   * @param {number} [numEmployeesFrom] Minimum number of employees.
   * @param {number} [numEmployeesTo] Maximum number of employees.
   * @param {Date} [ipoFrom] Starting IPO date.
   * @param {Date} [ipoTo] Ending IPO date.
   * @param {string} [q] Search companies over \&#39;name\&#39;, \&#39;altNames\&#39;, \&#39;domains\&#39; and \&#39;symbols.symbol\&#39; fields. Boolean operators and logic are supported.
   * @param {string} [name] Search by company name. Boolean operators and logic are supported.
   * @param {string} [industry] Search by industry. Boolean operators and logic are supported.
   * @param {string} [sector] Search by sector. Boolean operators and logic are supported.
   * @param {number} [size] The number of items per page.
   * @param {number} [page] The page number to retrieve.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchCompaniesRaw(
    requestParameters: SearchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CompanySearchResult>>;

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * Companies
   */
  searchCompanies(
    requestParameters: SearchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CompanySearchResult>;

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * @summary Journalists
   * @param {Array<string>} [id] Filter by journalist ID. Journalist IDs are unique journalist identifiers which can be found through the Journalist API, or in the matchedAuthors field.
   * @param {string} [q] Searches through name, title, twitterBio fields with priority given to the name, then to the title, then to the twitter bio. Returns results sorted by relevance.
   * @param {string} [name] Searches through journalist names, scores and ranks them, returns results sorted by relevance.
   * @param {string} [twitter] Searches for journalists by (exact match) twitter handle.
   * @param {number} [size] The number of items per page.
   * @param {number} [page] The page number to retrieve.
   * @param {Array<string>} [source] Search for journalist by the publisher\&#39;s domain can include a subdomain. If multiple parameters are passed, they will be applied as OR operations. Wildcards (* and ?) are suported (e.g. *.cnn.com).
   * @param {Array<string>} [topic] Searches for journalists by topic.
   * @param {Array<string>} [category] Filter by categories. Categories are general themes that the article is about. Examples of categories: Tech, Politics, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [label] Filter journalists by label. For example, searching \&#39;Opinion\&#39; will return the journalists where \&#39;Opinion\&#39;-type articles is one of the top labels for the articles they publish.
   * @param {number} [minMonthlyPosts] Returns the journalists with the minimum indicated number of average monthly posts.
   * @param {number} [maxMonthlyPosts] Returns the journalist with the maximum indicated number of average monthly posts.
   * @param {Array<string>} [country] Country code to filter by country. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Date} [updatedAtFrom] Starting date when the record was last updated.
   * @param {Date} [updatedAtTo] Ending date when the record was last updated.
   * @param {boolean} [showNumResults] If \&#39;true\&#39;, shows accurate number of results matched by the query. By default, the counter is accurate only up to 10,000 results due performance reasons.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchJournalists1Raw(
    requestParameters: SearchJournalists1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<JournalistSearchResult>>;

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * Journalists
   */
  searchJournalists1(
    requestParameters: SearchJournalists1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<JournalistSearchResult>;

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * @summary People
   * @param {string} [name] Search by name of the person. Supports exact matching with quotes (\&quot;\&quot;) and Boolean operators (AND, OR, NOT).
   * @param {Array<string>} [wikidataId] Filter by Wikidata entity ID(s). Use this to find specific people by their Wikidata identifiers.
   * @param {Array<string>} [occupationId] Filter by Wikidata occupation ID(s). Use this to find people with specific occupations.
   * @param {string} [occupationLabel] Search by occupation name. Supports exact matching with quotes (\&quot;\&quot;) and Boolean operators (AND, OR, NOT).
   * @param {number} [page] The page number to retrieve.
   * @param {number} [size] The number of items per page.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchPeopleRaw(
    requestParameters: SearchPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PeopleSearchResult>>;

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * People
   */
  searchPeople(
    requestParameters: SearchPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PeopleSearchResult>;

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * @summary Sources
   * @param {Array<string>} [domain] Domain name for the media source to lookup. This parameter supports wildcard queries, ie. \&quot;*.cnn.com\&quot; will match all subdomains for cnn.com.
   * @param {string} [name] Search by name of source. This parameter supports complex boolean search operators, and also searches the altNames field for alternative names of the source.
   * @param {string} [sourceGroup] Find all sources within a sourceGroup. Find Source Groups in the guided part of our documentation...
   * @param {SortBy} [sortBy] Use \&#39;relevance\&#39; to sort by relevance to the query, \&#39;globalRank\&#39; for top ranked sources based on popularity, \&#39;monthlyVisits\&#39; for sources with the largest audience, \&#39;avgMonthlyPosts\&#39; for sources with the highest publishing frequency. Defaults to \&#39;relevance\&#39;.
   * @param {number} [page] The page number to retrieve.
   * @param {number} [size] The number of items per page.
   * @param {number} [minMonthlyVisits] Filter by popularity. Enter a minimum number of monthly visits that the source must have in order to match your query.
   * @param {number} [maxMonthlyVisits] Enter a maximum number of monthly visits that the source must have in order to match your query.
   * @param {number} [minMonthlyPosts] Returns the sources that have at least this number of average monthly posts.
   * @param {number} [maxMonthlyPosts] Returns the sources that have at most this number of average monthly posts.
   * @param {Array<string>} [country] Country code to filter sources by the countries in which they most commonly cover. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [sourceCountry] Find all local publications that are located within a given country.
   * @param {Array<string>} [sourceState] Find all local publications that are located within a given state.
   * @param {Array<string>} [sourceCounty] Find all local publications that are located within a given county.
   * @param {Array<string>} [sourceCity] Find all local publications that are located within a given city.
   * @param {number} [sourceLat] Latitude of the center point to search local publications.
   * @param {number} [sourceLon] Longitude of the center point to search local publications.
   * @param {number} [sourceMaxDistance] Maximum distance from starting point to search local publications.
   * @param {Array<string>} [category] Filter by categories. Categories are general themes that the article is about. Examples of categories: Tech, Politics, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [topic] Find sources by topic. For example, searching \&#39;Markets\&#39; will return the sources where \&#39;Markets\&#39; is one of the top 10 topics that they cover.
   * @param {Array<string>} [label] Filter sources by label. For example, searching \&#39;Opinion\&#39; will return the sources where \&#39;Opinion\&#39;-type articles is one of the top labels for the articles they publish.
   * @param {boolean} [paywall] Use \&#39;true\&#39; to find only sources known to have a paywall, or use \&#39;false\&#39; to filter for only sources that do not have a paywall.
   * @param {boolean} [showSubdomains] Controls whether subdomains are included in the response. When set to true (default), all relevant subdomains of media sources will be returned as separate results. Set to false to consolidate results to parent domains only.
   * @param {boolean} [showNumResults] If \&#39;true\&#39;, shows accurate number of results matched by the query. By default, the counter is accurate only up to 10,000 results due performance reasons.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchSourcesRaw(
    requestParameters: SearchSourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SourceSearchResult>>;

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * Sources
   */
  searchSources(
    requestParameters: SearchSourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SourceSearchResult>;

  /**
   * Search and filter all news stories available via the Perigon API. Each story aggregates key information across related articles, including AI-generated names, summaries, and key points.
   * @summary Stories
   * @param {string} [q] Search story by name, summary and key points. Preference is given to the name field. Supports complex query syntax, same way as q parameter from /all endpoint.
   * @param {string} [name] Search story by name. Supports complex query syntax, same way as q parameter from /all endpoint.
   * @param {Array<string>} [clusterId] Filter to specific story. Passing a cluster ID will filter results to only the content found within the cluster. Multiple params could be passed.
   * @param {SortBy} [sortBy] Sort stories by count (\&#39;count\&#39;), total count (\&#39;totalCount\&#39;), creation date (\&#39;createdAt\&#39;), last updated date (\&#39;updatedAt\&#39;), or relevance (\&#39;relevance\&#39;). By default is sorted by \&#39;createdAt\&#39;
   * @param {number} [page] The page number to retrieve.
   * @param {number} [size] The number of items per page.
   * @param {Date} [from] \&#39;from\&#39; filter, will search stories created after the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2023-03-01T00:00:00
   * @param {Date} [to] \&#39;to\&#39; filter, will search stories created before the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2023-03-01T23:59:59
   * @param {Array<string>} [topic] Filter by topics. Each topic is some kind of entity that the article is about. Examples of topics: Markets, Joe Biden, Green Energy, Climate Change, Cryptocurrency, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [category] Filter by categories. Categories are general themes that the article is about. Examples of categories: Tech, Politics, etc. If multiple parameters are passed, they will be applied as OR operations. Use \&#39;none\&#39; to search uncategorized articles. More ➜
   * @param {Array<string>} [taxonomy] Filters by Google Content Categories. This field will accept 1 or more categories, must pass the full name of the category. Example: taxonomy&#x3D;/Finance/Banking/Other, /Finance/Investing/Funds
   * @param {Array<string>} [source] Filter stories by sources that wrote articles belonging to this story. At least 1 article is required for story to match. Multiple parameters could be passed.
   * @param {Array<string>} [sourceGroup] Filter stories by sources that wrote articles belonging to this story. Source groups are expanded into a list of sources. At least 1 article by the source is required for story to match. Multiple params could be passed.
   * @param {number} [minUniqueSources] Specifies the minimum number of unique sources required for a story to appear in results. Higher values return more significant stories covered by multiple publications. Default is 3.
   * @param {Array<string>} [personWikidataId] List of person Wikidata IDs for filtering. Filter is applied on topPeople field.
   * @param {string} [personName] List of people names. Filtering is applied on topPeople field.
   * @param {Array<string>} [companyId] List of company IDs for filtering. Filtering is applied to topCompanies field.
   * @param {string} [companyName] List of company names for filtering. Filtering is applied on topCompanies field.
   * @param {Array<string>} [companyDomain] List of company domains for filtering. Filtering is applied on topCompanies field.
   * @param {Array<string>} [companySymbol] List of company tickers for filtering. Filtering is applied on topCompanies field.
   * @param {Array<string>} [country] Country code to filter by country. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [state] Filter local news by state. Applies only to local news, when this param is passed non-local news will not be returned. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [city] Filter local news by city. Applies only to local news, when this param is passed non-local news will not be returned. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [area] Filter local news by area. Applies only to local news, when this param is passed non-local news will not be returned. If multiple parameters are passed, they will be applied as OR operations.
   * @param {number} [minClusterSize] Filter by minimum cluster size. Minimum cluster size filter applies to number of unique articles.
   * @param {number} [maxClusterSize] Filter by maximum cluster size. Maximum cluster size filter applies to number of unique articles in the cluster.
   * @param {boolean} [nameExists] Returns stories with name assigned. Defaults to true.
   * @param {number} [positiveSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating positive sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [positiveSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating positive sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [neutralSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating neutral sentiment. Explanation of sentimental values can be found in Docs under the Article Data section.
   * @param {number} [neutralSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating neutral sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [negativeSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating negative sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [negativeSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating negative sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {Date} [initializedFrom] \&#39;initializedFrom\&#39; filter, will search stories that became available after provided date
   * @param {Date} [initializedTo] \&#39;initializedTo\&#39; filter, will search stories that became available before provided date
   * @param {Date} [updatedFrom] Will return stories with \&#39;updatedAt\&#39; &gt;&#x3D; \&#39;updatedFrom\&#39;.
   * @param {Date} [updatedTo] Will return stories with \&#39;updatedAt\&#39; &lt;&#x3D; \&#39;updatedTo\&#39;.
   * @param {boolean} [showStoryPageInfo]
   * @param {boolean} [showNumResults] Show total number of results. By default set to false, will cap result count at 10000.
   * @param {boolean} [showDuplicates] Stories are deduplicated by default. If a story is deduplicated, all future articles are merged into the original story. duplicateOf field contains the original cluster Id. When showDuplicates&#x3D;true, all stories are shown.
   * @param {Array<string>} [excludeClusterId] Excludes specific stories from the results by their unique identifiers. Use this parameter to filter out unwanted or previously seen stories.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchStoriesRaw(
    requestParameters: SearchStoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StorySearchResult>>;

  /**
   * Search and filter all news stories available via the Perigon API. Each story aggregates key information across related articles, including AI-generated names, summaries, and key points.
   * Stories
   */
  searchStories(
    requestParameters: SearchStoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StorySearchResult>;

  /**
   * Produce a single, concise summary over the full corpus of articles matching your filters, using your prompt to guide which insights to highlight.
   * @summary Search Summarizer
   * @param {SummaryBody} summaryBody
   * @param {string} [q] Search query, each article will be scored and ranked against it. Articles are searched on the title, description, and content fields.
   * @param {string} [title] Search article headlines/title field. Semantic similar to q parameter.
   * @param {string} [desc] Search query on the description field. Semantic similar to q parameter.
   * @param {string} [content] Search query on the article\&#39;s body of content field. Semantic similar to q parameter.
   * @param {string} [url] Search query on the url field. Semantic similar to q parameter. E.g. could be used for querying certain website sections, e.g. source&#x3D;cnn.com&amp;url&#x3D;travel.
   * @param {Array<string>} [articleId] Article ID will search for a news article by the ID of the article. If several parameters are passed, all matched articles will be returned.
   * @param {Array<string>} [clusterId] Search for related content using a cluster ID. Passing a cluster ID will filter results to only the content found within the cluster.
   * @param {AllEndpointSortBy} [sortBy] \&#39;relevance\&#39; to sort by relevance to the query, \&#39;date\&#39; to sort by the publication date (desc), \&#39;pubDate\&#39; is a synonym to \&#39;date\&#39;, \&#39;addDate\&#39; to sort by \&#39;addDate\&#39; field (desc), \&#39;refreshDate\&#39; to sort by \&#39;refreshDate\&#39; field (desc). Defaults to \&#39;relevance\&#39;
   * @param {number} [page] The page number to retrieve.
   * @param {number} [size] The number of items per page.
   * @param {Date} [from] \&#39;from\&#39; filter, will search articles published after the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2023-03-01T00:00:00
   * @param {Date} [to] \&#39;to\&#39; filter, will search articles published before the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T23:59:59
   * @param {Date} [addDateFrom] \&#39;addDateFrom\&#39; filter, will search articles added after the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T00:00:00
   * @param {Date} [addDateTo] \&#39;addDateTo\&#39; filter, will search articles added before the specified date, the date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T23:59:59
   * @param {Date} [refreshDateFrom] Will search articles that were refreshed after the specified date. The date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T00:00:00
   * @param {Date} [refreshDateTo] Will search articles that were refreshed before the specified date. The date could be passed as ISO or \&#39;yyyy-mm-dd\&#39;. Add time in ISO format, ie. 2022-02-01T23:59:59
   * @param {Array<string>} [medium] Medium will filter out news articles medium, which could be \&#39;Video\&#39; or \&#39;Article\&#39;. If several parameters are passed, all matched articles will be returned.
   * @param {Array<string>} [source] Publisher\&#39;s domain can include a subdomain. If multiple parameters are passed, they will be applied as OR operations. Wildcards (* and ?) are suported (e.g. *.cnn.com).
   * @param {Array<string>} [sourceGroup] One of the supported source groups. Find Source Groups in the guided part of our documentation...
   * @param {Array<string>} [excludeSourceGroup] A list of built-in source group names to exclude from the results. The Perigon API categorizes sources into groups (for example, “top10” or “top100”) based on type or popularity. Using this filter allows you to remove articles coming from any source that belongs to one or more of the specified groups.
   * @param {Array<string>} [excludeSource] The domain of the website, which should be excluded from the search. Multiple parameters could be provided. Wildcards (* and ?) are suported (e.g. *.cnn.com).
   * @param {boolean} [paywall] Filter to show only results where the source has a paywall (true) or does not have a paywall (false).
   * @param {Array<string>} [byline] Author names to filter by. Article author bylines are used as a source field. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [author] A list of author names to include. Only articles written by any of the specified authors are returned. This is ideal when you wish to focus on content from particular voices or experts.
   * @param {Array<string>} [excludeAuthor]  A list of author names to exclude from the search results. Any article written by an author whose name matches one in this list will be omitted, which helps to avoid content from certain individuals.
   * @param {Array<string>} [journalistId] Filter by journalist ID. Journalist IDs are unique journalist identifiers which can be found through the Journalist API, or in the matchedAuthors field.
   * @param {Array<string>} [excludeJournalistId] A list of journalist (or reporter) identifiers to exclude. If an article is written by a journalist whose ID matches any in this list, it will not be part of the result set.
   * @param {Array<string>} [language] Language code to filter by language. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeLanguage]  A list of languages to be excluded. Any article published in one of the languages provided in this filter will not be returned. This is useful when you are interested only in news published in specific languages.
   * @param {boolean} [searchTranslation] Expand a query to search the translation, translatedTitle, and translatedDescription fields for non-English articles.
   * @param {Array<string>} [label] Labels to filter by, could be \&#39;Opinion\&#39;, \&#39;Paid-news\&#39;, \&#39;Non-news\&#39;, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeLabel] Exclude results that include specific labels (Opinion, Non-news, Paid News, etc.). You can filter multiple by repeating the parameter.
   * @param {Array<string>} [category] Filter by categories. Categories are general themes that the article is about. Examples of categories: Tech, Politics, etc. If multiple parameters are passed, they will be applied as OR operations. Use \&#39;none\&#39; to search uncategorized articles.
   * @param {Array<string>} [excludeCategory] A list of article categories to be omitted. If an article is tagged with any category present in this list (such as “Polotics”, “Tech”, “Sports”, etc.), it will not appear in the search results.
   * @param {Array<string>} [topic] Filters results to include only articles with the specified topics. Topics are more specific classifications than categories, with an article potentially having multiple topics assigned. Perigon uses both human and machine curation to maintain an evolving list of available topics. Common examples include \&#39;Markets\&#39;, \&#39;Crime\&#39;, \&#39;Cryptocurrency\&#39;, \&#39;Social Issues\&#39;, \&#39;College Sports\&#39;, etc. See the Topics page in Docs for a complete list of available topics.
   * @param {Array<string>} [excludeTopic] Filter by excluding topics. Each topic is some kind of entity that the article is about. Examples of topics: Markets, Joe Biden, Green Energy, Climate Change, Cryptocurrency, etc. If multiple parameters are passed, they will be applied as OR operations.
   * @param {string} [linkTo] Returns only articles that point to specified links (as determined by the \&#39;links\&#39; field in the article response).
   * @param {boolean} [showReprints] Whether to return reprints in the response or not. Reprints are usually wired articles from sources like AP or Reuters that are reprinted in multiple sources at the same time. By default, this parameter is \&#39;true\&#39;.
   * @param {string} [reprintGroupId] Shows all articles belonging to the same reprint group. A reprint group includes one original article (the first one processed by the API) and all its known reprints.
   * @param {Array<string>} [city] Filters articles where a specified city plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the urban area in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeCity] A list of cities to exclude from the results. Articles that are associated with any of the specified cities will be filtered out.
   * @param {Array<string>} [area] Filters articles where a specified area, such as a neighborhood, borough, or district, plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the area in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [state] Filters articles where a specified state plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the state in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeState] A list of states to exclude. Articles that include, or are associated with, any of the states provided here will be filtered out. This is especially useful if you want to ignore news tied to certain geographical areas (e.g., US states).
   * @param {Array<string>} [county] A list of counties to include (or specify) in the search results. This field filters the returned articles based on the county associated with the event or news. Only articles tagged with one of these counties will be included.
   * @param {Array<string>} [excludeCounty] Excludes articles from specific counties or administrative divisions in the vector search results. Accepts either a single county name or a list of county names. County names should match the format used in article metadata (e.g., \&#39;Los Angeles County\&#39;, \&#39;Cook County\&#39;). This parameter allows for more granular geographic filter
   * @param {Array<string>} [locationsCountry] Filters articles where a specified country plays a central role in the content, beyond mere mentions, to ensure the results are deeply relevant to the country in question. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [country] Country code to filter by country. If multiple parameters are passed, they will be applied as OR operations.
   * @param {Array<string>} [excludeLocationsCountry] Excludes articles where a specified country plays a central role in the content, ensuring results are not deeply relevant to the country in question. If multiple parameters are passed, they will be applied as AND operations, excluding articles relevant to any of the specified countries.
   * @param {Array<string>} [location] Return all articles that have the specified location. Location attributes are delimited by \&#39;:\&#39; between key and value, and \&#39;::\&#39; between attributes. Example: \&#39;city:New York::state:NY\&#39;.
   * @param {number} [lat] Latitude of the center point to search places
   * @param {number} [lon] Longitude of the center point to search places
   * @param {number} [maxDistance] Maximum distance (in km) from starting point to search articles by tagged places
   * @param {Array<string>} [sourceCity] Find articles published by sources that are located within a given city.
   * @param {Array<string>} [sourceCounty] Find articles published by sources that are located within a given county.
   * @param {Array<string>} [sourceCountry] Find articles published by sources that are located within a given country. Must be 2 character country code (i.e. us, gb, etc).
   * @param {Array<string>} [sourceState] Find articles published by sources that are located within a given state.
   * @param {number} [sourceLat] Latitude of the center point to search articles created by local publications.
   * @param {number} [sourceLon] Latitude of the center point to search articles created by local publications.
   * @param {number} [sourceMaxDistance] Maximum distance from starting point to search articles created by local publications.
   * @param {Array<string>} [personWikidataId] List of person Wikidata IDs for filtering.
   * @param {Array<string>} [excludePersonWikidataId] A list of Wikidata identifiers for individuals. Articles mentioning persons with any of these Wikidata IDs will be filtered out. This is particularly helpful when using a unique identifier to prevent ambiguity in names.
   * @param {Array<string>} [personName] List of person names for exact matches. Boolean and complex logic is not supported on this paramter.
   * @param {Array<string>} [excludePersonName] A list of person names that, when associated with the content, cause the article to be excluded. This filter removes articles related to any individuals whose names match those on the list.
   * @param {Array<string>} [companyId] List of company IDs to filter by.
   * @param {Array<string>} [excludeCompanyId] A list of company identifiers. Articles associated with companies that have any of these unique IDs will be filtered out from the returned results, ensuring that certain companies or corporate entities are not included.
   * @param {string} [companyName] Search by company name.
   * @param {Array<string>} [companyDomain] Search by company domains for filtering. E.g. companyDomain&#x3D;apple.com.
   * @param {Array<string>} [excludeCompanyDomain] A list of company domains to exclude. If an article is related to a company that uses one of the specified domains (for instance, “example.com”), it will not be returned in the results.
   * @param {Array<string>} [companySymbol] Search by company symbols.
   * @param {Array<string>} [excludeCompanySymbol] A list of stock symbols (ticker symbols) that identify companies to be excluded. Articles related to companies using any of these symbols will be omitted, which is useful for targeting or avoiding specific public companies.
   * @param {boolean} [showNumResults] Whether to show the total number of all matched articles. Default value is false which makes queries a bit more efficient but also counts up to 10000 articles.
   * @param {number} [positiveSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating positive sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [positiveSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating positive sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [neutralSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating neutral sentiment. Explanation of sentimental values can be found in Docs under the Article Data section.
   * @param {number} [neutralSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating neutral sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [negativeSentimentFrom] Filters results with a sentiment score greater than or equal to the specified value, indicating negative sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {number} [negativeSentimentTo] Filters results with a sentiment score less than or equal to the specified value, indicating negative sentiment. See the Article Data section in Docs for an explanation of scores.
   * @param {Array<string>} [taxonomy] Filters by Google Content Categories. This field will accept 1 or more categories, must pass the full name of the category. Example: taxonomy&#x3D;/Finance/Banking/Other, /Finance/Investing/Funds
   * @param {string} [prefixTaxonomy] Filters by Google Content Categories. This field will filter by the category prefix only. Example: prefixTaxonomy&#x3D;/Finance
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchSummarizerRaw(
    requestParameters: SearchSummarizerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SummarySearchResult>>;

  /**
   * Produce a single, concise summary over the full corpus of articles matching your filters, using your prompt to guide which insights to highlight.
   * Search Summarizer
   */
  searchSummarizer(
    requestParameters: SearchSummarizerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SummarySearchResult>;

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * @summary Topics
   * @param {string} [name] Search by name.
   * @param {string} [category] Search by category.
   * @param {string} [subcategory] Search by subcategory.
   * @param {number} [page] The page number to retrieve.
   * @param {number} [size] The number of items per page.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  searchTopicsRaw(
    requestParameters: SearchTopicsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TopicSearchResult>>;

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * Topics
   */
  searchTopics(
    requestParameters: SearchTopicsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TopicSearchResult>;

  /**
   * Perform a natural language search over news articles from the past 6 months using semantic relevance. The result includes a list of articles most closely matched to your query intent.
   * @summary Vector
   * @param {ArticleSearchParams} articleSearchParams
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof V1ApiInterface
   */
  vectorSearchArticlesRaw(
    requestParameters: VectorSearchArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VectorSearchResult>>;

  /**
   * Perform a natural language search over news articles from the past 6 months using semantic relevance. The result includes a list of articles most closely matched to your query intent.
   * Vector
   */
  vectorSearchArticles(
    requestParameters: VectorSearchArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VectorSearchResult>;
}

/**
 *
 */
export class V1Api extends runtime.BaseAPI implements V1ApiInterface {
  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * Journalists ID
   */
  async getJournalistByIdRaw(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Journalist>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getJournalistById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/journalists/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      JournalistFromJSON(jsonValue),
    );
  }

  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * Journalists ID
   */
  async getJournalistById(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Journalist> {
    const response = await this.getJournalistByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search and filter all news articles available via the Perigon API. The result includes a list of individual articles that were matched to your specific criteria.
   * Articles
   */
  async searchArticlesRaw(
    requestParameters: SearchArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<QuerySearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["title"] != null) {
      queryParameters["title"] = requestParameters["title"];
    }

    if (requestParameters["desc"] != null) {
      queryParameters["desc"] = requestParameters["desc"];
    }

    if (requestParameters["content"] != null) {
      queryParameters["content"] = requestParameters["content"];
    }

    if (requestParameters["url"] != null) {
      queryParameters["url"] = requestParameters["url"];
    }

    if (requestParameters["articleId"] != null) {
      queryParameters["articleId"] = requestParameters["articleId"];
    }

    if (requestParameters["clusterId"] != null) {
      queryParameters["clusterId"] = requestParameters["clusterId"];
    }

    if (requestParameters["sortBy"] != null) {
      queryParameters["sortBy"] = requestParameters["sortBy"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["from"] != null) {
      queryParameters["from"] = (
        requestParameters["from"] as any
      ).toISOString();
    }

    if (requestParameters["to"] != null) {
      queryParameters["to"] = (requestParameters["to"] as any).toISOString();
    }

    if (requestParameters["addDateFrom"] != null) {
      queryParameters["addDateFrom"] = (
        requestParameters["addDateFrom"] as any
      ).toISOString();
    }

    if (requestParameters["addDateTo"] != null) {
      queryParameters["addDateTo"] = (
        requestParameters["addDateTo"] as any
      ).toISOString();
    }

    if (requestParameters["refreshDateFrom"] != null) {
      queryParameters["refreshDateFrom"] = (
        requestParameters["refreshDateFrom"] as any
      ).toISOString();
    }

    if (requestParameters["refreshDateTo"] != null) {
      queryParameters["refreshDateTo"] = (
        requestParameters["refreshDateTo"] as any
      ).toISOString();
    }

    if (requestParameters["medium"] != null) {
      queryParameters["medium"] = requestParameters["medium"];
    }

    if (requestParameters["source"] != null) {
      queryParameters["source"] = requestParameters["source"];
    }

    if (requestParameters["sourceGroup"] != null) {
      queryParameters["sourceGroup"] = requestParameters["sourceGroup"];
    }

    if (requestParameters["excludeSourceGroup"] != null) {
      queryParameters["excludeSourceGroup"] =
        requestParameters["excludeSourceGroup"];
    }

    if (requestParameters["excludeSource"] != null) {
      queryParameters["excludeSource"] = requestParameters["excludeSource"];
    }

    if (requestParameters["paywall"] != null) {
      queryParameters["paywall"] = requestParameters["paywall"];
    }

    if (requestParameters["byline"] != null) {
      queryParameters["byline"] = requestParameters["byline"];
    }

    if (requestParameters["author"] != null) {
      queryParameters["author"] = requestParameters["author"];
    }

    if (requestParameters["excludeAuthor"] != null) {
      queryParameters["excludeAuthor"] = requestParameters["excludeAuthor"];
    }

    if (requestParameters["journalistId"] != null) {
      queryParameters["journalistId"] = requestParameters["journalistId"];
    }

    if (requestParameters["excludeJournalistId"] != null) {
      queryParameters["excludeJournalistId"] =
        requestParameters["excludeJournalistId"];
    }

    if (requestParameters["language"] != null) {
      queryParameters["language"] = requestParameters["language"];
    }

    if (requestParameters["excludeLanguage"] != null) {
      queryParameters["excludeLanguage"] = requestParameters["excludeLanguage"];
    }

    if (requestParameters["searchTranslation"] != null) {
      queryParameters["searchTranslation"] =
        requestParameters["searchTranslation"];
    }

    if (requestParameters["label"] != null) {
      queryParameters["label"] = requestParameters["label"];
    }

    if (requestParameters["excludeLabel"] != null) {
      queryParameters["excludeLabel"] = requestParameters["excludeLabel"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["excludeCategory"] != null) {
      queryParameters["excludeCategory"] = requestParameters["excludeCategory"];
    }

    if (requestParameters["topic"] != null) {
      queryParameters["topic"] = requestParameters["topic"];
    }

    if (requestParameters["excludeTopic"] != null) {
      queryParameters["excludeTopic"] = requestParameters["excludeTopic"];
    }

    if (requestParameters["linkTo"] != null) {
      queryParameters["linkTo"] = requestParameters["linkTo"];
    }

    if (requestParameters["showReprints"] != null) {
      queryParameters["showReprints"] = requestParameters["showReprints"];
    }

    if (requestParameters["reprintGroupId"] != null) {
      queryParameters["reprintGroupId"] = requestParameters["reprintGroupId"];
    }

    if (requestParameters["city"] != null) {
      queryParameters["city"] = requestParameters["city"];
    }

    if (requestParameters["excludeCity"] != null) {
      queryParameters["excludeCity"] = requestParameters["excludeCity"];
    }

    if (requestParameters["area"] != null) {
      queryParameters["area"] = requestParameters["area"];
    }

    if (requestParameters["state"] != null) {
      queryParameters["state"] = requestParameters["state"];
    }

    if (requestParameters["excludeState"] != null) {
      queryParameters["excludeState"] = requestParameters["excludeState"];
    }

    if (requestParameters["county"] != null) {
      queryParameters["county"] = requestParameters["county"];
    }

    if (requestParameters["excludeCounty"] != null) {
      queryParameters["excludeCounty"] = requestParameters["excludeCounty"];
    }

    if (requestParameters["locationsCountry"] != null) {
      queryParameters["locationsCountry"] =
        requestParameters["locationsCountry"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["excludeLocationsCountry"] != null) {
      queryParameters["excludeLocationsCountry"] =
        requestParameters["excludeLocationsCountry"];
    }

    if (requestParameters["location"] != null) {
      queryParameters["location"] = requestParameters["location"];
    }

    if (requestParameters["lat"] != null) {
      queryParameters["lat"] = requestParameters["lat"];
    }

    if (requestParameters["lon"] != null) {
      queryParameters["lon"] = requestParameters["lon"];
    }

    if (requestParameters["maxDistance"] != null) {
      queryParameters["maxDistance"] = requestParameters["maxDistance"];
    }

    if (requestParameters["sourceCity"] != null) {
      queryParameters["sourceCity"] = requestParameters["sourceCity"];
    }

    if (requestParameters["sourceCounty"] != null) {
      queryParameters["sourceCounty"] = requestParameters["sourceCounty"];
    }

    if (requestParameters["sourceCountry"] != null) {
      queryParameters["sourceCountry"] = requestParameters["sourceCountry"];
    }

    if (requestParameters["sourceState"] != null) {
      queryParameters["sourceState"] = requestParameters["sourceState"];
    }

    if (requestParameters["sourceLat"] != null) {
      queryParameters["sourceLat"] = requestParameters["sourceLat"];
    }

    if (requestParameters["sourceLon"] != null) {
      queryParameters["sourceLon"] = requestParameters["sourceLon"];
    }

    if (requestParameters["sourceMaxDistance"] != null) {
      queryParameters["sourceMaxDistance"] =
        requestParameters["sourceMaxDistance"];
    }

    if (requestParameters["personWikidataId"] != null) {
      queryParameters["personWikidataId"] =
        requestParameters["personWikidataId"];
    }

    if (requestParameters["excludePersonWikidataId"] != null) {
      queryParameters["excludePersonWikidataId"] =
        requestParameters["excludePersonWikidataId"];
    }

    if (requestParameters["personName"] != null) {
      queryParameters["personName"] = requestParameters["personName"];
    }

    if (requestParameters["excludePersonName"] != null) {
      queryParameters["excludePersonName"] =
        requestParameters["excludePersonName"];
    }

    if (requestParameters["companyId"] != null) {
      queryParameters["companyId"] = requestParameters["companyId"];
    }

    if (requestParameters["excludeCompanyId"] != null) {
      queryParameters["excludeCompanyId"] =
        requestParameters["excludeCompanyId"];
    }

    if (requestParameters["companyName"] != null) {
      queryParameters["companyName"] = requestParameters["companyName"];
    }

    if (requestParameters["companyDomain"] != null) {
      queryParameters["companyDomain"] = requestParameters["companyDomain"];
    }

    if (requestParameters["excludeCompanyDomain"] != null) {
      queryParameters["excludeCompanyDomain"] =
        requestParameters["excludeCompanyDomain"];
    }

    if (requestParameters["companySymbol"] != null) {
      queryParameters["companySymbol"] = requestParameters["companySymbol"];
    }

    if (requestParameters["excludeCompanySymbol"] != null) {
      queryParameters["excludeCompanySymbol"] =
        requestParameters["excludeCompanySymbol"];
    }

    if (requestParameters["showNumResults"] != null) {
      queryParameters["showNumResults"] = requestParameters["showNumResults"];
    }

    if (requestParameters["positiveSentimentFrom"] != null) {
      queryParameters["positiveSentimentFrom"] =
        requestParameters["positiveSentimentFrom"];
    }

    if (requestParameters["positiveSentimentTo"] != null) {
      queryParameters["positiveSentimentTo"] =
        requestParameters["positiveSentimentTo"];
    }

    if (requestParameters["neutralSentimentFrom"] != null) {
      queryParameters["neutralSentimentFrom"] =
        requestParameters["neutralSentimentFrom"];
    }

    if (requestParameters["neutralSentimentTo"] != null) {
      queryParameters["neutralSentimentTo"] =
        requestParameters["neutralSentimentTo"];
    }

    if (requestParameters["negativeSentimentFrom"] != null) {
      queryParameters["negativeSentimentFrom"] =
        requestParameters["negativeSentimentFrom"];
    }

    if (requestParameters["negativeSentimentTo"] != null) {
      queryParameters["negativeSentimentTo"] =
        requestParameters["negativeSentimentTo"];
    }

    if (requestParameters["taxonomy"] != null) {
      queryParameters["taxonomy"] = requestParameters["taxonomy"];
    }

    if (requestParameters["prefixTaxonomy"] != null) {
      queryParameters["prefixTaxonomy"] = requestParameters["prefixTaxonomy"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuerySearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search and filter all news articles available via the Perigon API. The result includes a list of individual articles that were matched to your specific criteria.
   * Articles
   */
  async searchArticles(
    requestParameters: SearchArticlesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<QuerySearchResult> {
    const response = await this.searchArticlesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * Companies
   */
  async searchCompaniesRaw(
    requestParameters: SearchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CompanySearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["symbol"] != null) {
      queryParameters["symbol"] = requestParameters["symbol"];
    }

    if (requestParameters["domain"] != null) {
      queryParameters["domain"] = requestParameters["domain"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["exchange"] != null) {
      queryParameters["exchange"] = requestParameters["exchange"];
    }

    if (requestParameters["numEmployeesFrom"] != null) {
      queryParameters["numEmployeesFrom"] =
        requestParameters["numEmployeesFrom"];
    }

    if (requestParameters["numEmployeesTo"] != null) {
      queryParameters["numEmployeesTo"] = requestParameters["numEmployeesTo"];
    }

    if (requestParameters["ipoFrom"] != null) {
      queryParameters["ipoFrom"] = (
        requestParameters["ipoFrom"] as any
      ).toISOString();
    }

    if (requestParameters["ipoTo"] != null) {
      queryParameters["ipoTo"] = (
        requestParameters["ipoTo"] as any
      ).toISOString();
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["industry"] != null) {
      queryParameters["industry"] = requestParameters["industry"];
    }

    if (requestParameters["sector"] != null) {
      queryParameters["sector"] = requestParameters["sector"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/companies/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CompanySearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * Companies
   */
  async searchCompanies(
    requestParameters: SearchCompaniesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CompanySearchResult> {
    const response = await this.searchCompaniesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * Journalists
   */
  async searchJournalists1Raw(
    requestParameters: SearchJournalists1Request,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<JournalistSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["twitter"] != null) {
      queryParameters["twitter"] = requestParameters["twitter"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["source"] != null) {
      queryParameters["source"] = requestParameters["source"];
    }

    if (requestParameters["topic"] != null) {
      queryParameters["topic"] = requestParameters["topic"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["label"] != null) {
      queryParameters["label"] = requestParameters["label"];
    }

    if (requestParameters["minMonthlyPosts"] != null) {
      queryParameters["minMonthlyPosts"] = requestParameters["minMonthlyPosts"];
    }

    if (requestParameters["maxMonthlyPosts"] != null) {
      queryParameters["maxMonthlyPosts"] = requestParameters["maxMonthlyPosts"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["updatedAtFrom"] != null) {
      queryParameters["updatedAtFrom"] = (
        requestParameters["updatedAtFrom"] as any
      ).toISOString();
    }

    if (requestParameters["updatedAtTo"] != null) {
      queryParameters["updatedAtTo"] = (
        requestParameters["updatedAtTo"] as any
      ).toISOString();
    }

    if (requestParameters["showNumResults"] != null) {
      queryParameters["showNumResults"] = requestParameters["showNumResults"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/journalists/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      JournalistSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * Journalists
   */
  async searchJournalists1(
    requestParameters: SearchJournalists1Request = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<JournalistSearchResult> {
    const response = await this.searchJournalists1Raw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * People
   */
  async searchPeopleRaw(
    requestParameters: SearchPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PeopleSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["wikidataId"] != null) {
      queryParameters["wikidataId"] = requestParameters["wikidataId"];
    }

    if (requestParameters["occupationId"] != null) {
      queryParameters["occupationId"] = requestParameters["occupationId"];
    }

    if (requestParameters["occupationLabel"] != null) {
      queryParameters["occupationLabel"] = requestParameters["occupationLabel"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/people/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PeopleSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * People
   */
  async searchPeople(
    requestParameters: SearchPeopleRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PeopleSearchResult> {
    const response = await this.searchPeopleRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * Sources
   */
  async searchSourcesRaw(
    requestParameters: SearchSourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SourceSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["domain"] != null) {
      queryParameters["domain"] = requestParameters["domain"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["sourceGroup"] != null) {
      queryParameters["sourceGroup"] = requestParameters["sourceGroup"];
    }

    if (requestParameters["sortBy"] != null) {
      queryParameters["sortBy"] = requestParameters["sortBy"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["minMonthlyVisits"] != null) {
      queryParameters["minMonthlyVisits"] =
        requestParameters["minMonthlyVisits"];
    }

    if (requestParameters["maxMonthlyVisits"] != null) {
      queryParameters["maxMonthlyVisits"] =
        requestParameters["maxMonthlyVisits"];
    }

    if (requestParameters["minMonthlyPosts"] != null) {
      queryParameters["minMonthlyPosts"] = requestParameters["minMonthlyPosts"];
    }

    if (requestParameters["maxMonthlyPosts"] != null) {
      queryParameters["maxMonthlyPosts"] = requestParameters["maxMonthlyPosts"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["sourceCountry"] != null) {
      queryParameters["sourceCountry"] = requestParameters["sourceCountry"];
    }

    if (requestParameters["sourceState"] != null) {
      queryParameters["sourceState"] = requestParameters["sourceState"];
    }

    if (requestParameters["sourceCounty"] != null) {
      queryParameters["sourceCounty"] = requestParameters["sourceCounty"];
    }

    if (requestParameters["sourceCity"] != null) {
      queryParameters["sourceCity"] = requestParameters["sourceCity"];
    }

    if (requestParameters["sourceLat"] != null) {
      queryParameters["sourceLat"] = requestParameters["sourceLat"];
    }

    if (requestParameters["sourceLon"] != null) {
      queryParameters["sourceLon"] = requestParameters["sourceLon"];
    }

    if (requestParameters["sourceMaxDistance"] != null) {
      queryParameters["sourceMaxDistance"] =
        requestParameters["sourceMaxDistance"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["topic"] != null) {
      queryParameters["topic"] = requestParameters["topic"];
    }

    if (requestParameters["label"] != null) {
      queryParameters["label"] = requestParameters["label"];
    }

    if (requestParameters["paywall"] != null) {
      queryParameters["paywall"] = requestParameters["paywall"];
    }

    if (requestParameters["showSubdomains"] != null) {
      queryParameters["showSubdomains"] = requestParameters["showSubdomains"];
    }

    if (requestParameters["showNumResults"] != null) {
      queryParameters["showNumResults"] = requestParameters["showNumResults"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/sources/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SourceSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * Sources
   */
  async searchSources(
    requestParameters: SearchSourcesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SourceSearchResult> {
    const response = await this.searchSourcesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search and filter all news stories available via the Perigon API. Each story aggregates key information across related articles, including AI-generated names, summaries, and key points.
   * Stories
   */
  async searchStoriesRaw(
    requestParameters: SearchStoriesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<StorySearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["clusterId"] != null) {
      queryParameters["clusterId"] = requestParameters["clusterId"];
    }

    if (requestParameters["sortBy"] != null) {
      queryParameters["sortBy"] = requestParameters["sortBy"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["from"] != null) {
      queryParameters["from"] = (
        requestParameters["from"] as any
      ).toISOString();
    }

    if (requestParameters["to"] != null) {
      queryParameters["to"] = (requestParameters["to"] as any).toISOString();
    }

    if (requestParameters["topic"] != null) {
      queryParameters["topic"] = requestParameters["topic"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["taxonomy"] != null) {
      queryParameters["taxonomy"] = requestParameters["taxonomy"];
    }

    if (requestParameters["source"] != null) {
      queryParameters["source"] = requestParameters["source"];
    }

    if (requestParameters["sourceGroup"] != null) {
      queryParameters["sourceGroup"] = requestParameters["sourceGroup"];
    }

    if (requestParameters["minUniqueSources"] != null) {
      queryParameters["minUniqueSources"] =
        requestParameters["minUniqueSources"];
    }

    if (requestParameters["personWikidataId"] != null) {
      queryParameters["personWikidataId"] =
        requestParameters["personWikidataId"];
    }

    if (requestParameters["personName"] != null) {
      queryParameters["personName"] = requestParameters["personName"];
    }

    if (requestParameters["companyId"] != null) {
      queryParameters["companyId"] = requestParameters["companyId"];
    }

    if (requestParameters["companyName"] != null) {
      queryParameters["companyName"] = requestParameters["companyName"];
    }

    if (requestParameters["companyDomain"] != null) {
      queryParameters["companyDomain"] = requestParameters["companyDomain"];
    }

    if (requestParameters["companySymbol"] != null) {
      queryParameters["companySymbol"] = requestParameters["companySymbol"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["state"] != null) {
      queryParameters["state"] = requestParameters["state"];
    }

    if (requestParameters["city"] != null) {
      queryParameters["city"] = requestParameters["city"];
    }

    if (requestParameters["area"] != null) {
      queryParameters["area"] = requestParameters["area"];
    }

    if (requestParameters["minClusterSize"] != null) {
      queryParameters["minClusterSize"] = requestParameters["minClusterSize"];
    }

    if (requestParameters["maxClusterSize"] != null) {
      queryParameters["maxClusterSize"] = requestParameters["maxClusterSize"];
    }

    if (requestParameters["nameExists"] != null) {
      queryParameters["nameExists"] = requestParameters["nameExists"];
    }

    if (requestParameters["positiveSentimentFrom"] != null) {
      queryParameters["positiveSentimentFrom"] =
        requestParameters["positiveSentimentFrom"];
    }

    if (requestParameters["positiveSentimentTo"] != null) {
      queryParameters["positiveSentimentTo"] =
        requestParameters["positiveSentimentTo"];
    }

    if (requestParameters["neutralSentimentFrom"] != null) {
      queryParameters["neutralSentimentFrom"] =
        requestParameters["neutralSentimentFrom"];
    }

    if (requestParameters["neutralSentimentTo"] != null) {
      queryParameters["neutralSentimentTo"] =
        requestParameters["neutralSentimentTo"];
    }

    if (requestParameters["negativeSentimentFrom"] != null) {
      queryParameters["negativeSentimentFrom"] =
        requestParameters["negativeSentimentFrom"];
    }

    if (requestParameters["negativeSentimentTo"] != null) {
      queryParameters["negativeSentimentTo"] =
        requestParameters["negativeSentimentTo"];
    }

    if (requestParameters["initializedFrom"] != null) {
      queryParameters["initializedFrom"] = (
        requestParameters["initializedFrom"] as any
      ).toISOString();
    }

    if (requestParameters["initializedTo"] != null) {
      queryParameters["initializedTo"] = (
        requestParameters["initializedTo"] as any
      ).toISOString();
    }

    if (requestParameters["updatedFrom"] != null) {
      queryParameters["updatedFrom"] = (
        requestParameters["updatedFrom"] as any
      ).toISOString();
    }

    if (requestParameters["updatedTo"] != null) {
      queryParameters["updatedTo"] = (
        requestParameters["updatedTo"] as any
      ).toISOString();
    }

    if (requestParameters["showStoryPageInfo"] != null) {
      queryParameters["showStoryPageInfo"] =
        requestParameters["showStoryPageInfo"];
    }

    if (requestParameters["showNumResults"] != null) {
      queryParameters["showNumResults"] = requestParameters["showNumResults"];
    }

    if (requestParameters["showDuplicates"] != null) {
      queryParameters["showDuplicates"] = requestParameters["showDuplicates"];
    }

    if (requestParameters["excludeClusterId"] != null) {
      queryParameters["excludeClusterId"] =
        requestParameters["excludeClusterId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/stories/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StorySearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search and filter all news stories available via the Perigon API. Each story aggregates key information across related articles, including AI-generated names, summaries, and key points.
   * Stories
   */
  async searchStories(
    requestParameters: SearchStoriesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<StorySearchResult> {
    const response = await this.searchStoriesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Produce a single, concise summary over the full corpus of articles matching your filters, using your prompt to guide which insights to highlight.
   * Search Summarizer
   */
  async searchSummarizerRaw(
    requestParameters: SearchSummarizerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SummarySearchResult>> {
    if (requestParameters["summaryBody"] == null) {
      throw new runtime.RequiredError(
        "summaryBody",
        'Required parameter "summaryBody" was null or undefined when calling searchSummarizer().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["title"] != null) {
      queryParameters["title"] = requestParameters["title"];
    }

    if (requestParameters["desc"] != null) {
      queryParameters["desc"] = requestParameters["desc"];
    }

    if (requestParameters["content"] != null) {
      queryParameters["content"] = requestParameters["content"];
    }

    if (requestParameters["url"] != null) {
      queryParameters["url"] = requestParameters["url"];
    }

    if (requestParameters["articleId"] != null) {
      queryParameters["articleId"] = requestParameters["articleId"];
    }

    if (requestParameters["clusterId"] != null) {
      queryParameters["clusterId"] = requestParameters["clusterId"];
    }

    if (requestParameters["sortBy"] != null) {
      queryParameters["sortBy"] = requestParameters["sortBy"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["from"] != null) {
      queryParameters["from"] = (
        requestParameters["from"] as any
      ).toISOString();
    }

    if (requestParameters["to"] != null) {
      queryParameters["to"] = (requestParameters["to"] as any).toISOString();
    }

    if (requestParameters["addDateFrom"] != null) {
      queryParameters["addDateFrom"] = (
        requestParameters["addDateFrom"] as any
      ).toISOString();
    }

    if (requestParameters["addDateTo"] != null) {
      queryParameters["addDateTo"] = (
        requestParameters["addDateTo"] as any
      ).toISOString();
    }

    if (requestParameters["refreshDateFrom"] != null) {
      queryParameters["refreshDateFrom"] = (
        requestParameters["refreshDateFrom"] as any
      ).toISOString();
    }

    if (requestParameters["refreshDateTo"] != null) {
      queryParameters["refreshDateTo"] = (
        requestParameters["refreshDateTo"] as any
      ).toISOString();
    }

    if (requestParameters["medium"] != null) {
      queryParameters["medium"] = requestParameters["medium"];
    }

    if (requestParameters["source"] != null) {
      queryParameters["source"] = requestParameters["source"];
    }

    if (requestParameters["sourceGroup"] != null) {
      queryParameters["sourceGroup"] = requestParameters["sourceGroup"];
    }

    if (requestParameters["excludeSourceGroup"] != null) {
      queryParameters["excludeSourceGroup"] =
        requestParameters["excludeSourceGroup"];
    }

    if (requestParameters["excludeSource"] != null) {
      queryParameters["excludeSource"] = requestParameters["excludeSource"];
    }

    if (requestParameters["paywall"] != null) {
      queryParameters["paywall"] = requestParameters["paywall"];
    }

    if (requestParameters["byline"] != null) {
      queryParameters["byline"] = requestParameters["byline"];
    }

    if (requestParameters["author"] != null) {
      queryParameters["author"] = requestParameters["author"];
    }

    if (requestParameters["excludeAuthor"] != null) {
      queryParameters["excludeAuthor"] = requestParameters["excludeAuthor"];
    }

    if (requestParameters["journalistId"] != null) {
      queryParameters["journalistId"] = requestParameters["journalistId"];
    }

    if (requestParameters["excludeJournalistId"] != null) {
      queryParameters["excludeJournalistId"] =
        requestParameters["excludeJournalistId"];
    }

    if (requestParameters["language"] != null) {
      queryParameters["language"] = requestParameters["language"];
    }

    if (requestParameters["excludeLanguage"] != null) {
      queryParameters["excludeLanguage"] = requestParameters["excludeLanguage"];
    }

    if (requestParameters["searchTranslation"] != null) {
      queryParameters["searchTranslation"] =
        requestParameters["searchTranslation"];
    }

    if (requestParameters["label"] != null) {
      queryParameters["label"] = requestParameters["label"];
    }

    if (requestParameters["excludeLabel"] != null) {
      queryParameters["excludeLabel"] = requestParameters["excludeLabel"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["excludeCategory"] != null) {
      queryParameters["excludeCategory"] = requestParameters["excludeCategory"];
    }

    if (requestParameters["topic"] != null) {
      queryParameters["topic"] = requestParameters["topic"];
    }

    if (requestParameters["excludeTopic"] != null) {
      queryParameters["excludeTopic"] = requestParameters["excludeTopic"];
    }

    if (requestParameters["linkTo"] != null) {
      queryParameters["linkTo"] = requestParameters["linkTo"];
    }

    if (requestParameters["showReprints"] != null) {
      queryParameters["showReprints"] = requestParameters["showReprints"];
    }

    if (requestParameters["reprintGroupId"] != null) {
      queryParameters["reprintGroupId"] = requestParameters["reprintGroupId"];
    }

    if (requestParameters["city"] != null) {
      queryParameters["city"] = requestParameters["city"];
    }

    if (requestParameters["excludeCity"] != null) {
      queryParameters["excludeCity"] = requestParameters["excludeCity"];
    }

    if (requestParameters["area"] != null) {
      queryParameters["area"] = requestParameters["area"];
    }

    if (requestParameters["state"] != null) {
      queryParameters["state"] = requestParameters["state"];
    }

    if (requestParameters["excludeState"] != null) {
      queryParameters["excludeState"] = requestParameters["excludeState"];
    }

    if (requestParameters["county"] != null) {
      queryParameters["county"] = requestParameters["county"];
    }

    if (requestParameters["excludeCounty"] != null) {
      queryParameters["excludeCounty"] = requestParameters["excludeCounty"];
    }

    if (requestParameters["locationsCountry"] != null) {
      queryParameters["locationsCountry"] =
        requestParameters["locationsCountry"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["excludeLocationsCountry"] != null) {
      queryParameters["excludeLocationsCountry"] =
        requestParameters["excludeLocationsCountry"];
    }

    if (requestParameters["location"] != null) {
      queryParameters["location"] = requestParameters["location"];
    }

    if (requestParameters["lat"] != null) {
      queryParameters["lat"] = requestParameters["lat"];
    }

    if (requestParameters["lon"] != null) {
      queryParameters["lon"] = requestParameters["lon"];
    }

    if (requestParameters["maxDistance"] != null) {
      queryParameters["maxDistance"] = requestParameters["maxDistance"];
    }

    if (requestParameters["sourceCity"] != null) {
      queryParameters["sourceCity"] = requestParameters["sourceCity"];
    }

    if (requestParameters["sourceCounty"] != null) {
      queryParameters["sourceCounty"] = requestParameters["sourceCounty"];
    }

    if (requestParameters["sourceCountry"] != null) {
      queryParameters["sourceCountry"] = requestParameters["sourceCountry"];
    }

    if (requestParameters["sourceState"] != null) {
      queryParameters["sourceState"] = requestParameters["sourceState"];
    }

    if (requestParameters["sourceLat"] != null) {
      queryParameters["sourceLat"] = requestParameters["sourceLat"];
    }

    if (requestParameters["sourceLon"] != null) {
      queryParameters["sourceLon"] = requestParameters["sourceLon"];
    }

    if (requestParameters["sourceMaxDistance"] != null) {
      queryParameters["sourceMaxDistance"] =
        requestParameters["sourceMaxDistance"];
    }

    if (requestParameters["personWikidataId"] != null) {
      queryParameters["personWikidataId"] =
        requestParameters["personWikidataId"];
    }

    if (requestParameters["excludePersonWikidataId"] != null) {
      queryParameters["excludePersonWikidataId"] =
        requestParameters["excludePersonWikidataId"];
    }

    if (requestParameters["personName"] != null) {
      queryParameters["personName"] = requestParameters["personName"];
    }

    if (requestParameters["excludePersonName"] != null) {
      queryParameters["excludePersonName"] =
        requestParameters["excludePersonName"];
    }

    if (requestParameters["companyId"] != null) {
      queryParameters["companyId"] = requestParameters["companyId"];
    }

    if (requestParameters["excludeCompanyId"] != null) {
      queryParameters["excludeCompanyId"] =
        requestParameters["excludeCompanyId"];
    }

    if (requestParameters["companyName"] != null) {
      queryParameters["companyName"] = requestParameters["companyName"];
    }

    if (requestParameters["companyDomain"] != null) {
      queryParameters["companyDomain"] = requestParameters["companyDomain"];
    }

    if (requestParameters["excludeCompanyDomain"] != null) {
      queryParameters["excludeCompanyDomain"] =
        requestParameters["excludeCompanyDomain"];
    }

    if (requestParameters["companySymbol"] != null) {
      queryParameters["companySymbol"] = requestParameters["companySymbol"];
    }

    if (requestParameters["excludeCompanySymbol"] != null) {
      queryParameters["excludeCompanySymbol"] =
        requestParameters["excludeCompanySymbol"];
    }

    if (requestParameters["showNumResults"] != null) {
      queryParameters["showNumResults"] = requestParameters["showNumResults"];
    }

    if (requestParameters["positiveSentimentFrom"] != null) {
      queryParameters["positiveSentimentFrom"] =
        requestParameters["positiveSentimentFrom"];
    }

    if (requestParameters["positiveSentimentTo"] != null) {
      queryParameters["positiveSentimentTo"] =
        requestParameters["positiveSentimentTo"];
    }

    if (requestParameters["neutralSentimentFrom"] != null) {
      queryParameters["neutralSentimentFrom"] =
        requestParameters["neutralSentimentFrom"];
    }

    if (requestParameters["neutralSentimentTo"] != null) {
      queryParameters["neutralSentimentTo"] =
        requestParameters["neutralSentimentTo"];
    }

    if (requestParameters["negativeSentimentFrom"] != null) {
      queryParameters["negativeSentimentFrom"] =
        requestParameters["negativeSentimentFrom"];
    }

    if (requestParameters["negativeSentimentTo"] != null) {
      queryParameters["negativeSentimentTo"] =
        requestParameters["negativeSentimentTo"];
    }

    if (requestParameters["taxonomy"] != null) {
      queryParameters["taxonomy"] = requestParameters["taxonomy"];
    }

    if (requestParameters["prefixTaxonomy"] != null) {
      queryParameters["prefixTaxonomy"] = requestParameters["prefixTaxonomy"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/summarize`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: SummaryBodyToJSON(requestParameters["summaryBody"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SummarySearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Produce a single, concise summary over the full corpus of articles matching your filters, using your prompt to guide which insights to highlight.
   * Search Summarizer
   */
  async searchSummarizer(
    requestParameters: SearchSummarizerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SummarySearchResult> {
    const response = await this.searchSummarizerRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * Topics
   */
  async searchTopicsRaw(
    requestParameters: SearchTopicsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TopicSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["subcategory"] != null) {
      queryParameters["subcategory"] = requestParameters["subcategory"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/topics/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TopicSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * Topics
   */
  async searchTopics(
    requestParameters: SearchTopicsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TopicSearchResult> {
    const response = await this.searchTopicsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Perform a natural language search over news articles from the past 6 months using semantic relevance. The result includes a list of articles most closely matched to your query intent.
   * Vector
   */
  async vectorSearchArticlesRaw(
    requestParameters: VectorSearchArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<VectorSearchResult>> {
    if (requestParameters["articleSearchParams"] == null) {
      throw new runtime.RequiredError(
        "articleSearchParams",
        'Required parameter "articleSearchParams" was null or undefined when calling vectorSearchArticles().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/vector/news/all`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ArticleSearchParamsToJSON(
          requestParameters["articleSearchParams"],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VectorSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Perform a natural language search over news articles from the past 6 months using semantic relevance. The result includes a list of articles most closely matched to your query intent.
   * Vector
   */
  async vectorSearchArticles(
    requestParameters: VectorSearchArticlesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<VectorSearchResult> {
    const response = await this.vectorSearchArticlesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
