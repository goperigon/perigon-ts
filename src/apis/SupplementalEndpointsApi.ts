/* tslint:disable */
/* eslint-disable */
/**
 * Perigon API
 * The Perigon API provides access to comprehensive news and web content data. To use the API, simply sign up for a Perigon Business Solutions account to obtain your API key. Your available features may vary based on your plan. See the Authentication section for details on how to use your API key.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: data@perigon.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  AuthException,
  CompanySearchResult,
  IllegalParameterException,
  InternalErrorException,
  Journalist,
  JournalistSearchResult,
  NotFoundException,
  PeopleSearchResult,
  SortBy,
  SourceSearchResult,
  TooManyRequestsException,
  TopicSearchResult,
} from "../models/index";
import {
  AuthExceptionFromJSON,
  AuthExceptionToJSON,
  CompanySearchResultFromJSON,
  CompanySearchResultToJSON,
  IllegalParameterExceptionFromJSON,
  IllegalParameterExceptionToJSON,
  InternalErrorExceptionFromJSON,
  InternalErrorExceptionToJSON,
  JournalistFromJSON,
  JournalistToJSON,
  JournalistSearchResultFromJSON,
  JournalistSearchResultToJSON,
  NotFoundExceptionFromJSON,
  NotFoundExceptionToJSON,
  PeopleSearchResultFromJSON,
  PeopleSearchResultToJSON,
  SortByFromJSON,
  SortByToJSON,
  SourceSearchResultFromJSON,
  SourceSearchResultToJSON,
  TooManyRequestsExceptionFromJSON,
  TooManyRequestsExceptionToJSON,
  TopicSearchResultFromJSON,
  TopicSearchResultToJSON,
} from "../models/index";

export interface GetJournalistByIdRequest {
  /**
   * Parameter id
   * @required
   */
  id: string;
}

export interface SearchCompaniesRequest {
  /**
   * Filter by unique company identifiers. Multiple values create an OR filter.
   */
  id?: Array<string>;
  /**
   * Filter by company stock ticker symbols (e.g., AAPL, MSFT, GOOGL). Multiple values create an OR filter.
   */
  symbol?: Array<string>;
  /**
   * Filter by company domains or websites (e.g., apple.com, microsoft.com). Multiple values create an OR filter.
   */
  domain?: Array<string>;
  /**
   * Filter by company headquarters country. Multiple values create an OR filter.
   */
  country?: Array<string>;
  /**
   * Filter by stock exchange where companies are listed (e.g., NASDAQ, NYSE). Multiple values create an OR filter.
   */
  exchange?: Array<string>;
  /**
   * Filter for companies with at least this many employees.
   */
  numEmployeesFrom?: number;
  /**
   * Filter for companies with no more than this many employees.
   */
  numEmployeesTo?: number;
  /**
   * Filter for companies that went public on or after this date. Accepts ISO 8601 format (e.g., 2023-01-01T00:00:00) or yyyy-mm-dd format.
   */
  ipoFrom?: Date;
  /**
   * Filter for companies that went public on or before this date. Accepts ISO 8601 format (e.g., 2023-12-31T23:59:59) or yyyy-mm-dd format.
   */
  ipoTo?: Date;
  /**
   * Primary search query for filtering companies across name, alternative names, domains, and ticker symbols. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  q?: string;
  /**
   * Search within company names. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  name?: string;
  /**
   * Filter by company industry classifications. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  industry?: string;
  /**
   * Filter by company sector classifications. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  sector?: string;
  /**
   * The number of companies to return per page in the paginated response.
   */
  size?: number;
  /**
   * The specific page of results to retrieve in the paginated response. Starts at 0.
   */
  page?: number;
}

export interface SearchJournalistsRequest {
  /**
   * Filter by unique journalist identifiers. Multiple values create an OR filter to find journalists matching any of the specified IDs.
   */
  id?: Array<string>;
  /**
   * Primary search query for filtering journalists based on their name, title, and Twitter bio. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  q?: string;
  /**
   * Search specifically within journalist names. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  name?: string;
  /**
   * Filter journalists by their exact Twitter handle, without the @ symbol.
   */
  twitter?: string;
  /**
   * The number of journalists to return per page in the paginated response.
   */
  size?: number;
  /**
   * The specific page of results to retrieve in the paginated response. Starts at 0.
   */
  page?: number;
  /**
   * Filter journalists by the publisher domains they write for. Supports wildcards (* and ?) for pattern matching (e.g., *.cnn.com). Multiple values create an OR filter.
   */
  source?: Array<string>;
  /**
   * Filter journalists by the topics they frequently cover. Multiple values create an OR filter to find journalists covering any of the specified topics.
   */
  topic?: Array<string>;
  /**
   * Filter journalists by the content categories they typically write about (e.g., Politics, Tech, Sports, Business). Multiple values create an OR filter.
   */
  category?: Array<string>;
  /**
   * Filter journalists by the type of content they typically produce (e.g., Opinion, Paid-news, Non-news). Multiple values create an OR filter.
   */
  label?: Array<string>;
  /**
   * Filter for journalists who publish at least this many articles per month. Used to identify more active journalists.
   */
  minMonthlyPosts?: number;
  /**
   * Filter for journalists who publish no more than this many articles per month.
   */
  maxMonthlyPosts?: number;
  /**
   * Filter journalists by countries they commonly cover in their reporting. Uses ISO 3166-1 alpha-2 two-letter country codes in lowercase (e.g., us, gb, jp). Multiple values create an OR filter.
   */
  country?: Array<string>;
  /**
   * Filter for journalist profiles updated on or after this date. Accepts ISO 8601 format (e.g., 2023-03-01T00:00:00) or yyyy-mm-dd format.
   */
  updatedAtFrom?: Date;
  /**
   * Filter for journalist profiles updated on or before this date. Accepts ISO 8601 format (e.g., 2023-03-01T23:59:59) or yyyy-mm-dd format.
   */
  updatedAtTo?: Date;
  /**
   * Controls whether to return the exact result count. When false (default), counts are capped at 10,000 for performance reasons. Set to true for precise counts in smaller result sets.
   */
  showNumResults?: boolean;
}

export interface SearchPeopleRequest {
  /**
   * Search by person\&#39;s name. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  name?: string;
  /**
   * Filter by Wikidata entity IDs (e.g., Q7747, Q937). These are unique identifiers from Wikidata.org that precisely identify public figures and eliminate name ambiguity. Multiple values create an OR filter.
   */
  wikidataId?: Array<string>;
  /**
   * Filter by Wikidata occupation IDs (e.g., Q82955 for politician, Q33999 for actor, Q19546 for businessman). Finds people with specific professions. Multiple values create an OR filter.
   */
  occupationId?: Array<string>;
  /**
   * Search by occupation name (e.g., politician, actor, CEO, athlete). Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  occupationLabel?: string;
  /**
   * The specific page of results to retrieve in the paginated response. Starts at 0.
   */
  page?: number;
  /**
   * The number of people to return per page in the paginated response.
   */
  size?: number;
}

export interface SearchSourcesRequest {
  /**
   * Filter by specific publisher domains or subdomains. Supports wildcards (* and ?) for pattern matching (e.g., *.cnn.com, us?.nytimes.com). Multiple values create an OR filter.
   */
  domain?: Array<string>;
  /**
   * Search by source name or alternative names. Supports Boolean operators (AND, OR, NOT), exact phrases with quotes, and wildcards (* and ?) for flexible searching.
   */
  name?: string;
  /**
   * Filter by predefined publisher bundles (e.g., top100, top50tech). Returns all sources within the specified group. See documentation for available source groups.
   */
  sourceGroup?: string;
  /**
   * Determines the source sorting order. Options include relevance (default, best match to query), globalRank (by overall traffic and popularity), monthlyVisits (by total monthly visitor count), and avgMonthlyPosts (by number of articles published monthly).
   */
  sortBy?: SortBy;
  /**
   * The specific page of results to retrieve in the paginated response. Starts at 0.
   */
  page?: number;
  /**
   * The number of sources to return per page in the paginated response.
   */
  size?: number;
  /**
   * Filter for sources with at least this many monthly visitors. Used to target publishers by audience size.
   */
  minMonthlyVisits?: number;
  /**
   * Filter for sources with no more than this many monthly visitors. Used to target publishers by audience size.
   */
  maxMonthlyVisits?: number;
  /**
   * Filter for sources that publish at least this many articles per month. Used to target publishers by content volume.
   */
  minMonthlyPosts?: number;
  /**
   * Filter for sources that publish no more than this many articles per month. Used to target publishers by content volume.
   */
  maxMonthlyPosts?: number;
  /**
   * Filter sources by countries they commonly cover in their reporting. Uses ISO 3166-1 alpha-2 two-letter country codes in lowercase (e.g., us, gb, jp). See documentation for supported country codes. Multiple values create an OR filter.
   */
  country?: Array<string>;
  /**
   * Filter for local publications based in specific countries. Uses ISO 3166-1 alpha-2 two-letter country codes in lowercase (e.g., us, gb, jp). See documentation for supported country codes. Multiple values create an OR filter.
   */
  sourceCountry?: Array<string>;
  /**
   * Filter for local publications based in specific states or regions. Uses standard two-letter state codes in lowercase (e.g., ca, ny, tx). See documentation for supported state codes. Multiple values create an OR filter.
   */
  sourceState?: Array<string>;
  /**
   * Filter for local publications based in specific counties. Multiple values create an OR filter.
   */
  sourceCounty?: Array<string>;
  /**
   * Filter for local publications based in specific cities. Multiple values create an OR filter.
   */
  sourceCity?: Array<string>;
  /**
   * Latitude coordinate for filtering local publications by geographic proximity. Used with sourceLon and sourceMaxDistance for radius search.
   */
  sourceLat?: number;
  /**
   * Longitude coordinate for filtering local publications by geographic proximity. Used with sourceLat and sourceMaxDistance for radius search.
   */
  sourceLon?: number;
  /**
   * Maximum distance in kilometers from the coordinates defined by sourceLat and sourceLon. Defines the radius for local publication searches.
   */
  sourceMaxDistance?: number;
  /**
   * Filter sources by their primary content categories such as Politics, Tech, Sports, Business, or Finance. Returns sources that frequently cover these topics. Multiple values create an OR filter.
   */
  category?: Array<string>;
  /**
   * Filter sources by their frequently covered topics (e.g., Markets, Cryptocurrency, Climate Change). Returns sources where the specified topic is among their top 10 covered areas. Multiple values create an OR filter.
   */
  topic?: Array<string>;
  /**
   * Filter sources by their content label patterns (e.g., Opinion, Paid-news, Non-news). Returns sources where the specified label is common in their published content. See documentation for all available labels. Multiple values create an OR filter.
   */
  label?: Array<string>;
  /**
   * Filter by paywall status. Set to true to find sources with paywalls, or false to find sources without paywalls.
   */
  paywall?: boolean;
  /**
   * Controls whether subdomains are included as separate results. When true (default), subdomains appear as distinct sources. When false, results are consolidated to parent domains only.
   */
  showSubdomains?: boolean;
  /**
   * Controls whether to return the exact result count. When false (default), counts are capped at 10,000 for performance reasons. Set to true for precise counts in smaller result sets.
   */
  showNumResults?: boolean;
}

export interface SearchTopicsRequest {
  /**
   * Search for topics by exact name or partial text match. Does not support wildcards. Examples include Markets, Cryptocurrency, Climate Change, etc.
   */
  name?: string;
  /**
   * Filter topics by broad article categories such as Politics, Tech, Sports, Business, Finance, Entertainment, etc.
   */
  category?: string;
  /**
   * Filter topics by their specific subcategory. Subcategories provide more granular classification beyond the main category, such as TV or Event.
   */
  subcategory?: string;
  /**
   * The specific page of results to retrieve in the paginated response. Starts at 0.
   */
  page?: number;
  /**
   * The number of topics to return per page in the paginated response.
   */
  size?: number;
}

/**
 * SupplementalEndpointsApi - interface
 *
 * @export
 * @interface SupplementalEndpointsApiInterface
 */
export interface SupplementalEndpointsApiInterface {
  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * @summary Journalists ID
   * @param requestParameters - Request parameters (see interface for details)
   * @param initOverrides - Override the default HTTP request configuration
   * @returns {Promise<runtime.ApiResponse<Journalist>}} Raw API response
   * @throws {RequiredError}
   * @memberof SupplementalEndpointsApiInterface
   */
  getJournalistByIdRaw(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Journalist>>;

  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * Journalists ID
   */
  getJournalistById(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Journalist>;

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * @summary Companies
   * @param requestParameters - Request parameters (see interface for details)
   * @param initOverrides - Override the default HTTP request configuration
   * @returns {Promise<runtime.ApiResponse<CompanySearchResult>}} Raw API response
   * @throws {RequiredError}
   * @memberof SupplementalEndpointsApiInterface
   */
  searchCompaniesRaw(
    requestParameters: SearchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CompanySearchResult>>;

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * Companies
   */
  searchCompanies(
    requestParameters: SearchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CompanySearchResult>;

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * @summary Journalists
   * @param requestParameters - Request parameters (see interface for details)
   * @param initOverrides - Override the default HTTP request configuration
   * @returns {Promise<runtime.ApiResponse<JournalistSearchResult>}} Raw API response
   * @throws {RequiredError}
   * @memberof SupplementalEndpointsApiInterface
   */
  searchJournalistsRaw(
    requestParameters: SearchJournalistsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<JournalistSearchResult>>;

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * Journalists
   */
  searchJournalists(
    requestParameters: SearchJournalistsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<JournalistSearchResult>;

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * @summary People
   * @param requestParameters - Request parameters (see interface for details)
   * @param initOverrides - Override the default HTTP request configuration
   * @returns {Promise<runtime.ApiResponse<PeopleSearchResult>}} Raw API response
   * @throws {RequiredError}
   * @memberof SupplementalEndpointsApiInterface
   */
  searchPeopleRaw(
    requestParameters: SearchPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PeopleSearchResult>>;

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * People
   */
  searchPeople(
    requestParameters: SearchPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PeopleSearchResult>;

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * @summary Sources
   * @param requestParameters - Request parameters (see interface for details)
   * @param initOverrides - Override the default HTTP request configuration
   * @returns {Promise<runtime.ApiResponse<SourceSearchResult>}} Raw API response
   * @throws {RequiredError}
   * @memberof SupplementalEndpointsApiInterface
   */
  searchSourcesRaw(
    requestParameters: SearchSourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SourceSearchResult>>;

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * Sources
   */
  searchSources(
    requestParameters: SearchSourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SourceSearchResult>;

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * @summary Topics
   * @param requestParameters - Request parameters (see interface for details)
   * @param initOverrides - Override the default HTTP request configuration
   * @returns {Promise<runtime.ApiResponse<TopicSearchResult>}} Raw API response
   * @throws {RequiredError}
   * @memberof SupplementalEndpointsApiInterface
   */
  searchTopicsRaw(
    requestParameters: SearchTopicsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TopicSearchResult>>;

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * Topics
   */
  searchTopics(
    requestParameters: SearchTopicsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TopicSearchResult>;
}

/**
 *
 */
export class SupplementalEndpointsApi
  extends runtime.BaseAPI
  implements SupplementalEndpointsApiInterface
{
  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * Journalists ID
   */
  async getJournalistByIdRaw(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Journalist>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getJournalistById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/journalists/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      JournalistFromJSON(jsonValue),
    );
  }

  /**
   * Find additional details on a journalist by using the journalist ID found in an article response object.
   * Journalists ID
   */
  async getJournalistById(
    requestParameters: GetJournalistByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Journalist> {
    const response = await this.getJournalistByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * Companies
   */
  async searchCompaniesRaw(
    requestParameters: SearchCompaniesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CompanySearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["symbol"] != null) {
      queryParameters["symbol"] = requestParameters["symbol"];
    }

    if (requestParameters["domain"] != null) {
      queryParameters["domain"] = requestParameters["domain"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["exchange"] != null) {
      queryParameters["exchange"] = requestParameters["exchange"];
    }

    if (requestParameters["numEmployeesFrom"] != null) {
      queryParameters["numEmployeesFrom"] =
        requestParameters["numEmployeesFrom"];
    }

    if (requestParameters["numEmployeesTo"] != null) {
      queryParameters["numEmployeesTo"] = requestParameters["numEmployeesTo"];
    }

    if (requestParameters["ipoFrom"] != null) {
      queryParameters["ipoFrom"] = (
        requestParameters["ipoFrom"] as any
      ).toISOString();
    }

    if (requestParameters["ipoTo"] != null) {
      queryParameters["ipoTo"] = (
        requestParameters["ipoTo"] as any
      ).toISOString();
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["industry"] != null) {
      queryParameters["industry"] = requestParameters["industry"];
    }

    if (requestParameters["sector"] != null) {
      queryParameters["sector"] = requestParameters["sector"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/companies/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CompanySearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Browse or search for companies Perigon tracks using name, domain, ticker symbol, industry, and more. Supports Boolean search logic and filtering by metadata such as country, exchange, employee count, and IPO date.
   * Companies
   */
  async searchCompanies(
    requestParameters: SearchCompaniesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CompanySearchResult> {
    const response = await this.searchCompaniesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * Journalists
   */
  async searchJournalistsRaw(
    requestParameters: SearchJournalistsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<JournalistSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["q"] != null) {
      queryParameters["q"] = requestParameters["q"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["twitter"] != null) {
      queryParameters["twitter"] = requestParameters["twitter"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["source"] != null) {
      queryParameters["source"] = requestParameters["source"];
    }

    if (requestParameters["topic"] != null) {
      queryParameters["topic"] = requestParameters["topic"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["label"] != null) {
      queryParameters["label"] = requestParameters["label"];
    }

    if (requestParameters["minMonthlyPosts"] != null) {
      queryParameters["minMonthlyPosts"] = requestParameters["minMonthlyPosts"];
    }

    if (requestParameters["maxMonthlyPosts"] != null) {
      queryParameters["maxMonthlyPosts"] = requestParameters["maxMonthlyPosts"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["updatedAtFrom"] != null) {
      queryParameters["updatedAtFrom"] = (
        requestParameters["updatedAtFrom"] as any
      ).toISOString();
    }

    if (requestParameters["updatedAtTo"] != null) {
      queryParameters["updatedAtTo"] = (
        requestParameters["updatedAtTo"] as any
      ).toISOString();
    }

    if (requestParameters["showNumResults"] != null) {
      queryParameters["showNumResults"] = requestParameters["showNumResults"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/journalists/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      JournalistSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search journalists using broad search attributes. Our database contains over 230,000 journalists from around the world and is refreshed frequently.
   * Journalists
   */
  async searchJournalists(
    requestParameters: SearchJournalistsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<JournalistSearchResult> {
    const response = await this.searchJournalistsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * People
   */
  async searchPeopleRaw(
    requestParameters: SearchPeopleRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<PeopleSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["wikidataId"] != null) {
      queryParameters["wikidataId"] = requestParameters["wikidataId"];
    }

    if (requestParameters["occupationId"] != null) {
      queryParameters["occupationId"] = requestParameters["occupationId"];
    }

    if (requestParameters["occupationLabel"] != null) {
      queryParameters["occupationLabel"] = requestParameters["occupationLabel"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/people/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PeopleSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search and retrieve additional information on known persons that exist within Perigon\'s entity database and as referenced in any article response object. Our database contains over 650,000 people from around the world and is refreshed frequently. People data is derived from Wikidata and includes a wikidataId field that can be used to lookup even more information on Wikidata\'s website.
   * People
   */
  async searchPeople(
    requestParameters: SearchPeopleRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<PeopleSearchResult> {
    const response = await this.searchPeopleRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * Sources
   */
  async searchSourcesRaw(
    requestParameters: SearchSourcesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SourceSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["domain"] != null) {
      queryParameters["domain"] = requestParameters["domain"];
    }

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["sourceGroup"] != null) {
      queryParameters["sourceGroup"] = requestParameters["sourceGroup"];
    }

    if (requestParameters["sortBy"] != null) {
      queryParameters["sortBy"] = requestParameters["sortBy"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    if (requestParameters["minMonthlyVisits"] != null) {
      queryParameters["minMonthlyVisits"] =
        requestParameters["minMonthlyVisits"];
    }

    if (requestParameters["maxMonthlyVisits"] != null) {
      queryParameters["maxMonthlyVisits"] =
        requestParameters["maxMonthlyVisits"];
    }

    if (requestParameters["minMonthlyPosts"] != null) {
      queryParameters["minMonthlyPosts"] = requestParameters["minMonthlyPosts"];
    }

    if (requestParameters["maxMonthlyPosts"] != null) {
      queryParameters["maxMonthlyPosts"] = requestParameters["maxMonthlyPosts"];
    }

    if (requestParameters["country"] != null) {
      queryParameters["country"] = requestParameters["country"];
    }

    if (requestParameters["sourceCountry"] != null) {
      queryParameters["sourceCountry"] = requestParameters["sourceCountry"];
    }

    if (requestParameters["sourceState"] != null) {
      queryParameters["sourceState"] = requestParameters["sourceState"];
    }

    if (requestParameters["sourceCounty"] != null) {
      queryParameters["sourceCounty"] = requestParameters["sourceCounty"];
    }

    if (requestParameters["sourceCity"] != null) {
      queryParameters["sourceCity"] = requestParameters["sourceCity"];
    }

    if (requestParameters["sourceLat"] != null) {
      queryParameters["sourceLat"] = requestParameters["sourceLat"];
    }

    if (requestParameters["sourceLon"] != null) {
      queryParameters["sourceLon"] = requestParameters["sourceLon"];
    }

    if (requestParameters["sourceMaxDistance"] != null) {
      queryParameters["sourceMaxDistance"] =
        requestParameters["sourceMaxDistance"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["topic"] != null) {
      queryParameters["topic"] = requestParameters["topic"];
    }

    if (requestParameters["label"] != null) {
      queryParameters["label"] = requestParameters["label"];
    }

    if (requestParameters["paywall"] != null) {
      queryParameters["paywall"] = requestParameters["paywall"];
    }

    if (requestParameters["showSubdomains"] != null) {
      queryParameters["showSubdomains"] = requestParameters["showSubdomains"];
    }

    if (requestParameters["showNumResults"] != null) {
      queryParameters["showNumResults"] = requestParameters["showNumResults"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/sources/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SourceSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search and filter the 142,000+ media sources available via the Perigon API. The result includes a list of individual media sources that were matched to your specific criteria.
   * Sources
   */
  async searchSources(
    requestParameters: SearchSourcesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SourceSearchResult> {
    const response = await this.searchSourcesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * Topics
   */
  async searchTopicsRaw(
    requestParameters: SearchTopicsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<TopicSearchResult>> {
    const queryParameters: any = {};

    if (requestParameters["name"] != null) {
      queryParameters["name"] = requestParameters["name"];
    }

    if (requestParameters["category"] != null) {
      queryParameters["category"] = requestParameters["category"];
    }

    if (requestParameters["subcategory"] != null) {
      queryParameters["subcategory"] = requestParameters["subcategory"];
    }

    if (requestParameters["page"] != null) {
      queryParameters["page"] = requestParameters["page"];
    }

    if (requestParameters["size"] != null) {
      queryParameters["size"] = requestParameters["size"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token("apiKeyAuth", []);

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v1/topics/all`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      TopicSearchResultFromJSON(jsonValue),
    );
  }

  /**
   * Search through all available Topics that exist within the Perigon Database.
   * Topics
   */
  async searchTopics(
    requestParameters: SearchTopicsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<TopicSearchResult> {
    const response = await this.searchTopicsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
